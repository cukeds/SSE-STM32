
SSE-Disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800573c  0800573c  0000673c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005758  08005758  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005760  08005760  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005760  08005760  00006760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005764  08005764  00006764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005768  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          000001cc  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fdc7  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d21  00000000  00000000  00016e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00019b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfd  00000000  00000000  0001aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242b0  00000000  00000000  0001b6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c44  00000000  00000000  0003f98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d80b5  00000000  00000000  000545d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c686  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004084  00000000  00000000  0012c6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00130750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005724 	.word	0x08005724

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005724 	.word	0x08005724

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96a 	b.w	8000c90 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	460c      	mov	r4, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14e      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e0:	4694      	mov	ip, r2
 80009e2:	458c      	cmp	ip, r1
 80009e4:	4686      	mov	lr, r0
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	d962      	bls.n	8000ab2 <__udivmoddi4+0xde>
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0320 	rsb	r3, r2, #32
 80009f2:	4091      	lsls	r1, r2
 80009f4:	fa20 f303 	lsr.w	r3, r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fa1f f68c 	uxth.w	r6, ip
 8000a0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a12:	fb07 1114 	mls	r1, r7, r4, r1
 8000a16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1a:	fb04 f106 	mul.w	r1, r4, r6
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a2a:	f080 8112 	bcs.w	8000c52 <__udivmoddi4+0x27e>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 810f 	bls.w	8000c52 <__udivmoddi4+0x27e>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1110 	mls	r1, r7, r0, r1
 8000a46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4a:	fb00 f606 	mul.w	r6, r0, r6
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x94>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5a:	f080 80fc 	bcs.w	8000c56 <__udivmoddi4+0x282>
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	f240 80f9 	bls.w	8000c56 <__udivmoddi4+0x282>
 8000a64:	4463      	add	r3, ip
 8000a66:	3802      	subs	r0, #2
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6e:	2100      	movs	r1, #0
 8000a70:	b11d      	cbz	r5, 8000a7a <__udivmoddi4+0xa6>
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d905      	bls.n	8000a8e <__udivmoddi4+0xba>
 8000a82:	b10d      	cbz	r5, 8000a88 <__udivmoddi4+0xb4>
 8000a84:	e9c5 0100 	strd	r0, r1, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e7f5      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000a8e:	fab3 f183 	clz	r1, r3
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d146      	bne.n	8000b24 <__udivmoddi4+0x150>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xcc>
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	f0c0 80f0 	bcc.w	8000c80 <__udivmoddi4+0x2ac>
 8000aa0:	1a86      	subs	r6, r0, r2
 8000aa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d0e6      	beq.n	8000a7a <__udivmoddi4+0xa6>
 8000aac:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab0:	e7e3      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8090 	bne.w	8000bd8 <__udivmoddi4+0x204>
 8000ab8:	eba1 040c 	sub.w	r4, r1, ip
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa1f f78c 	uxth.w	r7, ip
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ace:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad6:	fb07 f006 	mul.w	r0, r7, r6
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x11c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x11a>
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	f200 80cd 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000aee:	4626      	mov	r6, r4
 8000af0:	1a1c      	subs	r4, r3, r0
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afa:	fb08 4410 	mls	r4, r8, r0, r4
 8000afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b02:	fb00 f707 	mul.w	r7, r0, r7
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x148>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x146>
 8000b14:	429f      	cmp	r7, r3
 8000b16:	f200 80b0 	bhi.w	8000c7a <__udivmoddi4+0x2a6>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	1bdb      	subs	r3, r3, r7
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	e7a5      	b.n	8000a70 <__udivmoddi4+0x9c>
 8000b24:	f1c1 0620 	rsb	r6, r1, #32
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b34:	fa04 f301 	lsl.w	r3, r4, r1
 8000b38:	ea43 030c 	orr.w	r3, r3, ip
 8000b3c:	40f4      	lsrs	r4, r6
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	0c38      	lsrs	r0, r7, #16
 8000b44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b48:	fbb4 fef0 	udiv	lr, r4, r0
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	fb00 441e 	mls	r4, r0, lr, r4
 8000b54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b58:	fb0e f90c 	mul.w	r9, lr, ip
 8000b5c:	45a1      	cmp	r9, r4
 8000b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x1a6>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b6a:	f080 8084 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	f240 8081 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000b74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	eba4 0409 	sub.w	r4, r4, r9
 8000b7e:	fa1f f983 	uxth.w	r9, r3
 8000b82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b86:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x1d2>
 8000b96:	193c      	adds	r4, r7, r4
 8000b98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b9c:	d267      	bcs.n	8000c6e <__udivmoddi4+0x29a>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0x29a>
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	443c      	add	r4, r7
 8000ba6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000baa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	46ce      	mov	lr, r9
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	d351      	bcc.n	8000c5e <__udivmoddi4+0x28a>
 8000bba:	d04e      	beq.n	8000c5a <__udivmoddi4+0x286>
 8000bbc:	b155      	cbz	r5, 8000bd4 <__udivmoddi4+0x200>
 8000bbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bca:	40cb      	lsrs	r3, r1
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	40cc      	lsrs	r4, r1
 8000bd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e750      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	fa24 f303 	lsr.w	r3, r4, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	430c      	orrs	r4, r1
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf4:	fa1f f78c 	uxth.w	r7, ip
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb00 f107 	mul.w	r1, r0, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x24c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c16:	d22c      	bcs.n	8000c72 <__udivmoddi4+0x29e>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d92a      	bls.n	8000c72 <__udivmoddi4+0x29e>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c28:	fb08 3311 	mls	r3, r8, r1, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb01 f307 	mul.w	r3, r1, r7
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x276>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c40:	d213      	bcs.n	8000c6a <__udivmoddi4+0x296>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d911      	bls.n	8000c6a <__udivmoddi4+0x296>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	1ae4      	subs	r4, r4, r3
 8000c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c50:	e739      	b.n	8000ac6 <__udivmoddi4+0xf2>
 8000c52:	4604      	mov	r4, r0
 8000c54:	e6f0      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c56:	4608      	mov	r0, r1
 8000c58:	e706      	b.n	8000a68 <__udivmoddi4+0x94>
 8000c5a:	45c8      	cmp	r8, r9
 8000c5c:	d2ae      	bcs.n	8000bbc <__udivmoddi4+0x1e8>
 8000c5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7a8      	b.n	8000bbc <__udivmoddi4+0x1e8>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	e7ed      	b.n	8000c4a <__udivmoddi4+0x276>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e799      	b.n	8000ba6 <__udivmoddi4+0x1d2>
 8000c72:	4630      	mov	r0, r6
 8000c74:	e7d4      	b.n	8000c20 <__udivmoddi4+0x24c>
 8000c76:	46d6      	mov	lr, sl
 8000c78:	e77f      	b.n	8000b7a <__udivmoddi4+0x1a6>
 8000c7a:	4463      	add	r3, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e74d      	b.n	8000b1c <__udivmoddi4+0x148>
 8000c80:	4606      	mov	r6, r0
 8000c82:	4623      	mov	r3, r4
 8000c84:	4608      	mov	r0, r1
 8000c86:	e70f      	b.n	8000aa8 <__udivmoddi4+0xd4>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	e730      	b.n	8000af0 <__udivmoddi4+0x11c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000ca8:	4a21      	ldr	r2, [pc, #132]	@ (8000d30 <MX_ADC1_Init+0x9c>)
 8000caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cd4:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <MX_ADC1_Init+0xa0>)
 8000cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000cf4:	f000 ff74 	bl	8001be0 <HAL_ADC_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cfe:	f000 fba3 	bl	8001448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <MX_ADC1_Init+0x98>)
 8000d14:	f001 f8d6 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d1e:	f000 fb93 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	40012000 	.word	0x40012000
 8000d34:	0f000001 	.word	0x0f000001

08000d38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <HAL_ADC_MspInit+0x8c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12f      	bne.n	8000dba <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <HAL_ADC_MspInit+0x90>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <HAL_ADC_MspInit+0x90>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HAL_ADC_MspInit+0x90>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <HAL_ADC_MspInit+0x90>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <HAL_ADC_MspInit+0x90>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <HAL_ADC_MspInit+0x90>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Barrier_IN_Pin;
 8000d92:	2301      	movs	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d96:	2303      	movs	r3, #3
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Barrier_IN_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4809      	ldr	r0, [pc, #36]	@ (8000dcc <HAL_ADC_MspInit+0x94>)
 8000da6:	f001 fbc7 	bl	8002538 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2100      	movs	r1, #0
 8000dae:	2012      	movs	r0, #18
 8000db0:	f001 fb8b 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000db4:	2012      	movs	r0, #18
 8000db6:	f001 fba4 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	@ 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40012000 	.word	0x40012000
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <HAL_HCSR04_GetDistance>:


static uint8_t distance;


uint8_t HAL_HCSR04_GetDistance(){
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
	return distance;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <HAL_HCSR04_GetDistance+0x14>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000070 	.word	0x20000070

08000de8 <HAL_HCSR04_Callback>:

void HAL_HCSR04_Callback(TIM_HandleTypeDef *htim){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	static bool Is_First_Captured = false;
	static uint32_t IC_Val1 = 0;
	static uint32_t IC_Val2 = 0;
	static uint32_t Difference = 0;
	if (!Is_First_Captured) // if the first value is not captured
 8000df0:	4b47      	ldr	r3, [pc, #284]	@ (8000f10 <HAL_HCSR04_Callback+0x128>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	f083 0301 	eor.w	r3, r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d01a      	beq.n	8000e34 <HAL_HCSR04_Callback+0x4c>
	{
		IC_Val1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_TIM_CHANNEL); // read the first value
 8000dfe:	2100      	movs	r1, #0
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f003 fbb1 	bl	8004568 <HAL_TIM_ReadCapturedValue>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a42      	ldr	r2, [pc, #264]	@ (8000f14 <HAL_HCSR04_Callback+0x12c>)
 8000e0a:	6013      	str	r3, [r2, #0]
		Is_First_Captured = 1;  // set the first captured as true
 8000e0c:	4b40      	ldr	r3, [pc, #256]	@ (8000f10 <HAL_HCSR04_Callback+0x128>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
		// Now change the polarity to falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6a1a      	ldr	r2, [r3, #32]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 020a 	bic.w	r2, r2, #10
 8000e20:	621a      	str	r2, [r3, #32]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6a1a      	ldr	r2, [r3, #32]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f042 0202 	orr.w	r2, r2, #2
 8000e30:	621a      	str	r2, [r3, #32]
		// set polarity to rising edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&HCSR04_TIM_INSTANCE, TIM_IT_CC1);

	}
}
 8000e32:	e063      	b.n	8000efc <HAL_HCSR04_Callback+0x114>
	else if (Is_First_Captured)   // if the first is already captured
 8000e34:	4b36      	ldr	r3, [pc, #216]	@ (8000f10 <HAL_HCSR04_Callback+0x128>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d05f      	beq.n	8000efc <HAL_HCSR04_Callback+0x114>
		IC_Val2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_TIM_CHANNEL);  // read second value
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f003 fb92 	bl	8004568 <HAL_TIM_ReadCapturedValue>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a34      	ldr	r2, [pc, #208]	@ (8000f18 <HAL_HCSR04_Callback+0x130>)
 8000e48:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	@ 0x24
		if (IC_Val2 > IC_Val1)
 8000e52:	4b31      	ldr	r3, [pc, #196]	@ (8000f18 <HAL_HCSR04_Callback+0x130>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <HAL_HCSR04_Callback+0x12c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d907      	bls.n	8000e6e <HAL_HCSR04_Callback+0x86>
			Difference = IC_Val2-IC_Val1;
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <HAL_HCSR04_Callback+0x130>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b2c      	ldr	r3, [pc, #176]	@ (8000f14 <HAL_HCSR04_Callback+0x12c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	4a2c      	ldr	r2, [pc, #176]	@ (8000f1c <HAL_HCSR04_Callback+0x134>)
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e00f      	b.n	8000e8e <HAL_HCSR04_Callback+0xa6>
		else if (IC_Val1 > IC_Val2)
 8000e6e:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <HAL_HCSR04_Callback+0x12c>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b29      	ldr	r3, [pc, #164]	@ (8000f18 <HAL_HCSR04_Callback+0x130>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d909      	bls.n	8000e8e <HAL_HCSR04_Callback+0xa6>
			Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e7a:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <HAL_HCSR04_Callback+0x130>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <HAL_HCSR04_Callback+0x12c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e88:	33ff      	adds	r3, #255	@ 0xff
 8000e8a:	4a24      	ldr	r2, [pc, #144]	@ (8000f1c <HAL_HCSR04_Callback+0x134>)
 8000e8c:	6013      	str	r3, [r2, #0]
		distance = Difference * .034/2;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <HAL_HCSR04_Callback+0x134>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fada 	bl	800044c <__aeabi_ui2d>
 8000e98:	a31b      	add	r3, pc, #108	@ (adr r3, 8000f08 <HAL_HCSR04_Callback+0x120>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fb4f 	bl	8000540 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eb2:	f7ff fc6f 	bl	8000794 <__aeabi_ddiv>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f7ff fd51 	bl	8000964 <__aeabi_d2uiz>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_HCSR04_Callback+0x138>)
 8000ec8:	701a      	strb	r2, [r3, #0]
		Is_First_Captured = false; // set it back to false
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_HCSR04_Callback+0x128>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_TIM_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a1a      	ldr	r2, [r3, #32]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 020a 	bic.w	r2, r2, #10
 8000ede:	621a      	str	r2, [r3, #32]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6a12      	ldr	r2, [r2, #32]
 8000eea:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&HCSR04_TIM_INSTANCE, TIM_IT_CC1);
 8000eec:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <HAL_HCSR04_Callback+0x13c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <HAL_HCSR04_Callback+0x13c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0202 	bic.w	r2, r2, #2
 8000efa:	60da      	str	r2, [r3, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	f3af 8000 	nop.w
 8000f08:	b020c49c 	.word	0xb020c49c
 8000f0c:	3fa16872 	.word	0x3fa16872
 8000f10:	20000071 	.word	0x20000071
 8000f14:	20000074 	.word	0x20000074
 8000f18:	20000078 	.word	0x20000078
 8000f1c:	2000007c 	.word	0x2000007c
 8000f20:	20000070 	.word	0x20000070
 8000f24:	200000e8 	.word	0x200000e8

08000f28 <HAL_HCSR04_Trigger>:

void HAL_HCSR04_Trigger ()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HCSR04_TRIG_PORT, HCSR04_TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f34:	4819      	ldr	r0, [pc, #100]	@ (8000f9c <HAL_HCSR04_Trigger+0x74>)
 8000f36:	f001 fc9b 	bl	8002870 <HAL_GPIO_WritePin>
	DELAY_US(10);  // wait for 10 us
 8000f3a:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_HCSR04_Trigger+0x78>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_HCSR04_Trigger+0x7c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a18      	ldr	r2, [pc, #96]	@ (8000fa8 <HAL_HCSR04_Trigger+0x80>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	0c9a      	lsrs	r2, r3, #18
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_HCSR04_Trigger+0x7c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a13      	ldr	r2, [pc, #76]	@ (8000fa8 <HAL_HCSR04_Trigger+0x80>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	0c9b      	lsrs	r3, r3, #18
 8000f62:	085b      	lsrs	r3, r3, #1
 8000f64:	1acb      	subs	r3, r1, r3
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_HCSR04_Trigger+0x78>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d8f8      	bhi.n	8000f68 <HAL_HCSR04_Trigger+0x40>
	HAL_GPIO_WritePin(HCSR04_TRIG_PORT, HCSR04_TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HAL_HCSR04_Trigger+0x74>)
 8000f7e:	f001 fc77 	bl	8002870 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&HCSR04_TIM_INSTANCE, TIM_IT_CC1);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_HCSR04_Trigger+0x84>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_HCSR04_Trigger+0x84>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0202 	orr.w	r2, r2, #2
 8000f90:	60da      	str	r2, [r3, #12]
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	e000e010 	.word	0xe000e010
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	431bde83 	.word	0x431bde83
 8000fac:	200000e8 	.word	0x200000e8

08000fb0 <BSP_HCSR04_GetPresence>:



PresenceSensor_Status BSP_HCSR04_GetPresence(uint8_t cut){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	if(distance >= cut){
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <BSP_HCSR04_GetPresence+0x3c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d801      	bhi.n	8000fc8 <BSP_HCSR04_GetPresence+0x18>
		return NoPresence;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e00b      	b.n	8000fe0 <BSP_HCSR04_GetPresence+0x30>
	}else if(distance < cut && distance != 0){
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <BSP_HCSR04_GetPresence+0x3c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d905      	bls.n	8000fde <BSP_HCSR04_GetPresence+0x2e>
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <BSP_HCSR04_GetPresence+0x3c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <BSP_HCSR04_GetPresence+0x2e>
		return Presence;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <BSP_HCSR04_GetPresence+0x30>
	}
	return Error;
 8000fde:	2302      	movs	r3, #2
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20000070 	.word	0x20000070

08000ff0 <HAL_TIM_IC_CaptureCallback>:

// Interrupts
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if (htim == &HCSR04_TIM_INSTANCE)  // if the interrupt source is channel1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d102      	bne.n	8001006 <HAL_TIM_IC_CaptureCallback+0x16>
	{
		HAL_HCSR04_Callback(htim);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fef1 	bl	8000de8 <HAL_HCSR04_Callback>
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000e8 	.word	0x200000e8

08001014 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_TIM_PeriodElapsedCallback+0x14>
		HAL_HCSR04_Trigger();
 8001024:	f7ff ff80 	bl	8000f28 <HAL_HCSR04_Trigger>
	}
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000178 	.word	0x20000178

08001034 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b60      	ldr	r3, [pc, #384]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a5f      	ldr	r2, [pc, #380]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b5d      	ldr	r3, [pc, #372]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b59      	ldr	r3, [pc, #356]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a58      	ldr	r2, [pc, #352]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b56      	ldr	r3, [pc, #344]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b52      	ldr	r3, [pc, #328]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a51      	ldr	r2, [pc, #324]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b4f      	ldr	r3, [pc, #316]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b4b      	ldr	r3, [pc, #300]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a4a      	ldr	r2, [pc, #296]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b48      	ldr	r3, [pc, #288]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a43      	ldr	r2, [pc, #268]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <MX_GPIO_Init+0x19c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_GPIO_Port, RELE_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	483e      	ldr	r0, [pc, #248]	@ (80011d4 <MX_GPIO_Init+0x1a0>)
 80010dc:	f001 fbc8 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP__CS_GPIO_Port, SP__CS_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2110      	movs	r1, #16
 80010e4:	483c      	ldr	r0, [pc, #240]	@ (80011d8 <MX_GPIO_Init+0x1a4>)
 80010e6:	f001 fbc3 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2110      	movs	r1, #16
 80010ee:	483b      	ldr	r0, [pc, #236]	@ (80011dc <MX_GPIO_Init+0x1a8>)
 80010f0:	f001 fbbe 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC_Trig_GPIO_Port, HC_Trig_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010fa:	4839      	ldr	r0, [pc, #228]	@ (80011e0 <MX_GPIO_Init+0x1ac>)
 80010fc:	f001 fbb8 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001106:	4837      	ldr	r0, [pc, #220]	@ (80011e4 <MX_GPIO_Init+0x1b0>)
 8001108:	f001 fbb2 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELE_Pin;
 800110c:	2302      	movs	r3, #2
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELE_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	482c      	ldr	r0, [pc, #176]	@ (80011d4 <MX_GPIO_Init+0x1a0>)
 8001124:	f001 fa08 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SP__CS_Pin;
 8001128:	2310      	movs	r3, #16
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SP__CS_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4826      	ldr	r0, [pc, #152]	@ (80011d8 <MX_GPIO_Init+0x1a4>)
 8001140:	f001 f9fa 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8001144:	2310      	movs	r3, #16
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4820      	ldr	r0, [pc, #128]	@ (80011dc <MX_GPIO_Init+0x1a8>)
 800115c:	f001 f9ec 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001160:	2320      	movs	r3, #32
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001164:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4819      	ldr	r0, [pc, #100]	@ (80011dc <MX_GPIO_Init+0x1a8>)
 8001176:	f001 f9df 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC_Trig_Pin;
 800117a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HC_Trig_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4813      	ldr	r0, [pc, #76]	@ (80011e0 <MX_GPIO_Init+0x1ac>)
 8001194:	f001 f9d0 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED_TX_Pin|LED_RX_Pin;
 8001198:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <MX_GPIO_Init+0x1b0>)
 80011b2:	f001 f9c1 	bl	8002538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2017      	movs	r0, #23
 80011bc:	f001 f985 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011c0:	2017      	movs	r0, #23
 80011c2:	f001 f99e 	bl	8002502 <HAL_NVIC_EnableIRQ>

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	@ 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40021c00 	.word	0x40021c00
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40020c00 	.word	0x40020c00

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f000 fc85 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f84d 	bl	8001290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f7ff ff1d 	bl	8001034 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011fa:	f000 f92b 	bl	8001454 <MX_SPI1_Init>
  MX_ADC1_Init();
 80011fe:	f7ff fd49 	bl	8000c94 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001202:	f000 fa3f 	bl	8001684 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001206:	f000 fa93 	bl	8001730 <MX_TIM2_Init>
  MX_TIM3_Init();
 800120a:	f000 fb1d 	bl	8001848 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800120e:	2100      	movs	r1, #0
 8001210:	481b      	ldr	r0, [pc, #108]	@ (8001280 <main+0x98>)
 8001212:	f002 fd6b 	bl	8003cec <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8001216:	2104      	movs	r1, #4
 8001218:	481a      	ldr	r0, [pc, #104]	@ (8001284 <main+0x9c>)
 800121a:	f002 fc01 	bl	8003a20 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800121e:	2108      	movs	r1, #8
 8001220:	4818      	ldr	r0, [pc, #96]	@ (8001284 <main+0x9c>)
 8001222:	f002 fbfd 	bl	8003a20 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8001226:	210c      	movs	r1, #12
 8001228:	4816      	ldr	r0, [pc, #88]	@ (8001284 <main+0x9c>)
 800122a:	f002 fbf9 	bl	8003a20 <HAL_TIM_PWM_Start_IT>


  BSP_RF_Params_TypeDef rf_params = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	809a      	strh	r2, [r3, #4]
  rf_params.channel = NRF24L01P_CHANNEL;
 8001236:	235a      	movs	r3, #90	@ 0x5a
 8001238:	807b      	strh	r3, [r7, #2]
  rf_params.rate = NRF24L01P_RATE;
 800123a:	2300      	movs	r3, #0
 800123c:	703b      	strb	r3, [r7, #0]
  rf_params.retransmit_count = NRF24L01P_RETRANSMIT_COUNT;
 800123e:	2303      	movs	r3, #3
 8001240:	713b      	strb	r3, [r7, #4]
  BSP_RF_Init(&rf_params);
 8001242:	463b      	mov	r3, r7
 8001244:	4618      	mov	r0, r3
 8001246:	f003 febd 	bl	8004fc4 <BSP_RF_Init>
  BSP_RF_Listening();
 800124a:	f003 fedd 	bl	8005008 <BSP_RF_Listening>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app();
 800124e:	f000 fc47 	bl	8001ae0 <app>
	  if(duty_cycle <= 0.5){
 8001252:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <main+0xa0>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800125c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	d805      	bhi.n	8001272 <main+0x8a>
		  HAL_GPIO_WritePin(RELE_GPIO_Port, RELE_Pin, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2102      	movs	r1, #2
 800126a:	4808      	ldr	r0, [pc, #32]	@ (800128c <main+0xa4>)
 800126c:	f001 fb00 	bl	8002870 <HAL_GPIO_WritePin>
 8001270:	e7ed      	b.n	800124e <main+0x66>
	  }else{
		  HAL_GPIO_WritePin(RELE_GPIO_Port, RELE_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2102      	movs	r1, #2
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <main+0xa4>)
 8001278:	f001 fafa 	bl	8002870 <HAL_GPIO_WritePin>
	  app();
 800127c:	e7e7      	b.n	800124e <main+0x66>
 800127e:	bf00      	nop
 8001280:	200000e8 	.word	0x200000e8
 8001284:	20000130 	.word	0x20000130
 8001288:	20000084 	.word	0x20000084
 800128c:	40021c00 	.word	0x40021c00

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	@ 0x50
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2230      	movs	r2, #48	@ 0x30
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fa14 	bl	80056cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <SystemClock_Config+0xc8>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	4a26      	ldr	r2, [pc, #152]	@ (8001358 <SystemClock_Config+0xc8>)
 80012be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c4:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <SystemClock_Config+0xc8>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	4b21      	ldr	r3, [pc, #132]	@ (800135c <SystemClock_Config+0xcc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a20      	ldr	r2, [pc, #128]	@ (800135c <SystemClock_Config+0xcc>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <SystemClock_Config+0xcc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ec:	2302      	movs	r3, #2
 80012ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f0:	2301      	movs	r3, #1
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f4:	2310      	movs	r3, #16
 80012f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
 80012fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001300:	2308      	movs	r3, #8
 8001302:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001304:	2348      	movs	r3, #72	@ 0x48
 8001306:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001308:	2302      	movs	r3, #2
 800130a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800130c:	2307      	movs	r3, #7
 800130e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	4618      	mov	r0, r3
 8001316:	f001 faf7 	bl	8002908 <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001320:	f000 f892 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001324:	230f      	movs	r3, #15
 8001326:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001328:	2302      	movs	r3, #2
 800132a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2102      	movs	r1, #2
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fd59 	bl	8002df8 <HAL_RCC_ClockConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800134c:	f000 f87c 	bl	8001448 <Error_Handler>
  }
}
 8001350:	bf00      	nop
 8001352:	3750      	adds	r7, #80	@ 0x50
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <received_message>:

/* USER CODE BEGIN 4 */


void received_message()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LED_RX_Pin);
 8001364:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001368:	480a      	ldr	r0, [pc, #40]	@ (8001394 <received_message+0x34>)
 800136a:	f001 fa9a 	bl	80028a2 <HAL_GPIO_TogglePin>
	toHandleInterrupts += BSP_RF_IrqHandler();
 800136e:	f003 fe7f 	bl	8005070 <BSP_RF_IrqHandler>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <received_message+0x38>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a06      	ldr	r2, [pc, #24]	@ (8001398 <received_message+0x38>)
 800137e:	6013      	str	r3, [r2, #0]
	BSP_RF_ReadData(rx_data);
 8001380:	4806      	ldr	r0, [pc, #24]	@ (800139c <received_message+0x3c>)
 8001382:	f003 fe8b 	bl	800509c <BSP_RF_ReadData>
	HAL_GPIO_TogglePin(GPIOD, LED_RX_Pin);
 8001386:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800138a:	4802      	ldr	r0, [pc, #8]	@ (8001394 <received_message+0x34>)
 800138c:	f001 fa89 	bl	80028a2 <HAL_GPIO_TogglePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020c00 	.word	0x40020c00
 8001398:	20000080 	.word	0x20000080
 800139c:	20000088 	.word	0x20000088

080013a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d101      	bne.n	80013b4 <HAL_GPIO_EXTI_Callback+0x14>
	{
		received_message();
 80013b0:	f7ff ffd6 	bl	8001360 <received_message>
	}

}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_TIM_PWM_PulseFinishedCallback>:

#define min(x,y) (((x) <= (y)) ? (x) : (y))
#define max(x,y) (((x) >= (y)) ? (x) : (y))
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	uint8_t distance = HAL_HCSR04_GetDistance();
 80013c4:	f7ff fd04 	bl	8000dd0 <HAL_HCSR04_GetDistance>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
	duty_cycle =  ((float) max(min(distance, 100), 20) / 100);
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b13      	cmp	r3, #19
 80013d0:	d90b      	bls.n	80013ea <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b64      	cmp	r3, #100	@ 0x64
 80013d6:	d805      	bhi.n	80013e4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	e004      	b.n	80013ee <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 80013e4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800143c <HAL_TIM_PWM_PulseFinishedCallback+0x80>
 80013e8:	e001      	b.n	80013ee <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 80013ea:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 80013ee:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800143c <HAL_TIM_PWM_PulseFinishedCallback+0x80>
 80013f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 80013f8:	ed83 7a00 	vstr	s14, [r3]
	uint32_t pulse_width = 100 * duty_cycle;
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800143c <HAL_TIM_PWM_PulseFinishedCallback+0x80>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800140e:	ee17 3a90 	vmov	r3, s15
 8001412:	60bb      	str	r3, [r7, #8]
	if(htim == &htim2){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d10b      	bne.n	8001434 <HAL_TIM_PWM_PulseFinishedCallback+0x78>
		TIM2->CCR2 = pulse_width;
 800141c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	6393      	str	r3, [r2, #56]	@ 0x38
		TIM2->CCR3 = pulse_width;
 8001424:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	63d3      	str	r3, [r2, #60]	@ 0x3c
		TIM2->CCR4 = pulse_width;
 800142c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	6413      	str	r3, [r2, #64]	@ 0x40
	}

}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	42c80000 	.word	0x42c80000
 8001440:	20000084 	.word	0x20000084
 8001444:	20000130 	.word	0x20000130

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <Error_Handler+0x8>

08001454 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <MX_SPI1_Init+0x64>)
 800145a:	4a18      	ldr	r2, [pc, #96]	@ (80014bc <MX_SPI1_Init+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_SPI1_Init+0x64>)
 8001460:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_SPI1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_SPI1_Init+0x64>)
 8001480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001484:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_SPI1_Init+0x64>)
 8001488:	2210      	movs	r2, #16
 800148a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <MX_SPI1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_SPI1_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <MX_SPI1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_SPI1_Init+0x64>)
 80014a0:	220a      	movs	r2, #10
 80014a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	@ (80014b8 <MX_SPI1_Init+0x64>)
 80014a6:	f001 fe93 	bl	80031d0 <HAL_SPI_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014b0:	f7ff ffca 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000090 	.word	0x20000090
 80014bc:	40013000 	.word	0x40013000

080014c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SPI_MspInit+0x84>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12b      	bne.n	800153a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a10      	ldr	r2, [pc, #64]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800151a:	23e0      	movs	r3, #224	@ 0xe0
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800152a:	2305      	movs	r3, #5
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	@ (800154c <HAL_SPI_MspInit+0x8c>)
 8001536:	f000 ffff 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	@ 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40013000 	.word	0x40013000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	4a0f      	ldr	r2, [pc, #60]	@ (800159c <HAL_MspInit+0x4c>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001564:	6453      	str	r3, [r2, #68]	@ 0x44
 8001566:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <HAL_MspInit+0x4c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	4a08      	ldr	r2, [pc, #32]	@ (800159c <HAL_MspInit+0x4c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	@ 0x40
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_MspInit+0x4c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800158e:	2007      	movs	r0, #7
 8001590:	f000 ff90 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <NMI_Handler+0x4>

080015a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <MemManage_Handler+0x4>

080015b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 fad3 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */



  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <ADC_IRQHandler+0x10>)
 8001606:	f000 fb2e 	bl	8001c66 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000028 	.word	0x20000028

08001614 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001618:	2020      	movs	r0, #32
 800161a:	f001 f95d 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <TIM1_CC_IRQHandler+0x10>)
 800162a:	f002 fc87 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000e8 	.word	0x200000e8

08001638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <TIM2_IRQHandler+0x10>)
 800163e:	f002 fc7d 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000130 	.word	0x20000130

0800164c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <TIM3_IRQHandler+0x10>)
 8001652:	f002 fc73 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000178 	.word	0x20000178

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a0:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <MX_TIM1_Init+0xa4>)
 80016a2:	4a22      	ldr	r2, [pc, #136]	@ (800172c <MX_TIM1_Init+0xa8>)
 80016a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <MX_TIM1_Init+0xa4>)
 80016a8:	2247      	movs	r2, #71	@ 0x47
 80016aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <MX_TIM1_Init+0xa4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <MX_TIM1_Init+0xa4>)
 80016b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <MX_TIM1_Init+0xa4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <MX_TIM1_Init+0xa4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <MX_TIM1_Init+0xa4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80016cc:	4816      	ldr	r0, [pc, #88]	@ (8001728 <MX_TIM1_Init+0xa4>)
 80016ce:	f002 fabd 	bl	8003c4c <HAL_TIM_IC_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016d8:	f7ff feb6 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	4619      	mov	r1, r3
 80016ea:	480f      	ldr	r0, [pc, #60]	@ (8001728 <MX_TIM1_Init+0xa4>)
 80016ec:	f003 fbda 	bl	8004ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016f6:	f7ff fea7 	bl	8001448 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016fe:	2301      	movs	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_TIM1_Init+0xa4>)
 8001712:	f002 fd03 	bl	800411c <HAL_TIM_IC_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800171c:	f7ff fe94 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200000e8 	.word	0x200000e8
 800172c:	40010000 	.word	0x40010000

08001730 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	@ 0x38
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001760:	4b38      	ldr	r3, [pc, #224]	@ (8001844 <MX_TIM2_Init+0x114>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7100;
 8001768:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <MX_TIM2_Init+0x114>)
 800176a:	f641 32bc 	movw	r2, #7100	@ 0x1bbc
 800176e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <MX_TIM2_Init+0x114>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 - 1;
 8001776:	4b33      	ldr	r3, [pc, #204]	@ (8001844 <MX_TIM2_Init+0x114>)
 8001778:	2263      	movs	r2, #99	@ 0x63
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b31      	ldr	r3, [pc, #196]	@ (8001844 <MX_TIM2_Init+0x114>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b30      	ldr	r3, [pc, #192]	@ (8001844 <MX_TIM2_Init+0x114>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001788:	482e      	ldr	r0, [pc, #184]	@ (8001844 <MX_TIM2_Init+0x114>)
 800178a:	f002 f82f 	bl	80037ec <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001794:	f7ff fe58 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4827      	ldr	r0, [pc, #156]	@ (8001844 <MX_TIM2_Init+0x114>)
 80017a6:	f002 fe17 	bl	80043d8 <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017b0:	f7ff fe4a 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017b4:	4823      	ldr	r0, [pc, #140]	@ (8001844 <MX_TIM2_Init+0x114>)
 80017b6:	f002 f8d9 	bl	800396c <HAL_TIM_PWM_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017c0:	f7ff fe42 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	4619      	mov	r1, r3
 80017d2:	481c      	ldr	r0, [pc, #112]	@ (8001844 <MX_TIM2_Init+0x114>)
 80017d4:	f003 fb66 	bl	8004ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017de:	f7ff fe33 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e2:	2360      	movs	r3, #96	@ 0x60
 80017e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2204      	movs	r2, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4812      	ldr	r0, [pc, #72]	@ (8001844 <MX_TIM2_Init+0x114>)
 80017fa:	f002 fd2b 	bl	8004254 <HAL_TIM_PWM_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001804:	f7ff fe20 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2208      	movs	r2, #8
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <MX_TIM2_Init+0x114>)
 8001810:	f002 fd20 	bl	8004254 <HAL_TIM_PWM_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800181a:	f7ff fe15 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	220c      	movs	r2, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4807      	ldr	r0, [pc, #28]	@ (8001844 <MX_TIM2_Init+0x114>)
 8001826:	f002 fd15 	bl	8004254 <HAL_TIM_PWM_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001830:	f7ff fe0a 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001834:	4803      	ldr	r0, [pc, #12]	@ (8001844 <MX_TIM2_Init+0x114>)
 8001836:	f000 f8f1 	bl	8001a1c <HAL_TIM_MspPostInit>

}
 800183a:	bf00      	nop
 800183c:	3738      	adds	r7, #56	@ 0x38
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000130 	.word	0x20000130

08001848 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <MX_TIM3_Init+0xa4>)
 8001866:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <MX_TIM3_Init+0xa8>)
 8001868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <MX_TIM3_Init+0xa4>)
 800186c:	2248      	movs	r2, #72	@ 0x48
 800186e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <MX_TIM3_Init+0xa4>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001876:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <MX_TIM3_Init+0xa4>)
 8001878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800187c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <MX_TIM3_Init+0xa4>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <MX_TIM3_Init+0xa4>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800188a:	4818      	ldr	r0, [pc, #96]	@ (80018ec <MX_TIM3_Init+0xa4>)
 800188c:	f001 ffae 	bl	80037ec <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001896:	f7ff fdd7 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	4619      	mov	r1, r3
 80018a6:	4811      	ldr	r0, [pc, #68]	@ (80018ec <MX_TIM3_Init+0xa4>)
 80018a8:	f002 fd96 	bl	80043d8 <HAL_TIM_ConfigClockSource>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018b2:	f7ff fdc9 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	4619      	mov	r1, r3
 80018c2:	480a      	ldr	r0, [pc, #40]	@ (80018ec <MX_TIM3_Init+0xa4>)
 80018c4:	f003 faee 	bl	8004ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018ce:	f7ff fdbb 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80018d2:	4806      	ldr	r0, [pc, #24]	@ (80018ec <MX_TIM3_Init+0xa4>)
 80018d4:	f001 ffda 	bl	800388c <HAL_TIM_Base_Start_IT>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM3_Init+0x9a>
    {
      /* Starting Error */
      Error_Handler();
 80018de:	f7ff fdb3 	bl	8001448 <Error_Handler>
    }
  /* USER CODE END TIM3_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000178 	.word	0x20000178
 80018f0:	40000400 	.word	0x40000400

080018f4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <HAL_TIM_IC_MspInit+0x94>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d134      	bne.n	8001980 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <HAL_TIM_IC_MspInit+0x98>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	4a1b      	ldr	r2, [pc, #108]	@ (800198c <HAL_TIM_IC_MspInit+0x98>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6453      	str	r3, [r2, #68]	@ 0x44
 8001926:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_TIM_IC_MspInit+0x98>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <HAL_TIM_IC_MspInit+0x98>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a14      	ldr	r2, [pc, #80]	@ (800198c <HAL_TIM_IC_MspInit+0x98>)
 800193c:	f043 0310 	orr.w	r3, r3, #16
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_TIM_IC_MspInit+0x98>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800194e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001960:	2301      	movs	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4809      	ldr	r0, [pc, #36]	@ (8001990 <HAL_TIM_IC_MspInit+0x9c>)
 800196c:	f000 fde4 	bl	8002538 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	201b      	movs	r0, #27
 8001976:	f000 fda8 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800197a:	201b      	movs	r0, #27
 800197c:	f000 fdc1 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	@ 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40010000 	.word	0x40010000
 800198c:	40023800 	.word	0x40023800
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019a4:	d116      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <HAL_TIM_Base_MspInit+0x80>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	4a19      	ldr	r2, [pc, #100]	@ (8001a14 <HAL_TIM_Base_MspInit+0x80>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b6:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <HAL_TIM_Base_MspInit+0x80>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	201c      	movs	r0, #28
 80019c8:	f000 fd7f 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019cc:	201c      	movs	r0, #28
 80019ce:	f000 fd98 	bl	8002502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019d2:	e01a      	b.n	8001a0a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a18 <HAL_TIM_Base_MspInit+0x84>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d115      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <HAL_TIM_Base_MspInit+0x80>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <HAL_TIM_Base_MspInit+0x80>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_TIM_Base_MspInit+0x80>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	201d      	movs	r0, #29
 8001a00:	f000 fd63 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a04:	201d      	movs	r0, #29
 8001a06:	f000 fd7c 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40000400 	.word	0x40000400

08001a1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a3c:	d11d      	bne.n	8001a7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_TIM_MspPostInit+0x68>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a0f      	ldr	r2, [pc, #60]	@ (8001a84 <HAL_TIM_MspPostInit+0x68>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <HAL_TIM_MspPostInit+0x68>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|RGB_B_Pin;
 8001a5a:	230e      	movs	r3, #14
 8001a5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	4804      	ldr	r0, [pc, #16]	@ (8001a88 <HAL_TIM_MspPostInit+0x6c>)
 8001a76:	f000 fd5f 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a90:	f7ff fde6 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	@ (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f003 fe0f 	bl	80056dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7ff fb93 	bl	80011e8 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ad0:	08005768 	.word	0x08005768
  ldr r2, =_sbss
 8001ad4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ad8:	200001d8 	.word	0x200001d8

08001adc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <CAN1_RX0_IRQHandler>
	...

08001ae0 <app>:
typedef struct {
	PresenceSensor_Status presence;
} APP_DATA_Struct;

static APP_DATA_Struct app_data;
void app(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	app_data.presence = BSP_HCSR04_GetPresence(PRESENCE_CUTOFF);
 8001ae4:	2064      	movs	r0, #100	@ 0x64
 8001ae6:	f7ff fa63 	bl	8000fb0 <BSP_HCSR04_GetPresence>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b02      	ldr	r3, [pc, #8]	@ (8001af8 <app+0x18>)
 8001af0:	701a      	strb	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200001c0 	.word	0x200001c0

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b00:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	@ (8001b3c <HAL_Init+0x40>)
 8001b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <HAL_Init+0x40>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	@ (8001b3c <HAL_Init+0x40>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f000 fcc5 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 f808 	bl	8001b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b30:	f7ff fd0e 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023c00 	.word	0x40023c00

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <HAL_InitTick+0x54>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <HAL_InitTick+0x58>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fcdd 	bl	800251e <HAL_SYSTICK_Config>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00e      	b.n	8001b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d80a      	bhi.n	8001b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f000 fca5 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b80:	4a06      	ldr	r2, [pc, #24]	@ (8001b9c <HAL_InitTick+0x5c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	20000004 	.word	0x20000004

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	200001c4 	.word	0x200001c4

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	200001c4 	.word	0x200001c4

08001be0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e033      	b.n	8001c5e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff f89a 	bl	8000d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d118      	bne.n	8001c50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c26:	f023 0302 	bic.w	r3, r3, #2
 8001c2a:	f043 0202 	orr.w	r2, r3, #2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fa68 	bl	8002108 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	f023 0303 	bic.w	r3, r3, #3
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c4e:	e001      	b.n	8001c54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d049      	beq.n	8001d30 <HAL_ADC_IRQHandler+0xca>
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d046      	beq.n	8001d30 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d12b      	bne.n	8001d20 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d127      	bne.n	8001d20 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d119      	bne.n	8001d20 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0220 	bic.w	r2, r2, #32
 8001cfa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8b0 	bl	8001e86 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f06f 0212 	mvn.w	r2, #18
 8001d2e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d057      	beq.n	8001df6 <HAL_ADC_IRQHandler+0x190>
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d054      	beq.n	8001df6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d139      	bne.n	8001de6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d78:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d12b      	bne.n	8001de6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d124      	bne.n	8001de6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d11d      	bne.n	8001de6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d119      	bne.n	8001de6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dc0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fa8a 	bl	8002300 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 020c 	mvn.w	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e04:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d017      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x1d6>
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d014      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10d      	bne.n	8001e3c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f834 	bl	8001e9a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0201 	mvn.w	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e4a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d015      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x218>
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d012      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5c:	f043 0202 	orr.w	r2, r3, #2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0220 	mvn.w	r2, #32
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f81d 	bl	8001eae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0220 	mvn.w	r2, #32
 8001e7c:	601a      	str	r2, [r3, #0]
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1c>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e105      	b.n	80020ec <HAL_ADC_ConfigChannel+0x228>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b09      	cmp	r3, #9
 8001eee:	d925      	bls.n	8001f3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68d9      	ldr	r1, [r3, #12]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	3b1e      	subs	r3, #30
 8001f06:	2207      	movs	r2, #7
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43da      	mvns	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	400a      	ands	r2, r1
 8001f14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68d9      	ldr	r1, [r3, #12]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	4603      	mov	r3, r0
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4403      	add	r3, r0
 8001f2e:	3b1e      	subs	r3, #30
 8001f30:	409a      	lsls	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	e022      	b.n	8001f82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6919      	ldr	r1, [r3, #16]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	2207      	movs	r2, #7
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6919      	ldr	r1, [r3, #16]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4403      	add	r3, r0
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d824      	bhi.n	8001fd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b05      	subs	r3, #5
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b05      	subs	r3, #5
 8001fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fd2:	e04c      	b.n	800206e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b0c      	cmp	r3, #12
 8001fda:	d824      	bhi.n	8002026 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b23      	subs	r3, #35	@ 0x23
 8001fee:	221f      	movs	r2, #31
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	4618      	mov	r0, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b23      	subs	r3, #35	@ 0x23
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	631a      	str	r2, [r3, #48]	@ 0x30
 8002024:	e023      	b.n	800206e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	3b41      	subs	r3, #65	@ 0x41
 8002038:	221f      	movs	r2, #31
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	400a      	ands	r2, r1
 8002046:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	3b41      	subs	r3, #65	@ 0x41
 8002062:	fa00 f203 	lsl.w	r2, r0, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206e:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <HAL_ADC_ConfigChannel+0x234>)
 8002070:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a21      	ldr	r2, [pc, #132]	@ (80020fc <HAL_ADC_ConfigChannel+0x238>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d109      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1cc>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b12      	cmp	r3, #18
 8002082:	d105      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_ADC_ConfigChannel+0x238>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d123      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x21e>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d003      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x1e6>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b11      	cmp	r3, #17
 80020a8:	d11b      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d111      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <HAL_ADC_ConfigChannel+0x23c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a10      	ldr	r2, [pc, #64]	@ (8002104 <HAL_ADC_ConfigChannel+0x240>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	0c9a      	lsrs	r2, r3, #18
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40012300 	.word	0x40012300
 80020fc:	40012000 	.word	0x40012000
 8002100:	20000000 	.word	0x20000000
 8002104:	431bde83 	.word	0x431bde83

08002108 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002110:	4b79      	ldr	r3, [pc, #484]	@ (80022f8 <ADC_Init+0x1f0>)
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	431a      	orrs	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800213c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	021a      	lsls	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6899      	ldr	r1, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	4a58      	ldr	r2, [pc, #352]	@ (80022fc <ADC_Init+0x1f4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6899      	ldr	r1, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6899      	ldr	r1, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e00f      	b.n	8002206 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002204:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0202 	bic.w	r2, r2, #2
 8002214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
 8002220:	005a      	lsls	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002242:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002252:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	3b01      	subs	r3, #1
 8002260:	035a      	lsls	r2, r3, #13
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	e007      	b.n	800227c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800227a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800228a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	3b01      	subs	r3, #1
 8002298:	051a      	lsls	r2, r3, #20
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6899      	ldr	r1, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022be:	025a      	lsls	r2, r3, #9
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6899      	ldr	r1, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	029a      	lsls	r2, r3, #10
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40012300 	.word	0x40012300
 80022fc:	0f000001 	.word	0x0f000001

08002300 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	@ (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	@ (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	@ (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff3e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff31 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e16b      	b.n	800282c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 815a 	bne.w	8002826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d005      	beq.n	800258a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	2b02      	cmp	r3, #2
 8002588:	d130      	bne.n	80025ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d017      	beq.n	8002628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80b4 	beq.w	8002826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b60      	ldr	r3, [pc, #384]	@ (8002844 <HAL_GPIO_Init+0x30c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002844 <HAL_GPIO_Init+0x30c>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002844 <HAL_GPIO_Init+0x30c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026da:	4a5b      	ldr	r2, [pc, #364]	@ (8002848 <HAL_GPIO_Init+0x310>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	@ (800284c <HAL_GPIO_Init+0x314>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <HAL_GPIO_Init+0x226>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a51      	ldr	r2, [pc, #324]	@ (8002850 <HAL_GPIO_Init+0x318>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d025      	beq.n	800275a <HAL_GPIO_Init+0x222>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a50      	ldr	r2, [pc, #320]	@ (8002854 <HAL_GPIO_Init+0x31c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01f      	beq.n	8002756 <HAL_GPIO_Init+0x21e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4f      	ldr	r2, [pc, #316]	@ (8002858 <HAL_GPIO_Init+0x320>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d019      	beq.n	8002752 <HAL_GPIO_Init+0x21a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4e      	ldr	r2, [pc, #312]	@ (800285c <HAL_GPIO_Init+0x324>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0x216>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4d      	ldr	r2, [pc, #308]	@ (8002860 <HAL_GPIO_Init+0x328>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00d      	beq.n	800274a <HAL_GPIO_Init+0x212>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4c      	ldr	r2, [pc, #304]	@ (8002864 <HAL_GPIO_Init+0x32c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x20e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4b      	ldr	r2, [pc, #300]	@ (8002868 <HAL_GPIO_Init+0x330>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_GPIO_Init+0x20a>
 800273e:	2307      	movs	r3, #7
 8002740:	e00e      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002742:	2308      	movs	r3, #8
 8002744:	e00c      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002746:	2306      	movs	r3, #6
 8002748:	e00a      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800274a:	2305      	movs	r3, #5
 800274c:	e008      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800274e:	2304      	movs	r3, #4
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002752:	2303      	movs	r3, #3
 8002754:	e004      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002756:	2302      	movs	r3, #2
 8002758:	e002      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800275e:	2300      	movs	r3, #0
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f002 0203 	and.w	r2, r2, #3
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	4093      	lsls	r3, r2
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002770:	4935      	ldr	r1, [pc, #212]	@ (8002848 <HAL_GPIO_Init+0x310>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277e:	4b3b      	ldr	r3, [pc, #236]	@ (800286c <HAL_GPIO_Init+0x334>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a2:	4a32      	ldr	r2, [pc, #200]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a8:	4b30      	ldr	r3, [pc, #192]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027cc:	4a27      	ldr	r2, [pc, #156]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d2:	4b26      	ldr	r3, [pc, #152]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002820:	4a12      	ldr	r2, [pc, #72]	@ (800286c <HAL_GPIO_Init+0x334>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b0f      	cmp	r3, #15
 8002830:	f67f ae90 	bls.w	8002554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40013800 	.word	0x40013800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021000 	.word	0x40021000
 8002860:	40021400 	.word	0x40021400
 8002864:	40021800 	.word	0x40021800
 8002868:	40021c00 	.word	0x40021c00
 800286c:	40013c00 	.word	0x40013c00

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800288c:	e003      	b.n	8002896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b085      	sub	sp, #20
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b4:	887a      	ldrh	r2, [r7, #2]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4013      	ands	r3, r2
 80028ba:	041a      	lsls	r2, r3, #16
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	43d9      	mvns	r1, r3
 80028c0:	887b      	ldrh	r3, [r7, #2]
 80028c2:	400b      	ands	r3, r1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	619a      	str	r2, [r3, #24]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fd52 	bl	80013a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e267      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002926:	4b88      	ldr	r3, [pc, #544]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b85      	ldr	r3, [pc, #532]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b82      	ldr	r3, [pc, #520]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e242      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b70      	ldr	r3, [pc, #448]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6d      	ldr	r3, [pc, #436]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6c      	ldr	r2, [pc, #432]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b69      	ldr	r3, [pc, #420]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a68      	ldr	r2, [pc, #416]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b66      	ldr	r3, [pc, #408]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a65      	ldr	r2, [pc, #404]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff f902 	bl	8001bc8 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff f8fe 	bl	8001bc8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e207      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5b      	ldr	r3, [pc, #364]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff f8ee 	bl	8001bc8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff f8ea 	bl	8001bc8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1f3      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b51      	ldr	r3, [pc, #324]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b44      	ldr	r3, [pc, #272]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c7      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4937      	ldr	r1, [pc, #220]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7ff f8a3 	bl	8001bc8 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a86:	f7ff f89f 	bl	8001bc8 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a8      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2b      	ldr	r3, [pc, #172]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4925      	ldr	r1, [pc, #148]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff f882 	bl	8001bc8 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7ff f87e 	bl	8001bc8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e187      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7ff f862 	bl	8001bc8 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b08:	f7ff f85e 	bl	8001bc8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e167      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e01b      	b.n	8002b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7ff f84b 	bl	8001bc8 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e00e      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b36:	f7ff f847 	bl	8001bc8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d907      	bls.n	8002b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e150      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b88      	ldr	r3, [pc, #544]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ea      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8097 	beq.w	8002c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b81      	ldr	r3, [pc, #516]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b7d      	ldr	r3, [pc, #500]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	4a7c      	ldr	r2, [pc, #496]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b77      	ldr	r3, [pc, #476]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b74      	ldr	r3, [pc, #464]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f807 	bl	8001bc8 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7ff f803 	bl	8001bc8 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e10c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2ea>
 8002be4:	4b64      	ldr	r3, [pc, #400]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	4a63      	ldr	r2, [pc, #396]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x30c>
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c06:	4b5c      	ldr	r3, [pc, #368]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002c14:	4b58      	ldr	r3, [pc, #352]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c18:	4a57      	ldr	r2, [pc, #348]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c20:	4b55      	ldr	r3, [pc, #340]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c24:	4a54      	ldr	r2, [pc, #336]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe ffc8 	bl	8001bc8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe ffc4 	bl	8001bc8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0cb      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b49      	ldr	r3, [pc, #292]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe ffb2 	bl	8001bc8 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe ffae 	bl	8001bc8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0b5      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	4a38      	ldr	r2, [pc, #224]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a1 	beq.w	8002de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca6:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d05c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d141      	bne.n	8002d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe ff82 	bl	8001bc8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe ff7e 	bl	8001bc8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e087      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	491b      	ldr	r1, [pc, #108]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe ff57 	bl	8001bc8 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe ff53 	bl	8001bc8 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e05c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x416>
 8002d3c:	e054      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe ff40 	bl	8001bc8 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe ff3c 	bl	8001bc8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e045      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e038      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cc      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b68      	ldr	r3, [pc, #416]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d90c      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b65      	ldr	r3, [pc, #404]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a58      	ldr	r2, [pc, #352]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a52      	ldr	r2, [pc, #328]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d044      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d119      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e067      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b37      	ldr	r3, [pc, #220]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4934      	ldr	r1, [pc, #208]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fe fe6e 	bl	8001bc8 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7fe fe6a 	bl	8001bc8 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20c      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b22      	ldr	r3, [pc, #136]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	@ (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fdce 	bl	8001b40 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	0800573c 	.word	0x0800573c
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000004 	.word	0x20000004

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc8:	b094      	sub	sp, #80	@ 0x50
 8002fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4b79      	ldr	r3, [pc, #484]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	f200 80e1 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff6:	e0db      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b73      	ldr	r3, [pc, #460]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ffc:	e0db      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffe:	4b73      	ldr	r3, [pc, #460]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003002:	e0d8      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4b6f      	ldr	r3, [pc, #444]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800300c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300e:	4b6d      	ldr	r3, [pc, #436]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b6a      	ldr	r3, [pc, #424]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003024:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302c:	633b      	str	r3, [r7, #48]	@ 0x30
 800302e:	2300      	movs	r3, #0
 8003030:	637b      	str	r3, [r7, #52]	@ 0x34
 8003032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003036:	4622      	mov	r2, r4
 8003038:	462b      	mov	r3, r5
 800303a:	f04f 0000 	mov.w	r0, #0
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	0159      	lsls	r1, r3, #5
 8003044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003048:	0150      	lsls	r0, r2, #5
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4621      	mov	r1, r4
 8003050:	1a51      	subs	r1, r2, r1
 8003052:	6139      	str	r1, [r7, #16]
 8003054:	4629      	mov	r1, r5
 8003056:	eb63 0301 	sbc.w	r3, r3, r1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003068:	4659      	mov	r1, fp
 800306a:	018b      	lsls	r3, r1, #6
 800306c:	4651      	mov	r1, sl
 800306e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003072:	4651      	mov	r1, sl
 8003074:	018a      	lsls	r2, r1, #6
 8003076:	4651      	mov	r1, sl
 8003078:	ebb2 0801 	subs.w	r8, r2, r1
 800307c:	4659      	mov	r1, fp
 800307e:	eb63 0901 	sbc.w	r9, r3, r1
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003096:	4690      	mov	r8, r2
 8003098:	4699      	mov	r9, r3
 800309a:	4623      	mov	r3, r4
 800309c:	eb18 0303 	adds.w	r3, r8, r3
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	462b      	mov	r3, r5
 80030a4:	eb49 0303 	adc.w	r3, r9, r3
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030b6:	4629      	mov	r1, r5
 80030b8:	024b      	lsls	r3, r1, #9
 80030ba:	4621      	mov	r1, r4
 80030bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030c0:	4621      	mov	r1, r4
 80030c2:	024a      	lsls	r2, r1, #9
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030d4:	f7fd fc66 	bl	80009a4 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030e0:	e058      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b38      	ldr	r3, [pc, #224]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	4611      	mov	r1, r2
 80030ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	f04f 0000 	mov.w	r0, #0
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	0159      	lsls	r1, r3, #5
 800310a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310e:	0150      	lsls	r0, r2, #5
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4641      	mov	r1, r8
 8003116:	ebb2 0a01 	subs.w	sl, r2, r1
 800311a:	4649      	mov	r1, r9
 800311c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800312c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003134:	ebb2 040a 	subs.w	r4, r2, sl
 8003138:	eb63 050b 	sbc.w	r5, r3, fp
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	00eb      	lsls	r3, r5, #3
 8003146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314a:	00e2      	lsls	r2, r4, #3
 800314c:	4614      	mov	r4, r2
 800314e:	461d      	mov	r5, r3
 8003150:	4643      	mov	r3, r8
 8003152:	18e3      	adds	r3, r4, r3
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	464b      	mov	r3, r9
 8003158:	eb45 0303 	adc.w	r3, r5, r3
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800316a:	4629      	mov	r1, r5
 800316c:	028b      	lsls	r3, r1, #10
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003174:	4621      	mov	r1, r4
 8003176:	028a      	lsls	r2, r1, #10
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	61fa      	str	r2, [r7, #28]
 8003184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003188:	f7fd fc0c 	bl	80009a4 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	3301      	adds	r3, #1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80031a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3750      	adds	r7, #80	@ 0x50
 80031bc:	46bd      	mov	sp, r7
 80031be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07b      	b.n	80032da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031f2:	d009      	beq.n	8003208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
 80031fa:	e005      	b.n	8003208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe f94c 	bl	80014c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800323e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328c:	ea42 0103 	orr.w	r1, r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f003 0104 	and.w	r1, r3, #4
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	f003 0210 	and.w	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b08a      	sub	sp, #40	@ 0x28
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032f0:	2301      	movs	r3, #1
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f4:	f7fe fc68 	bl	8001bc8 <HAL_GetTick>
 80032f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003300:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800330c:	7ffb      	ldrb	r3, [r7, #31]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d00c      	beq.n	800332c <HAL_SPI_TransmitReceive+0x4a>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003318:	d106      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x46>
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d001      	beq.n	800332c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003328:	2302      	movs	r3, #2
 800332a:	e17f      	b.n	800362c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_SPI_TransmitReceive+0x5c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_SPI_TransmitReceive+0x5c>
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e174      	b.n	800362c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x6e>
 800334c:	2302      	movs	r3, #2
 800334e:	e16d      	b.n	800362c <HAL_SPI_TransmitReceive+0x34a>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b04      	cmp	r3, #4
 8003362:	d003      	beq.n	800336c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2205      	movs	r2, #5
 8003368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	887a      	ldrh	r2, [r7, #2]
 800338e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ac:	2b40      	cmp	r3, #64	@ 0x40
 80033ae:	d007      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c8:	d17e      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_TransmitReceive+0xf6>
 80033d2:	8afb      	ldrh	r3, [r7, #22]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d16c      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033fc:	e059      	b.n	80034b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b02      	cmp	r3, #2
 800340a:	d11b      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x162>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x162>
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	2b01      	cmp	r3, #1
 800341a:	d113      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d119      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x1a4>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d014      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	b292      	uxth	r2, r2
 8003468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003482:	2301      	movs	r3, #1
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003486:	f7fe fb9f 	bl	8001bc8 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003492:	429a      	cmp	r2, r3
 8003494:	d80d      	bhi.n	80034b2 <HAL_SPI_TransmitReceive+0x1d0>
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d009      	beq.n	80034b2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0bc      	b.n	800362c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1a0      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x11c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d19b      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x11c>
 80034c6:	e082      	b.n	80035ce <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_TransmitReceive+0x1f4>
 80034d0:	8afb      	ldrh	r3, [r7, #22]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d171      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	7812      	ldrb	r2, [r2, #0]
 80034e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fc:	e05d      	b.n	80035ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d11c      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x264>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d017      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x264>
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	2b01      	cmp	r3, #1
 800351a:	d114      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d119      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x2a6>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d014      	beq.n	8003588 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003584:	2301      	movs	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003588:	f7fe fb1e 	bl	8001bc8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003594:	429a      	cmp	r2, r3
 8003596:	d803      	bhi.n	80035a0 <HAL_SPI_TransmitReceive+0x2be>
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d102      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0x2c4>
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e038      	b.n	800362c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d19c      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x21c>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d197      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ce:	6a3a      	ldr	r2, [r7, #32]
 80035d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f8b6 	bl	8003744 <SPI_EndRxTxTransaction>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e01d      	b.n	800362c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800362a:	2300      	movs	r3, #0
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	3728      	adds	r7, #40	@ 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003644:	f7fe fac0 	bl	8001bc8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	4413      	add	r3, r2
 8003652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003654:	f7fe fab8 	bl	8001bc8 <HAL_GetTick>
 8003658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800365a:	4b39      	ldr	r3, [pc, #228]	@ (8003740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	015b      	lsls	r3, r3, #5
 8003660:	0d1b      	lsrs	r3, r3, #20
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	fb02 f303 	mul.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800366a:	e054      	b.n	8003716 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d050      	beq.n	8003716 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003674:	f7fe faa8 	bl	8001bc8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	429a      	cmp	r2, r3
 8003682:	d902      	bls.n	800368a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d13d      	bne.n	8003706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036a2:	d111      	bne.n	80036c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ac:	d004      	beq.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b6:	d107      	bne.n	80036c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d0:	d10f      	bne.n	80036f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e017      	b.n	8003736 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3b01      	subs	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4013      	ands	r3, r2
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	bf0c      	ite	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	2300      	movne	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	429a      	cmp	r2, r3
 8003732:	d19b      	bne.n	800366c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000000 	.word	0x20000000

08003744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2201      	movs	r2, #1
 8003758:	2102      	movs	r1, #2
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff ff6a 	bl	8003634 <SPI_WaitFlagStateUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e032      	b.n	80037dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003776:	4b1b      	ldr	r3, [pc, #108]	@ (80037e4 <SPI_EndRxTxTransaction+0xa0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1b      	ldr	r2, [pc, #108]	@ (80037e8 <SPI_EndRxTxTransaction+0xa4>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	0d5b      	lsrs	r3, r3, #21
 8003782:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003794:	d112      	bne.n	80037bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2200      	movs	r2, #0
 800379e:	2180      	movs	r1, #128	@ 0x80
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7ff ff47 	bl	8003634 <SPI_WaitFlagStateUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d016      	beq.n	80037da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e00f      	b.n	80037dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d2:	2b80      	cmp	r3, #128	@ 0x80
 80037d4:	d0f2      	beq.n	80037bc <SPI_EndRxTxTransaction+0x78>
 80037d6:	e000      	b.n	80037da <SPI_EndRxTxTransaction+0x96>
        break;
 80037d8:	bf00      	nop
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000000 	.word	0x20000000
 80037e8:	165e9f81 	.word	0x165e9f81

080037ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e041      	b.n	8003882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fe f8be 	bl	8001994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f000 fef4 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d001      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e04e      	b.n	8003942 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a23      	ldr	r2, [pc, #140]	@ (8003950 <HAL_TIM_Base_Start_IT+0xc4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ce:	d01d      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x80>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_TIM_Base_Start_IT+0xc8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x80>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1e      	ldr	r2, [pc, #120]	@ (8003958 <HAL_TIM_Base_Start_IT+0xcc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x80>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_TIM_Base_Start_IT+0xd0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x80>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003960 <HAL_TIM_Base_Start_IT+0xd4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x80>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a19      	ldr	r2, [pc, #100]	@ (8003964 <HAL_TIM_Base_Start_IT+0xd8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x80>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a18      	ldr	r2, [pc, #96]	@ (8003968 <HAL_TIM_Base_Start_IT+0xdc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d111      	bne.n	8003930 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b06      	cmp	r3, #6
 800391c:	d010      	beq.n	8003940 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392e:	e007      	b.n	8003940 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40010000 	.word	0x40010000
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40010400 	.word	0x40010400
 8003964:	40014000 	.word	0x40014000
 8003968:	40001800 	.word	0x40001800

0800396c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e041      	b.n	8003a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f839 	bl	8003a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f000 fe34 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_TIM_PWM_Start_IT+0x28>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e022      	b.n	8003a8e <HAL_TIM_PWM_Start_IT+0x6e>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d109      	bne.n	8003a62 <HAL_TIM_PWM_Start_IT+0x42>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	bf14      	ite	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	2300      	moveq	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	e015      	b.n	8003a8e <HAL_TIM_PWM_Start_IT+0x6e>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d109      	bne.n	8003a7c <HAL_TIM_PWM_Start_IT+0x5c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e008      	b.n	8003a8e <HAL_TIM_PWM_Start_IT+0x6e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0c7      	b.n	8003c26 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_PWM_Start_IT+0x86>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aa4:	e013      	b.n	8003ace <HAL_TIM_PWM_Start_IT+0xae>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_PWM_Start_IT+0x96>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ab4:	e00b      	b.n	8003ace <HAL_TIM_PWM_Start_IT+0xae>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start_IT+0xa6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ac4:	e003      	b.n	8003ace <HAL_TIM_PWM_Start_IT+0xae>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d841      	bhi.n	8003b58 <HAL_TIM_PWM_Start_IT+0x138>
 8003ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <HAL_TIM_PWM_Start_IT+0xbc>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b11 	.word	0x08003b11
 8003ae0:	08003b59 	.word	0x08003b59
 8003ae4:	08003b59 	.word	0x08003b59
 8003ae8:	08003b59 	.word	0x08003b59
 8003aec:	08003b23 	.word	0x08003b23
 8003af0:	08003b59 	.word	0x08003b59
 8003af4:	08003b59 	.word	0x08003b59
 8003af8:	08003b59 	.word	0x08003b59
 8003afc:	08003b35 	.word	0x08003b35
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b47 	.word	0x08003b47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0202 	orr.w	r2, r2, #2
 8003b1e:	60da      	str	r2, [r3, #12]
      break;
 8003b20:	e01d      	b.n	8003b5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0204 	orr.w	r2, r2, #4
 8003b30:	60da      	str	r2, [r3, #12]
      break;
 8003b32:	e014      	b.n	8003b5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	60da      	str	r2, [r3, #12]
      break;
 8003b44:	e00b      	b.n	8003b5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0210 	orr.w	r2, r2, #16
 8003b54:	60da      	str	r2, [r3, #12]
      break;
 8003b56:	e002      	b.n	8003b5e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d15f      	bne.n	8003c24 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f973 	bl	8004e58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2e      	ldr	r2, [pc, #184]	@ (8003c30 <HAL_TIM_PWM_Start_IT+0x210>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_TIM_PWM_Start_IT+0x166>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2c      	ldr	r2, [pc, #176]	@ (8003c34 <HAL_TIM_PWM_Start_IT+0x214>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_TIM_PWM_Start_IT+0x16a>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_TIM_PWM_Start_IT+0x16c>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	@ (8003c30 <HAL_TIM_PWM_Start_IT+0x210>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c38 <HAL_TIM_PWM_Start_IT+0x218>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c3c <HAL_TIM_PWM_Start_IT+0x21c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c40 <HAL_TIM_PWM_Start_IT+0x220>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a17      	ldr	r2, [pc, #92]	@ (8003c34 <HAL_TIM_PWM_Start_IT+0x214>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a18      	ldr	r2, [pc, #96]	@ (8003c44 <HAL_TIM_PWM_Start_IT+0x224>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a17      	ldr	r2, [pc, #92]	@ (8003c48 <HAL_TIM_PWM_Start_IT+0x228>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d111      	bne.n	8003c14 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d010      	beq.n	8003c24 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c12:	e007      	b.n	8003c24 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40010400 	.word	0x40010400
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40001800 	.word	0x40001800

08003c4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e041      	b.n	8003ce2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fe3e 	bl	80018f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f000 fcc4 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <HAL_TIM_IC_Start_IT+0x1e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	e013      	b.n	8003d32 <HAL_TIM_IC_Start_IT+0x46>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d104      	bne.n	8003d1a <HAL_TIM_IC_Start_IT+0x2e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e00b      	b.n	8003d32 <HAL_TIM_IC_Start_IT+0x46>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_IC_Start_IT+0x3e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e003      	b.n	8003d32 <HAL_TIM_IC_Start_IT+0x46>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d104      	bne.n	8003d44 <HAL_TIM_IC_Start_IT+0x58>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e013      	b.n	8003d6c <HAL_TIM_IC_Start_IT+0x80>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d104      	bne.n	8003d54 <HAL_TIM_IC_Start_IT+0x68>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e00b      	b.n	8003d6c <HAL_TIM_IC_Start_IT+0x80>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d104      	bne.n	8003d64 <HAL_TIM_IC_Start_IT+0x78>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e003      	b.n	8003d6c <HAL_TIM_IC_Start_IT+0x80>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d6e:	7bbb      	ldrb	r3, [r7, #14]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d102      	bne.n	8003d7a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d74:	7b7b      	ldrb	r3, [r7, #13]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d001      	beq.n	8003d7e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e0cc      	b.n	8003f18 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_IC_Start_IT+0xa2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d8c:	e013      	b.n	8003db6 <HAL_TIM_IC_Start_IT+0xca>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_IC_Start_IT+0xb2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d9c:	e00b      	b.n	8003db6 <HAL_TIM_IC_Start_IT+0xca>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_IC_Start_IT+0xc2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dac:	e003      	b.n	8003db6 <HAL_TIM_IC_Start_IT+0xca>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_IC_Start_IT+0xda>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dc4:	e013      	b.n	8003dee <HAL_TIM_IC_Start_IT+0x102>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_IC_Start_IT+0xea>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dd4:	e00b      	b.n	8003dee <HAL_TIM_IC_Start_IT+0x102>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_IC_Start_IT+0xfa>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003de4:	e003      	b.n	8003dee <HAL_TIM_IC_Start_IT+0x102>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b0c      	cmp	r3, #12
 8003df2:	d841      	bhi.n	8003e78 <HAL_TIM_IC_Start_IT+0x18c>
 8003df4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dfc <HAL_TIM_IC_Start_IT+0x110>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08003e79 	.word	0x08003e79
 8003e04:	08003e79 	.word	0x08003e79
 8003e08:	08003e79 	.word	0x08003e79
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003e79 	.word	0x08003e79
 8003e18:	08003e79 	.word	0x08003e79
 8003e1c:	08003e55 	.word	0x08003e55
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e67 	.word	0x08003e67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0202 	orr.w	r2, r2, #2
 8003e3e:	60da      	str	r2, [r3, #12]
      break;
 8003e40:	e01d      	b.n	8003e7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0204 	orr.w	r2, r2, #4
 8003e50:	60da      	str	r2, [r3, #12]
      break;
 8003e52:	e014      	b.n	8003e7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0208 	orr.w	r2, r2, #8
 8003e62:	60da      	str	r2, [r3, #12]
      break;
 8003e64:	e00b      	b.n	8003e7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0210 	orr.w	r2, r2, #16
 8003e74:	60da      	str	r2, [r3, #12]
      break;
 8003e76:	e002      	b.n	8003e7e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d148      	bne.n	8003f16 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 ffe3 	bl	8004e58 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <HAL_TIM_IC_Start_IT+0x234>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d022      	beq.n	8003ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f24 <HAL_TIM_IC_Start_IT+0x238>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d018      	beq.n	8003ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <HAL_TIM_IC_Start_IT+0x23c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f2c <HAL_TIM_IC_Start_IT+0x240>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <HAL_TIM_IC_Start_IT+0x244>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d009      	beq.n	8003ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a18      	ldr	r2, [pc, #96]	@ (8003f34 <HAL_TIM_IC_Start_IT+0x248>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a16      	ldr	r2, [pc, #88]	@ (8003f38 <HAL_TIM_IC_Start_IT+0x24c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b06      	cmp	r3, #6
 8003ef2:	d010      	beq.n	8003f16 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f04:	e007      	b.n	8003f16 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40001800 	.word	0x40001800

08003f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd f832 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb2e 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7fd fa11 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0204 	mvn.w	r2, #4
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd f80c 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fb08 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fd f9eb 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0208 	mvn.w	r2, #8
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2204      	movs	r2, #4
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc ffe6 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fae2 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fd f9c5 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0210 	mvn.w	r2, #16
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2208      	movs	r2, #8
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc ffc0 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fabc 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fd f99f 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0201 	mvn.w	r2, #1
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc ffb6 	bl	8001014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 ff72 	bl	8004fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fa8a 	bl	8004604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0220 	mvn.w	r2, #32
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 ff44 	bl	8004f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004136:	2302      	movs	r3, #2
 8004138:	e088      	b.n	800424c <HAL_TIM_IC_ConfigChannel+0x130>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11b      	bne.n	8004180 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004158:	f000 fcba 	bl	8004ad0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 020c 	bic.w	r2, r2, #12
 800416a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	619a      	str	r2, [r3, #24]
 800417e:	e060      	b.n	8004242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d11c      	bne.n	80041c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004196:	f000 fd3e 	bl	8004c16 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80041a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6999      	ldr	r1, [r3, #24]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	021a      	lsls	r2, r3, #8
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	619a      	str	r2, [r3, #24]
 80041be:	e040      	b.n	8004242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d11b      	bne.n	80041fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80041d6:	f000 fd8b 	bl	8004cf0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 020c 	bic.w	r2, r2, #12
 80041e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69d9      	ldr	r1, [r3, #28]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	61da      	str	r2, [r3, #28]
 80041fc:	e021      	b.n	8004242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d11c      	bne.n	800423e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004214:	f000 fda8 	bl	8004d68 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004226:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69d9      	ldr	r1, [r3, #28]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	021a      	lsls	r2, r3, #8
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	61da      	str	r2, [r3, #28]
 800423c:	e001      	b.n	8004242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800426e:	2302      	movs	r3, #2
 8004270:	e0ae      	b.n	80043d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	f200 809f 	bhi.w	80043c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004282:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080043c1 	.word	0x080043c1
 8004290:	080043c1 	.word	0x080043c1
 8004294:	080043c1 	.word	0x080043c1
 8004298:	080042fd 	.word	0x080042fd
 800429c:	080043c1 	.word	0x080043c1
 80042a0:	080043c1 	.word	0x080043c1
 80042a4:	080043c1 	.word	0x080043c1
 80042a8:	0800433f 	.word	0x0800433f
 80042ac:	080043c1 	.word	0x080043c1
 80042b0:	080043c1 	.word	0x080043c1
 80042b4:	080043c1 	.word	0x080043c1
 80042b8:	0800437f 	.word	0x0800437f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fa54 	bl	8004770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0208 	orr.w	r2, r2, #8
 80042d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6999      	ldr	r1, [r3, #24]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	619a      	str	r2, [r3, #24]
      break;
 80042fa:	e064      	b.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 faa4 	bl	8004850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6999      	ldr	r1, [r3, #24]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	619a      	str	r2, [r3, #24]
      break;
 800433c:	e043      	b.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 faf9 	bl	800493c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0208 	orr.w	r2, r2, #8
 8004358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0204 	bic.w	r2, r2, #4
 8004368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69d9      	ldr	r1, [r3, #28]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	61da      	str	r2, [r3, #28]
      break;
 800437c:	e023      	b.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fb4d 	bl	8004a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69d9      	ldr	r1, [r3, #28]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	021a      	lsls	r2, r3, #8
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	61da      	str	r2, [r3, #28]
      break;
 80043be:	e002      	b.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
      break;
 80043c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_TIM_ConfigClockSource+0x1c>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e0b4      	b.n	800455e <HAL_TIM_ConfigClockSource+0x186>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800441a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442c:	d03e      	beq.n	80044ac <HAL_TIM_ConfigClockSource+0xd4>
 800442e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004432:	f200 8087 	bhi.w	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443a:	f000 8086 	beq.w	800454a <HAL_TIM_ConfigClockSource+0x172>
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004442:	d87f      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004444:	2b70      	cmp	r3, #112	@ 0x70
 8004446:	d01a      	beq.n	800447e <HAL_TIM_ConfigClockSource+0xa6>
 8004448:	2b70      	cmp	r3, #112	@ 0x70
 800444a:	d87b      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 800444c:	2b60      	cmp	r3, #96	@ 0x60
 800444e:	d050      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004450:	2b60      	cmp	r3, #96	@ 0x60
 8004452:	d877      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004454:	2b50      	cmp	r3, #80	@ 0x50
 8004456:	d03c      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004458:	2b50      	cmp	r3, #80	@ 0x50
 800445a:	d873      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b40      	cmp	r3, #64	@ 0x40
 800445e:	d058      	beq.n	8004512 <HAL_TIM_ConfigClockSource+0x13a>
 8004460:	2b40      	cmp	r3, #64	@ 0x40
 8004462:	d86f      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b30      	cmp	r3, #48	@ 0x30
 8004466:	d064      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x15a>
 8004468:	2b30      	cmp	r3, #48	@ 0x30
 800446a:	d86b      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b20      	cmp	r3, #32
 800446e:	d060      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x15a>
 8004470:	2b20      	cmp	r3, #32
 8004472:	d867      	bhi.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d05c      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x15a>
 8004478:	2b10      	cmp	r3, #16
 800447a:	d05a      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x15a>
 800447c:	e062      	b.n	8004544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800448e:	f000 fcc3 	bl	8004e18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	609a      	str	r2, [r3, #8]
      break;
 80044aa:	e04f      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044bc:	f000 fcac 	bl	8004e18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ce:	609a      	str	r2, [r3, #8]
      break;
 80044d0:	e03c      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044de:	461a      	mov	r2, r3
 80044e0:	f000 fb6a 	bl	8004bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2150      	movs	r1, #80	@ 0x50
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fc79 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 80044f0:	e02c      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044fe:	461a      	mov	r2, r3
 8004500:	f000 fbc6 	bl	8004c90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2160      	movs	r1, #96	@ 0x60
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fc69 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 8004510:	e01c      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	461a      	mov	r2, r3
 8004520:	f000 fb4a 	bl	8004bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2140      	movs	r1, #64	@ 0x40
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fc59 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 8004530:	e00c      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f000 fc50 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 8004542:	e003      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      break;
 8004548:	e000      	b.n	800454c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800454a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d831      	bhi.n	80045e0 <HAL_TIM_ReadCapturedValue+0x78>
 800457c:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <HAL_TIM_ReadCapturedValue+0x1c>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080045e1 	.word	0x080045e1
 800458c:	080045e1 	.word	0x080045e1
 8004590:	080045e1 	.word	0x080045e1
 8004594:	080045c3 	.word	0x080045c3
 8004598:	080045e1 	.word	0x080045e1
 800459c:	080045e1 	.word	0x080045e1
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045cd 	.word	0x080045cd
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080045e1 	.word	0x080045e1
 80045b4:	080045d7 	.word	0x080045d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045be:	60fb      	str	r3, [r7, #12]

      break;
 80045c0:	e00f      	b.n	80045e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	60fb      	str	r3, [r7, #12]

      break;
 80045ca:	e00a      	b.n	80045e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	60fb      	str	r3, [r7, #12]

      break;
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	60fb      	str	r3, [r7, #12]

      break;
 80045de:	e000      	b.n	80045e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80045e0:	bf00      	nop
  }

  return tmpreg;
 80045e2:	68fb      	ldr	r3, [r7, #12]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a46      	ldr	r2, [pc, #280]	@ (8004744 <TIM_Base_SetConfig+0x12c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004636:	d00f      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a43      	ldr	r2, [pc, #268]	@ (8004748 <TIM_Base_SetConfig+0x130>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00b      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a42      	ldr	r2, [pc, #264]	@ (800474c <TIM_Base_SetConfig+0x134>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d007      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a41      	ldr	r2, [pc, #260]	@ (8004750 <TIM_Base_SetConfig+0x138>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a40      	ldr	r2, [pc, #256]	@ (8004754 <TIM_Base_SetConfig+0x13c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d108      	bne.n	800466a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a35      	ldr	r2, [pc, #212]	@ (8004744 <TIM_Base_SetConfig+0x12c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004678:	d027      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a32      	ldr	r2, [pc, #200]	@ (8004748 <TIM_Base_SetConfig+0x130>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d023      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a31      	ldr	r2, [pc, #196]	@ (800474c <TIM_Base_SetConfig+0x134>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a30      	ldr	r2, [pc, #192]	@ (8004750 <TIM_Base_SetConfig+0x138>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2f      	ldr	r2, [pc, #188]	@ (8004754 <TIM_Base_SetConfig+0x13c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d017      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2e      	ldr	r2, [pc, #184]	@ (8004758 <TIM_Base_SetConfig+0x140>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2d      	ldr	r2, [pc, #180]	@ (800475c <TIM_Base_SetConfig+0x144>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00f      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004760 <TIM_Base_SetConfig+0x148>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00b      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004764 <TIM_Base_SetConfig+0x14c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d007      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004768 <TIM_Base_SetConfig+0x150>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a29      	ldr	r2, [pc, #164]	@ (800476c <TIM_Base_SetConfig+0x154>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d108      	bne.n	80046dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <TIM_Base_SetConfig+0x12c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0xf8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a12      	ldr	r2, [pc, #72]	@ (8004754 <TIM_Base_SetConfig+0x13c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d103      	bne.n	8004718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d105      	bne.n	8004736 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	611a      	str	r2, [r3, #16]
  }
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40010400 	.word	0x40010400
 8004758:	40014000 	.word	0x40014000
 800475c:	40014400 	.word	0x40014400
 8004760:	40014800 	.word	0x40014800
 8004764:	40001800 	.word	0x40001800
 8004768:	40001c00 	.word	0x40001c00
 800476c:	40002000 	.word	0x40002000

08004770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f023 0201 	bic.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f023 0302 	bic.w	r3, r3, #2
 80047b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a20      	ldr	r2, [pc, #128]	@ (8004848 <TIM_OC1_SetConfig+0xd8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_OC1_SetConfig+0x64>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1f      	ldr	r2, [pc, #124]	@ (800484c <TIM_OC1_SetConfig+0xdc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d10c      	bne.n	80047ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f023 0308 	bic.w	r3, r3, #8
 80047da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a15      	ldr	r2, [pc, #84]	@ (8004848 <TIM_OC1_SetConfig+0xd8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d003      	beq.n	80047fe <TIM_OC1_SetConfig+0x8e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a14      	ldr	r2, [pc, #80]	@ (800484c <TIM_OC1_SetConfig+0xdc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d111      	bne.n	8004822 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800480c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	621a      	str	r2, [r3, #32]
}
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40010000 	.word	0x40010000
 800484c:	40010400 	.word	0x40010400

08004850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f023 0210 	bic.w	r2, r3, #16
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0320 	bic.w	r3, r3, #32
 800489a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a22      	ldr	r2, [pc, #136]	@ (8004934 <TIM_OC2_SetConfig+0xe4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_OC2_SetConfig+0x68>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a21      	ldr	r2, [pc, #132]	@ (8004938 <TIM_OC2_SetConfig+0xe8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d10d      	bne.n	80048d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a17      	ldr	r2, [pc, #92]	@ (8004934 <TIM_OC2_SetConfig+0xe4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_OC2_SetConfig+0x94>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a16      	ldr	r2, [pc, #88]	@ (8004938 <TIM_OC2_SetConfig+0xe8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d113      	bne.n	800490c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	621a      	str	r2, [r3, #32]
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40010000 	.word	0x40010000
 8004938:	40010400 	.word	0x40010400

0800493c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a21      	ldr	r2, [pc, #132]	@ (8004a1c <TIM_OC3_SetConfig+0xe0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_OC3_SetConfig+0x66>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a20      	ldr	r2, [pc, #128]	@ (8004a20 <TIM_OC3_SetConfig+0xe4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10d      	bne.n	80049be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a16      	ldr	r2, [pc, #88]	@ (8004a1c <TIM_OC3_SetConfig+0xe0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_OC3_SetConfig+0x92>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a15      	ldr	r2, [pc, #84]	@ (8004a20 <TIM_OC3_SetConfig+0xe4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d113      	bne.n	80049f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	621a      	str	r2, [r3, #32]
}
 8004a10:	bf00      	nop
 8004a12:	371c      	adds	r7, #28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40010400 	.word	0x40010400

08004a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	031b      	lsls	r3, r3, #12
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a12      	ldr	r2, [pc, #72]	@ (8004ac8 <TIM_OC4_SetConfig+0xa4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC4_SetConfig+0x68>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a11      	ldr	r2, [pc, #68]	@ (8004acc <TIM_OC4_SetConfig+0xa8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d109      	bne.n	8004aa0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	019b      	lsls	r3, r3, #6
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40010400 	.word	0x40010400

08004ad0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f023 0201 	bic.w	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a28      	ldr	r2, [pc, #160]	@ (8004b9c <TIM_TI1_SetConfig+0xcc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01b      	beq.n	8004b36 <TIM_TI1_SetConfig+0x66>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b04:	d017      	beq.n	8004b36 <TIM_TI1_SetConfig+0x66>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a25      	ldr	r2, [pc, #148]	@ (8004ba0 <TIM_TI1_SetConfig+0xd0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <TIM_TI1_SetConfig+0x66>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a24      	ldr	r2, [pc, #144]	@ (8004ba4 <TIM_TI1_SetConfig+0xd4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_TI1_SetConfig+0x66>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a23      	ldr	r2, [pc, #140]	@ (8004ba8 <TIM_TI1_SetConfig+0xd8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_TI1_SetConfig+0x66>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a22      	ldr	r2, [pc, #136]	@ (8004bac <TIM_TI1_SetConfig+0xdc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_TI1_SetConfig+0x66>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a21      	ldr	r2, [pc, #132]	@ (8004bb0 <TIM_TI1_SetConfig+0xe0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_TI1_SetConfig+0x66>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a20      	ldr	r2, [pc, #128]	@ (8004bb4 <TIM_TI1_SetConfig+0xe4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <TIM_TI1_SetConfig+0x6a>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <TIM_TI1_SetConfig+0x6c>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	e003      	b.n	8004b5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f023 030a 	bic.w	r3, r3, #10
 8004b74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f003 030a 	and.w	r3, r3, #10
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800
 8004ba8:	40000c00 	.word	0x40000c00
 8004bac:	40010400 	.word	0x40010400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40001800 	.word	0x40001800

08004bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0201 	bic.w	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f023 030a 	bic.w	r3, r3, #10
 8004bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b087      	sub	sp, #28
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0210 	bic.w	r2, r3, #16
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	031b      	lsls	r3, r3, #12
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0210 	bic.w	r2, r3, #16
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	031b      	lsls	r3, r3, #12
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	621a      	str	r2, [r3, #32]
}
 8004ce4:	bf00      	nop
 8004ce6:	371c      	adds	r7, #28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f023 0303 	bic.w	r3, r3, #3
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004d40:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	621a      	str	r2, [r3, #32]
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004da6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	031b      	lsls	r3, r3, #12
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004dba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	031b      	lsls	r3, r3, #12
 8004dc0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f043 0307 	orr.w	r3, r3, #7
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	021a      	lsls	r2, r3, #8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	609a      	str	r2, [r3, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1a      	ldr	r2, [r3, #32]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e05a      	b.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a21      	ldr	r2, [pc, #132]	@ (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f08:	d01d      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1b      	ldr	r2, [pc, #108]	@ (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1a      	ldr	r2, [pc, #104]	@ (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a18      	ldr	r2, [pc, #96]	@ (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a15      	ldr	r2, [pc, #84]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10c      	bne.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40001800 	.word	0x40001800

08004f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <BSP_RF_Init>:


void _BSP_RF_ReceiveMessage();

void BSP_RF_Init(BSP_RF_Params_TypeDef* _params)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	nRF24_CE_L();
 8004fcc:	f000 fb4e 	bl	800566c <nRF24_CE_L>

    nRF24_Init();
 8004fd0:	f000 f90d 	bl	80051ee <nRF24_Init>
	nRF24_SetRFChannel(_params->channel);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	885b      	ldrh	r3, [r3, #2]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f9f7 	bl	80053ce <nRF24_SetRFChannel>
	nRF24_SetDataRate(_params->rate);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fa62 	bl	80054ae <nRF24_SetDataRate>
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8004fea:	200c      	movs	r0, #12
 8004fec:	f000 f9ce 	bl	800538c <nRF24_SetCRCScheme>
	nRF24_SetAddrWidth(3);
 8004ff0:	2003      	movs	r0, #3
 8004ff2:	f000 f9fa 	bl	80053ea <nRF24_SetAddrWidth>
	params = _params;
 8004ff6:	4a03      	ldr	r2, [pc, #12]	@ (8005004 <BSP_RF_Init+0x40>)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6013      	str	r3, [r2, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	200001c8 	.word	0x200001c8

08005008 <BSP_RF_Listening>:
void BSP_RF_SendMessage(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH]){
		nRF24_TransmitPacket(payload, NRF24L01P_PAYLOAD_LENGTH);
}

void BSP_RF_Listening()
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for pipe
 800500c:	490d      	ldr	r1, [pc, #52]	@ (8005044 <BSP_RF_Listening+0x3c>)
 800500e:	2001      	movs	r0, #1
 8005010:	f000 f9fc 	bl	800540c <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // Auto-ACK: enabled, payload length: 10 bytes
 8005014:	220a      	movs	r2, #10
 8005016:	2101      	movs	r1, #1
 8005018:	2001      	movs	r0, #1
 800501a:	f000 fa63 	bl	80054e4 <nRF24_SetRXPipe>
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 800501e:	2006      	movs	r0, #6
 8005020:	f000 fa2a 	bl	8005478 <nRF24_SetTXPower>
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8005024:	2001      	movs	r0, #1
 8005026:	f000 f990 	bl	800534a <nRF24_SetOperationalMode>
    nRF24_ClearIRQFlags();
 800502a:	f000 fac1 	bl	80055b0 <nRF24_ClearIRQFlags>
    nRF24_SetPowerMode(nRF24_PWR_UP);
 800502e:	2002      	movs	r0, #2
 8005030:	f000 f96c 	bl	800530c <nRF24_SetPowerMode>
    nRF24_CE_H();
 8005034:	f000 fb26 	bl	8005684 <nRF24_CE_H>

	mode = RX;
 8005038:	4b03      	ldr	r3, [pc, #12]	@ (8005048 <BSP_RF_Listening+0x40>)
 800503a:	2202      	movs	r2, #2
 800503c:	701a      	strb	r2, [r3, #0]
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	0800574c 	.word	0x0800574c
 8005048:	200001cc 	.word	0x200001cc

0800504c <_BSP_RF_ReceiveMessage>:

void _BSP_RF_ReceiveMessage(){
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0

	uint8_t payload_length = NRF24L01P_PAYLOAD_LENGTH;
 8005052:	2308      	movs	r3, #8
 8005054:	71fb      	strb	r3, [r7, #7]
	nRF24_ReadPayload(rx_data, &payload_length);
 8005056:	1dfb      	adds	r3, r7, #7
 8005058:	4619      	mov	r1, r3
 800505a:	4804      	ldr	r0, [pc, #16]	@ (800506c <_BSP_RF_ReceiveMessage+0x20>)
 800505c:	f000 fabd 	bl	80055da <nRF24_ReadPayload>
	nRF24_ClearIRQFlags();
 8005060:	f000 faa6 	bl	80055b0 <nRF24_ClearIRQFlags>

}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	200001d0 	.word	0x200001d0

08005070 <BSP_RF_IrqHandler>:

void BSP_RF_SetAck(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH]){
	memcpy(ack, payload, NRF24L01P_PAYLOAD_LENGTH);
}

uint8_t BSP_RF_IrqHandler(){
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	71fb      	strb	r3, [r7, #7]
	uint8_t payload_length = NRF24L01P_PAYLOAD_LENGTH;
 800507a:	2308      	movs	r3, #8
 800507c:	71bb      	strb	r3, [r7, #6]
	if(mode == RX){
 800507e:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <BSP_RF_IrqHandler+0x28>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d101      	bne.n	800508a <BSP_RF_IrqHandler+0x1a>
		ret = 1;
 8005086:	2301      	movs	r3, #1
 8005088:	71fb      	strb	r3, [r7, #7]
	}

	_BSP_RF_ReceiveMessage();
 800508a:	f7ff ffdf 	bl	800504c <_BSP_RF_ReceiveMessage>

	return ret;
 800508e:	79fb      	ldrb	r3, [r7, #7]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	200001cc 	.word	0x200001cc

0800509c <BSP_RF_ReadData>:

void BSP_RF_ReadData(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH]){
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	memcpy(payload, rx_data, NRF24L01P_PAYLOAD_LENGTH);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4906      	ldr	r1, [pc, #24]	@ (80050c0 <BSP_RF_ReadData+0x24>)
 80050a8:	461a      	mov	r2, r3
 80050aa:	460b      	mov	r3, r1
 80050ac:	cb03      	ldmia	r3!, {r0, r1}
 80050ae:	6010      	str	r0, [r2, #0]
 80050b0:	6051      	str	r1, [r2, #4]
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	200001d0 	.word	0x200001d0

080050c4 <nRF24_ReadReg>:

// Reads a value of register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80050ce:	f000 fae5 	bl	800569c <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 faae 	bl	800563c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80050e0:	20ff      	movs	r0, #255	@ 0xff
 80050e2:	f000 faab 	bl	800563c <nRF24_LL_RW>
 80050e6:	4603      	mov	r3, r0
 80050e8:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80050ea:	f000 fae3 	bl	80056b4 <nRF24_CSN_H>

	return value;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <nRF24_WriteReg>:

// Writes a new value to the register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	460a      	mov	r2, r1
 8005102:	71fb      	strb	r3, [r7, #7]
 8005104:	4613      	mov	r3, r2
 8005106:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8005108:	f000 fac8 	bl	800569c <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	2b1f      	cmp	r3, #31
 8005110:	d810      	bhi.n	8005134 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW((uint8_t)(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP)));
 8005112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	b25b      	sxtb	r3, r3
 800511c:	f043 0320 	orr.w	r3, r3, #32
 8005120:	b25b      	sxtb	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fa89 	bl	800563c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800512a:	79bb      	ldrb	r3, [r7, #6]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fa85 	bl	800563c <nRF24_LL_RW>
 8005132:	e013      	b.n	800515c <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fa80 	bl	800563c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2be1      	cmp	r3, #225	@ 0xe1
 8005140:	d00c      	beq.n	800515c <nRF24_WriteReg+0x64>
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	2be2      	cmp	r3, #226	@ 0xe2
 8005146:	d009      	beq.n	800515c <nRF24_WriteReg+0x64>
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	2be3      	cmp	r3, #227	@ 0xe3
 800514c:	d006      	beq.n	800515c <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	2bff      	cmp	r3, #255	@ 0xff
 8005152:	d003      	beq.n	800515c <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8005154:	79bb      	ldrb	r3, [r7, #6]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fa70 	bl	800563c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800515c:	f000 faaa 	bl	80056b4 <nRF24_CSN_H>
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <nRF24_ReadMBReg>:
// Reads to the buffer from a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	6039      	str	r1, [r7, #0]
 8005172:	71fb      	strb	r3, [r7, #7]
 8005174:	4613      	mov	r3, r2
 8005176:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8005178:	f000 fa90 	bl	800569c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fa5c 	bl	800563c <nRF24_LL_RW>
	while (count--) {
 8005184:	e007      	b.n	8005196 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8005186:	683c      	ldr	r4, [r7, #0]
 8005188:	1c63      	adds	r3, r4, #1
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	20ff      	movs	r0, #255	@ 0xff
 800518e:	f000 fa55 	bl	800563c <nRF24_LL_RW>
 8005192:	4603      	mov	r3, r0
 8005194:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8005196:	79bb      	ldrb	r3, [r7, #6]
 8005198:	1e5a      	subs	r2, r3, #1
 800519a:	71ba      	strb	r2, [r7, #6]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f2      	bne.n	8005186 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80051a0:	f000 fa88 	bl	80056b4 <nRF24_CSN_H>
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd90      	pop	{r4, r7, pc}

080051ac <nRF24_WriteMBReg>:
// Writes a buffer to a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	6039      	str	r1, [r7, #0]
 80051b6:	71fb      	strb	r3, [r7, #7]
 80051b8:	4613      	mov	r3, r2
 80051ba:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80051bc:	f000 fa6e 	bl	800569c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fa3a 	bl	800563c <nRF24_LL_RW>
	while (count--) {
 80051c8:	e006      	b.n	80051d8 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	603a      	str	r2, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fa32 	bl	800563c <nRF24_LL_RW>
	while (count--) {
 80051d8:	79bb      	ldrb	r3, [r7, #6]
 80051da:	1e5a      	subs	r2, r3, #1
 80051dc:	71ba      	strb	r2, [r7, #6]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f3      	bne.n	80051ca <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80051e2:	f000 fa67 	bl	80056b4 <nRF24_CSN_H>
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <nRF24_Init>:

// Configures the transceiver to its initial state
void nRF24_Init(void) {
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
	// Write to the registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG,     0x08);
 80051f4:	2108      	movs	r1, #8
 80051f6:	2000      	movs	r0, #0
 80051f8:	f7ff ff7e 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA,      0x3F);
 80051fc:	213f      	movs	r1, #63	@ 0x3f
 80051fe:	2001      	movs	r0, #1
 8005200:	f7ff ff7a 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR,  0x03);
 8005204:	2103      	movs	r1, #3
 8005206:	2002      	movs	r0, #2
 8005208:	f7ff ff76 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW,   0x03);
 800520c:	2103      	movs	r1, #3
 800520e:	2003      	movs	r0, #3
 8005210:	f7ff ff72 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8005214:	2103      	movs	r1, #3
 8005216:	2004      	movs	r0, #4
 8005218:	f7ff ff6e 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH,      0x02);
 800521c:	2102      	movs	r1, #2
 800521e:	2005      	movs	r0, #5
 8005220:	f7ff ff6a 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP,   0x0E);
 8005224:	210e      	movs	r1, #14
 8005226:	2006      	movs	r0, #6
 8005228:	f7ff ff66 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS,     0x00);
 800522c:	2100      	movs	r1, #0
 800522e:	2007      	movs	r0, #7
 8005230:	f7ff ff62 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0,   0x00);
 8005234:	2100      	movs	r1, #0
 8005236:	2011      	movs	r0, #17
 8005238:	f7ff ff5e 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1,   0x00);
 800523c:	2100      	movs	r1, #0
 800523e:	2012      	movs	r0, #18
 8005240:	f7ff ff5a 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2,   0x00);
 8005244:	2100      	movs	r1, #0
 8005246:	2013      	movs	r0, #19
 8005248:	f7ff ff56 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3,   0x00);
 800524c:	2100      	movs	r1, #0
 800524e:	2014      	movs	r0, #20
 8005250:	f7ff ff52 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4,   0x00);
 8005254:	2100      	movs	r1, #0
 8005256:	2015      	movs	r0, #21
 8005258:	f7ff ff4e 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5,   0x00);
 800525c:	2100      	movs	r1, #0
 800525e:	2016      	movs	r0, #22
 8005260:	f7ff ff4a 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD,      0x00);
 8005264:	2100      	movs	r1, #0
 8005266:	201c      	movs	r0, #28
 8005268:	f7ff ff46 	bl	80050f8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE,    0x00);
 800526c:	2100      	movs	r1, #0
 800526e:	201d      	movs	r0, #29
 8005270:	f7ff ff42 	bl	80050f8 <nRF24_WriteReg>

	// Configure the default RX/TX address values
	uint8_t addr[5];
	uint8_t idx;
	for (idx = 0U; idx < sizeof(addr); idx++) {
 8005274:	2300      	movs	r3, #0
 8005276:	71fb      	strb	r3, [r7, #7]
 8005278:	e008      	b.n	800528c <nRF24_Init+0x9e>
		addr[idx] = 0xE7;
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	3308      	adds	r3, #8
 800527e:	443b      	add	r3, r7
 8005280:	22e7      	movs	r2, #231	@ 0xe7
 8005282:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (idx = 0U; idx < sizeof(addr); idx++) {
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	3301      	adds	r3, #1
 800528a:	71fb      	strb	r3, [r7, #7]
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	2b04      	cmp	r3, #4
 8005290:	d9f3      	bls.n	800527a <nRF24_Init+0x8c>
	}
	nRF24_SetAddr(nRF24_PIPETX, addr);
 8005292:	463b      	mov	r3, r7
 8005294:	4619      	mov	r1, r3
 8005296:	2006      	movs	r0, #6
 8005298:	f000 f8b8 	bl	800540c <nRF24_SetAddr>
	nRF24_SetAddr(nRF24_PIPE0, addr);
 800529c:	463b      	mov	r3, r7
 800529e:	4619      	mov	r1, r3
 80052a0:	2000      	movs	r0, #0
 80052a2:	f000 f8b3 	bl	800540c <nRF24_SetAddr>
	for (idx = 0U; idx < sizeof(addr); idx++) {
 80052a6:	2300      	movs	r3, #0
 80052a8:	71fb      	strb	r3, [r7, #7]
 80052aa:	e008      	b.n	80052be <nRF24_Init+0xd0>
		addr[idx] = 0xC2;
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	3308      	adds	r3, #8
 80052b0:	443b      	add	r3, r7
 80052b2:	22c2      	movs	r2, #194	@ 0xc2
 80052b4:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (idx = 0U; idx < sizeof(addr); idx++) {
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	3301      	adds	r3, #1
 80052bc:	71fb      	strb	r3, [r7, #7]
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d9f3      	bls.n	80052ac <nRF24_Init+0xbe>
	}
	nRF24_SetAddr(nRF24_PIPE1, addr);
 80052c4:	463b      	mov	r3, r7
 80052c6:	4619      	mov	r1, r3
 80052c8:	2001      	movs	r0, #1
 80052ca:	f000 f89f 	bl	800540c <nRF24_SetAddr>
	for (idx = 2U; idx < 6U; idx++) {
 80052ce:	2302      	movs	r3, #2
 80052d0:	71fb      	strb	r3, [r7, #7]
 80052d2:	e00c      	b.n	80052ee <nRF24_Init+0x100>
		addr[0] = idx + 0xC1;
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	3b3f      	subs	r3, #63	@ 0x3f
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	703b      	strb	r3, [r7, #0]
		nRF24_SetAddr(idx, addr);
 80052dc:	463a      	mov	r2, r7
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f892 	bl	800540c <nRF24_SetAddr>
	for (idx = 2U; idx < 6U; idx++) {
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	3301      	adds	r3, #1
 80052ec:	71fb      	strb	r3, [r7, #7]
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	2b05      	cmp	r3, #5
 80052f2:	d9ef      	bls.n	80052d4 <nRF24_Init+0xe6>
	}

	// Clear the FIFO's
	nRF24_FlushRX();
 80052f4:	f000 f954 	bl	80055a0 <nRF24_FlushRX>
	nRF24_FlushTX();
 80052f8:	f000 f94a 	bl	8005590 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80052fc:	f000 f958 	bl	80055b0 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8005300:	f000 f9d8 	bl	80056b4 <nRF24_CSN_H>
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <nRF24_SetPowerMode>:
}

// Set transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8005316:	2000      	movs	r0, #0
 8005318:	f7ff fed4 	bl	80050c4 <nRF24_ReadReg>
 800531c:	4603      	mov	r3, r0
 800531e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d104      	bne.n	8005330 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Standby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	f043 0302 	orr.w	r3, r3, #2
 800532c:	73fb      	strb	r3, [r7, #15]
 800532e:	e003      	b.n	8005338 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// It goes into Power Down mode with consumption about 900nA
		reg &= (uint8_t)(~nRF24_CONFIG_PWR_UP);
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	f023 0302 	bic.w	r3, r3, #2
 8005336:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	4619      	mov	r1, r3
 800533c:	2000      	movs	r0, #0
 800533e:	f7ff fedb 	bl	80050f8 <nRF24_WriteReg>
}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	4603      	mov	r3, r0
 8005352:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8005354:	2000      	movs	r0, #0
 8005356:	f7ff feb5 	bl	80050c4 <nRF24_ReadReg>
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~nRF24_CONFIG_PRIM_RX);
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
	reg = (uint8_t)(reg | (mode & nRF24_CONFIG_PRIM_RX));
 8005366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	b25a      	sxtb	r2, r3
 8005370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005374:	4313      	orrs	r3, r2
 8005376:	b25b      	sxtb	r3, r3
 8005378:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	4619      	mov	r1, r3
 800537e:	2000      	movs	r0, #0
 8005380:	f7ff feba 	bl	80050f8 <nRF24_WriteReg>
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8005396:	2000      	movs	r0, #0
 8005398:	f7ff fe94 	bl	80050c4 <nRF24_ReadReg>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~nRF24_MASK_CRC);
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	f023 030c 	bic.w	r3, r3, #12
 80053a6:	73fb      	strb	r3, [r7, #15]
	reg = (uint8_t)(reg | (scheme & nRF24_MASK_CRC));
 80053a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ac:	f003 030c 	and.w	r3, r3, #12
 80053b0:	b25a      	sxtb	r2, r3
 80053b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	4619      	mov	r1, r3
 80053c0:	2000      	movs	r0, #0
 80053c2:	f7ff fe99 	bl	80050f8 <nRF24_WriteReg>
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <nRF24_SetRFChannel>:
// Set RF frequency channel
// input:
//   channel - radio frequency channel, can be a value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	4619      	mov	r1, r3
 80053dc:	2005      	movs	r0, #5
 80053de:	f7ff fe8b 	bl	80050f8 <nRF24_WriteReg>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4603      	mov	r3, r0
 80053f2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, (uint8_t)(addr_width - 2U));
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	3b02      	subs	r3, #2
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	2003      	movs	r0, #3
 80053fe:	f7ff fe7b 	bl	80050f8 <nRF24_WriteReg>
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <nRF24_SetAddr>:
//       of the actual address width configured in the transceiver
// note: for the pipes[2..5] only the first byte from the addr buffer
//       will be written since the pipes[1..5] share the four
//       most significant address bytes
// note: always ensure that none of the data pipes have the same address
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	6039      	str	r1, [r7, #0]
 8005416:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b06      	cmp	r3, #6
 800541c:	d00a      	beq.n	8005434 <nRF24_SetAddr+0x28>
 800541e:	2b06      	cmp	r3, #6
 8005420:	dc22      	bgt.n	8005468 <nRF24_SetAddr+0x5c>
 8005422:	2b01      	cmp	r3, #1
 8005424:	dc02      	bgt.n	800542c <nRF24_SetAddr+0x20>
 8005426:	2b00      	cmp	r3, #0
 8005428:	da04      	bge.n	8005434 <nRF24_SetAddr+0x28>
			// it will be the LSByte of the pipe address
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 800542a:	e01d      	b.n	8005468 <nRF24_SetAddr+0x5c>
 800542c:	3b02      	subs	r3, #2
	switch (pipe) {
 800542e:	2b03      	cmp	r3, #3
 8005430:	d81a      	bhi.n	8005468 <nRF24_SetAddr+0x5c>
 8005432:	e00f      	b.n	8005454 <nRF24_SetAddr+0x48>
			addr_width = nRF24_GetAddrWidth();
 8005434:	f000 f8a2 	bl	800557c <nRF24_GetAddrWidth>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]
				nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe],
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	4a0d      	ldr	r2, [pc, #52]	@ (8005474 <nRF24_SetAddr+0x68>)
 8005440:	5cd3      	ldrb	r3, [r2, r3]
			nRF24_WriteMBReg(
 8005442:	f043 0320 	orr.w	r3, r3, #32
 8005446:	b2db      	uxtb	r3, r3
 8005448:	7bfa      	ldrb	r2, [r7, #15]
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fead 	bl	80051ac <nRF24_WriteMBReg>
			break;
 8005452:	e00a      	b.n	800546a <nRF24_SetAddr+0x5e>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	4a07      	ldr	r2, [pc, #28]	@ (8005474 <nRF24_SetAddr+0x68>)
 8005458:	5cd2      	ldrb	r2, [r2, r3]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f7ff fe49 	bl	80050f8 <nRF24_WriteReg>
			break;
 8005466:	e000      	b.n	800546a <nRF24_SetAddr+0x5e>
			break;
 8005468:	bf00      	nop
	}
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	08005750 	.word	0x08005750

08005478 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8005482:	2006      	movs	r0, #6
 8005484:	f7ff fe1e 	bl	80050c4 <nRF24_ReadReg>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~nRF24_MASK_RF_PWR);
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	f023 0306 	bic.w	r3, r3, #6
 8005492:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8005494:	7bfa      	ldrb	r2, [r7, #15]
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	4313      	orrs	r3, r2
 800549a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	4619      	mov	r1, r3
 80054a0:	2006      	movs	r0, #6
 80054a2:	f7ff fe29 	bl	80050f8 <nRF24_WriteReg>
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	4603      	mov	r3, r0
 80054b6:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80054b8:	2006      	movs	r0, #6
 80054ba:	f7ff fe03 	bl	80050c4 <nRF24_ReadReg>
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~nRF24_MASK_DATARATE);
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80054c8:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80054ca:	7bfa      	ldrb	r2, [r7, #15]
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	4619      	mov	r1, r3
 80054d6:	2006      	movs	r0, #6
 80054d8:	f7ff fe0e 	bl	80050f8 <nRF24_WriteReg>
}
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	4603      	mov	r3, r0
 80054ec:	71fb      	strb	r3, [r7, #7]
 80054ee:	460b      	mov	r3, r1
 80054f0:	71bb      	strb	r3, [r7, #6]
 80054f2:	4613      	mov	r3, r2
 80054f4:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1U << pipe)) & nRF24_MASK_EN_RX;
 80054f6:	2002      	movs	r0, #2
 80054f8:	f7ff fde4 	bl	80050c4 <nRF24_ReadReg>
 80054fc:	4603      	mov	r3, r0
 80054fe:	4619      	mov	r1, r3
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	2201      	movs	r2, #1
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	b2db      	uxtb	r3, r3
 800550a:	430b      	orrs	r3, r1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005512:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	4619      	mov	r1, r3
 8005518:	2002      	movs	r0, #2
 800551a:	f7ff fded 	bl	80050f8 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_REG_RX_PW_P0 + pipe, payload_len & nRF24_MASK_RX_PW);
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	3311      	adds	r3, #17
 8005522:	b2da      	uxtb	r2, r3
 8005524:	797b      	ldrb	r3, [r7, #5]
 8005526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800552a:	b2db      	uxtb	r3, r3
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f7ff fde2 	bl	80050f8 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8005534:	2001      	movs	r0, #1
 8005536:	f7ff fdc5 	bl	80050c4 <nRF24_ReadReg>
 800553a:	4603      	mov	r3, r0
 800553c:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 800553e:	79bb      	ldrb	r3, [r7, #6]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d108      	bne.n	8005556 <nRF24_SetRXPipe+0x72>
		reg |= (uint8_t)(1U << pipe);
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	2201      	movs	r2, #1
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	b2da      	uxtb	r2, r3
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	4313      	orrs	r3, r2
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e009      	b.n	800556a <nRF24_SetRXPipe+0x86>
	} else {
		reg &= (uint8_t)~(1U << pipe);
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	2201      	movs	r2, #1
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	b2db      	uxtb	r3, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	b2da      	uxtb	r2, r3
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	4013      	ands	r3, r2
 8005568:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	4619      	mov	r1, r3
 800556e:	2001      	movs	r0, #1
 8005570:	f7ff fdc2 	bl	80050f8 <nRF24_WriteReg>
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <nRF24_GetAddrWidth>:
}

// Get address length
// return: the length of the address configured in the transceiver,
//         value from 3 to 5
uint8_t nRF24_GetAddrWidth(void) {
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_SETUP_AW) + 2U;
 8005580:	2003      	movs	r0, #3
 8005582:	f7ff fd9f 	bl	80050c4 <nRF24_ReadReg>
 8005586:	4603      	mov	r3, r0
 8005588:	3302      	adds	r3, #2
 800558a:	b2db      	uxtb	r3, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}

08005590 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8005594:	21ff      	movs	r1, #255	@ 0xff
 8005596:	20e1      	movs	r0, #225	@ 0xe1
 8005598:	f7ff fdae 	bl	80050f8 <nRF24_WriteReg>
}
 800559c:	bf00      	nop
 800559e:	bd80      	pop	{r7, pc}

080055a0 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80055a4:	21ff      	movs	r1, #255	@ 0xff
 80055a6:	20e2      	movs	r0, #226	@ 0xe2
 80055a8:	f7ff fda6 	bl	80050f8 <nRF24_WriteReg>
}
 80055ac:	bf00      	nop
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 80055b6:	2007      	movs	r0, #7
 80055b8:	f7ff fd84 	bl	80050c4 <nRF24_ReadReg>
 80055bc:	4603      	mov	r3, r0
 80055be:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80055c6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	4619      	mov	r1, r3
 80055cc:	2007      	movs	r0, #7
 80055ce:	f7ff fd93 	bl	80050f8 <nRF24_WriteReg>
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80055e4:	2007      	movs	r0, #7
 80055e6:	f7ff fd6d 	bl	80050c4 <nRF24_ReadReg>
 80055ea:	4603      	mov	r3, r0
 80055ec:	105b      	asrs	r3, r3, #1
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6U) {
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	d816      	bhi.n	800562a <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_REG_RX_PW_P0 + pipe);
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	3311      	adds	r3, #17
 8005600:	b2db      	uxtb	r3, r3
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fd5e 	bl	80050c4 <nRF24_ReadReg>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d006      	beq.n	8005626 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	2061      	movs	r0, #97	@ 0x61
 8005622:	f7ff fda1 	bl	8005168 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	e003      	b.n	8005632 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0U;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8005630:	23ff      	movs	r3, #255	@ 0xff
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <nRF24_LL_RW>:

// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t nRF24_LL_RW(uint8_t data) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af02      	add	r7, sp, #8
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
	 // Wait until TX buffer is empty
	uint8_t* pRxData = {0,};
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &data, pRxData, 1, 100);
 800564a:	1df9      	adds	r1, r7, #7
 800564c:	2364      	movs	r3, #100	@ 0x64
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	2301      	movs	r3, #1
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4804      	ldr	r0, [pc, #16]	@ (8005668 <nRF24_LL_RW+0x2c>)
 8005656:	f7fd fe44 	bl	80032e2 <HAL_SPI_TransmitReceive>
	// Return received byte
	return *pRxData;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	781b      	ldrb	r3, [r3, #0]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000090 	.word	0x20000090

0800566c <nRF24_CE_L>:

void nRF24_CE_L(void){
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	2110      	movs	r1, #16
 8005674:	4802      	ldr	r0, [pc, #8]	@ (8005680 <nRF24_CE_L+0x14>)
 8005676:	f7fd f8fb 	bl	8002870 <HAL_GPIO_WritePin>
}
 800567a:	bf00      	nop
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40020800 	.word	0x40020800

08005684 <nRF24_CE_H>:

void nRF24_CE_H(void){
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8005688:	2201      	movs	r2, #1
 800568a:	2110      	movs	r1, #16
 800568c:	4802      	ldr	r0, [pc, #8]	@ (8005698 <nRF24_CE_H+0x14>)
 800568e:	f7fd f8ef 	bl	8002870 <HAL_GPIO_WritePin>
}
 8005692:	bf00      	nop
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40020800 	.word	0x40020800

0800569c <nRF24_CSN_L>:


void nRF24_CSN_L(void){
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 80056a0:	2200      	movs	r2, #0
 80056a2:	2110      	movs	r1, #16
 80056a4:	4802      	ldr	r0, [pc, #8]	@ (80056b0 <nRF24_CSN_L+0x14>)
 80056a6:	f7fd f8e3 	bl	8002870 <HAL_GPIO_WritePin>
}
 80056aa:	bf00      	nop
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40020000 	.word	0x40020000

080056b4 <nRF24_CSN_H>:
void nRF24_CSN_H(void){
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80056b8:	2201      	movs	r2, #1
 80056ba:	2110      	movs	r1, #16
 80056bc:	4802      	ldr	r0, [pc, #8]	@ (80056c8 <nRF24_CSN_H+0x14>)
 80056be:	f7fd f8d7 	bl	8002870 <HAL_GPIO_WritePin>
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40020000 	.word	0x40020000

080056cc <memset>:
 80056cc:	4402      	add	r2, r0
 80056ce:	4603      	mov	r3, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d100      	bne.n	80056d6 <memset+0xa>
 80056d4:	4770      	bx	lr
 80056d6:	f803 1b01 	strb.w	r1, [r3], #1
 80056da:	e7f9      	b.n	80056d0 <memset+0x4>

080056dc <__libc_init_array>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4d0d      	ldr	r5, [pc, #52]	@ (8005714 <__libc_init_array+0x38>)
 80056e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005718 <__libc_init_array+0x3c>)
 80056e2:	1b64      	subs	r4, r4, r5
 80056e4:	10a4      	asrs	r4, r4, #2
 80056e6:	2600      	movs	r6, #0
 80056e8:	42a6      	cmp	r6, r4
 80056ea:	d109      	bne.n	8005700 <__libc_init_array+0x24>
 80056ec:	4d0b      	ldr	r5, [pc, #44]	@ (800571c <__libc_init_array+0x40>)
 80056ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005720 <__libc_init_array+0x44>)
 80056f0:	f000 f818 	bl	8005724 <_init>
 80056f4:	1b64      	subs	r4, r4, r5
 80056f6:	10a4      	asrs	r4, r4, #2
 80056f8:	2600      	movs	r6, #0
 80056fa:	42a6      	cmp	r6, r4
 80056fc:	d105      	bne.n	800570a <__libc_init_array+0x2e>
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	f855 3b04 	ldr.w	r3, [r5], #4
 8005704:	4798      	blx	r3
 8005706:	3601      	adds	r6, #1
 8005708:	e7ee      	b.n	80056e8 <__libc_init_array+0xc>
 800570a:	f855 3b04 	ldr.w	r3, [r5], #4
 800570e:	4798      	blx	r3
 8005710:	3601      	adds	r6, #1
 8005712:	e7f2      	b.n	80056fa <__libc_init_array+0x1e>
 8005714:	08005760 	.word	0x08005760
 8005718:	08005760 	.word	0x08005760
 800571c:	08005760 	.word	0x08005760
 8005720:	08005764 	.word	0x08005764

08005724 <_init>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr

08005730 <_fini>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr
