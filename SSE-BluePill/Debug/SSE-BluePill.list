
SSE-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003e10  08003e10  00004e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed0  08003ed0  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003ed0  08003ed0  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ed0  08003ed0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed0  08003ed0  00004ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003ed8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000014  08003eec  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003eec  00005168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fabe  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df5  00000000  00000000  00014afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  000178f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d74  00000000  00000000  00018a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4e1  00000000  00000000  000197f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fce  00000000  00000000  00033cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d968  00000000  00000000  0004aca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d860b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d4  00000000  00000000  000d8650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dce24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003df8 	.word	0x08003df8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003df8 	.word	0x08003df8

0800014c <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	4a13      	ldr	r2, [pc, #76]	@ (80001ac <I2C_LCD_ExpanderWrite+0x60>)
 8000160:	005b      	lsls	r3, r3, #1
 8000162:	4413      	add	r3, r2
 8000164:	785a      	ldrb	r2, [r3, #1]
 8000166:	79bb      	ldrb	r3, [r7, #6]
 8000168:	4313      	orrs	r3, r2
 800016a:	b2db      	uxtb	r3, r3
 800016c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 800016e:	79fa      	ldrb	r2, [r7, #7]
 8000170:	490f      	ldr	r1, [pc, #60]	@ (80001b0 <I2C_LCD_ExpanderWrite+0x64>)
 8000172:	4613      	mov	r3, r2
 8000174:	005b      	lsls	r3, r3, #1
 8000176:	4413      	add	r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	3304      	adds	r3, #4
 800017e:	6818      	ldr	r0, [r3, #0]
 8000180:	79fa      	ldrb	r2, [r7, #7]
 8000182:	490b      	ldr	r1, [pc, #44]	@ (80001b0 <I2C_LCD_ExpanderWrite+0x64>)
 8000184:	4613      	mov	r3, r2
 8000186:	005b      	lsls	r3, r3, #1
 8000188:	4413      	add	r3, r2
 800018a:	009b      	lsls	r3, r3, #2
 800018c:	440b      	add	r3, r1
 800018e:	3308      	adds	r3, #8
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	005b      	lsls	r3, r3, #1
 8000194:	b299      	uxth	r1, r3
 8000196:	f107 020f 	add.w	r2, r7, #15
 800019a:	2364      	movs	r3, #100	@ 0x64
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2301      	movs	r3, #1
 80001a0:	f001 fc2c 	bl	80019fc <HAL_I2C_Master_Transmit>
}
 80001a4:	bf00      	nop
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	20000030 	.word	0x20000030
 80001b0:	08003e68 	.word	0x08003e68

080001b4 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	460a      	mov	r2, r1
 80001be:	71fb      	strb	r3, [r7, #7]
 80001c0:	4613      	mov	r3, r2
 80001c2:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 80001c4:	79bb      	ldrb	r3, [r7, #6]
 80001c6:	f043 0304 	orr.w	r3, r3, #4
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	4611      	mov	r1, r2
 80001d0:	4618      	mov	r0, r3
 80001d2:	f7ff ffbb 	bl	800014c <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 80001d6:	4b22      	ldr	r3, [pc, #136]	@ (8000260 <I2C_LCD_EnPulse+0xac>)
 80001d8:	689b      	ldr	r3, [r3, #8]
 80001da:	617b      	str	r3, [r7, #20]
 80001dc:	4b21      	ldr	r3, [pc, #132]	@ (8000264 <I2C_LCD_EnPulse+0xb0>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a21      	ldr	r2, [pc, #132]	@ (8000268 <I2C_LCD_EnPulse+0xb4>)
 80001e2:	fba2 2303 	umull	r2, r3, r2, r3
 80001e6:	0c9b      	lsrs	r3, r3, #18
 80001e8:	005a      	lsls	r2, r3, #1
 80001ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000264 <I2C_LCD_EnPulse+0xb0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	491e      	ldr	r1, [pc, #120]	@ (8000268 <I2C_LCD_EnPulse+0xb4>)
 80001f0:	fba1 1303 	umull	r1, r3, r1, r3
 80001f4:	0c9b      	lsrs	r3, r3, #18
 80001f6:	085b      	lsrs	r3, r3, #1
 80001f8:	1ad3      	subs	r3, r2, r3
 80001fa:	613b      	str	r3, [r7, #16]
 80001fc:	4b18      	ldr	r3, [pc, #96]	@ (8000260 <I2C_LCD_EnPulse+0xac>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	697a      	ldr	r2, [r7, #20]
 8000202:	1ad3      	subs	r3, r2, r3
 8000204:	693a      	ldr	r2, [r7, #16]
 8000206:	429a      	cmp	r2, r3
 8000208:	d8f8      	bhi.n	80001fc <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800020a:	79bb      	ldrb	r3, [r7, #6]
 800020c:	f023 0304 	bic.w	r3, r3, #4
 8000210:	b2da      	uxtb	r2, r3
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	4611      	mov	r1, r2
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ff98 	bl	800014c <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 800021c:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <I2C_LCD_EnPulse+0xac>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	4b10      	ldr	r3, [pc, #64]	@ (8000264 <I2C_LCD_EnPulse+0xb0>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a10      	ldr	r2, [pc, #64]	@ (8000268 <I2C_LCD_EnPulse+0xb4>)
 8000228:	fba2 2303 	umull	r2, r3, r2, r3
 800022c:	0c9b      	lsrs	r3, r3, #18
 800022e:	2232      	movs	r2, #50	@ 0x32
 8000230:	fb03 f202 	mul.w	r2, r3, r2
 8000234:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <I2C_LCD_EnPulse+0xb0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	490b      	ldr	r1, [pc, #44]	@ (8000268 <I2C_LCD_EnPulse+0xb4>)
 800023a:	fba1 1303 	umull	r1, r3, r1, r3
 800023e:	0c9b      	lsrs	r3, r3, #18
 8000240:	085b      	lsrs	r3, r3, #1
 8000242:	1ad3      	subs	r3, r2, r3
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <I2C_LCD_EnPulse+0xac>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	1ad3      	subs	r3, r2, r3
 800024e:	68ba      	ldr	r2, [r7, #8]
 8000250:	429a      	cmp	r2, r3
 8000252:	d8f8      	bhi.n	8000246 <I2C_LCD_EnPulse+0x92>
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	3718      	adds	r7, #24
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	e000e010 	.word	0xe000e010
 8000264:	20000008 	.word	0x20000008
 8000268:	431bde83 	.word	0x431bde83

0800026c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	460a      	mov	r2, r1
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4611      	mov	r1, r2
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ff62 	bl	800014c <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8000288:	79ba      	ldrb	r2, [r7, #6]
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4611      	mov	r1, r2
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ff90 	bl	80001b4 <I2C_LCD_EnPulse>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
 80002a6:	460b      	mov	r3, r1
 80002a8:	71bb      	strb	r3, [r7, #6]
 80002aa:	4613      	mov	r3, r2
 80002ac:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	f023 030f 	bic.w	r3, r3, #15
 80002b4:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 80002bc:	7bfa      	ldrb	r2, [r7, #15]
 80002be:	797b      	ldrb	r3, [r7, #5]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	4611      	mov	r1, r2
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ffcf 	bl	800026c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 80002ce:	7bba      	ldrb	r2, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	4313      	orrs	r3, r2
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	4611      	mov	r1, r2
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ffc6 	bl	800026c <I2C_LCD_Write4Bits>
}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	460a      	mov	r2, r1
 80002f2:	71fb      	strb	r3, [r7, #7]
 80002f4:	4613      	mov	r3, r2
 80002f6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80002f8:	79b9      	ldrb	r1, [r7, #6]
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2200      	movs	r2, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffcc 	bl	800029c <I2C_LCD_Send>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 800031c:	79b9      	ldrb	r1, [r7, #6]
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2201      	movs	r2, #1
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ffba 	bl	800029c <I2C_LCD_Send>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	@ 0x28
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800033a:	bf00      	nop
 800033c:	f000 fefa 	bl	8001134 <HAL_GetTick>
 8000340:	4603      	mov	r3, r0
 8000342:	2b31      	cmp	r3, #49	@ 0x31
 8000344:	d9fa      	bls.n	800033c <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2130      	movs	r1, #48	@ 0x30
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ffcc 	bl	80002e8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000350:	2300      	movs	r3, #0
 8000352:	627b      	str	r3, [r7, #36]	@ 0x24
 8000354:	e01f      	b.n	8000396 <I2C_LCD_Init+0x66>
 8000356:	4b4b      	ldr	r3, [pc, #300]	@ (8000484 <I2C_LCD_Init+0x154>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	4b4a      	ldr	r3, [pc, #296]	@ (8000488 <I2C_LCD_Init+0x158>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a4a      	ldr	r2, [pc, #296]	@ (800048c <I2C_LCD_Init+0x15c>)
 8000362:	fba2 2303 	umull	r2, r3, r2, r3
 8000366:	0c9b      	lsrs	r3, r3, #18
 8000368:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800036c:	fb03 f202 	mul.w	r2, r3, r2
 8000370:	4b45      	ldr	r3, [pc, #276]	@ (8000488 <I2C_LCD_Init+0x158>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4945      	ldr	r1, [pc, #276]	@ (800048c <I2C_LCD_Init+0x15c>)
 8000376:	fba1 1303 	umull	r1, r3, r1, r3
 800037a:	0c9b      	lsrs	r3, r3, #18
 800037c:	085b      	lsrs	r3, r3, #1
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	4b40      	ldr	r3, [pc, #256]	@ (8000484 <I2C_LCD_Init+0x154>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	429a      	cmp	r2, r3
 800038e:	d8f8      	bhi.n	8000382 <I2C_LCD_Init+0x52>
 8000390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000392:	3301      	adds	r3, #1
 8000394:	627b      	str	r3, [r7, #36]	@ 0x24
 8000396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000398:	2b04      	cmp	r3, #4
 800039a:	d9dc      	bls.n	8000356 <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	2130      	movs	r1, #48	@ 0x30
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ffa1 	bl	80002e8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80003a6:	2300      	movs	r3, #0
 80003a8:	623b      	str	r3, [r7, #32]
 80003aa:	e01f      	b.n	80003ec <I2C_LCD_Init+0xbc>
 80003ac:	4b35      	ldr	r3, [pc, #212]	@ (8000484 <I2C_LCD_Init+0x154>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	4b35      	ldr	r3, [pc, #212]	@ (8000488 <I2C_LCD_Init+0x158>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a35      	ldr	r2, [pc, #212]	@ (800048c <I2C_LCD_Init+0x15c>)
 80003b8:	fba2 2303 	umull	r2, r3, r2, r3
 80003bc:	0c9b      	lsrs	r3, r3, #18
 80003be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003c2:	fb03 f202 	mul.w	r2, r3, r2
 80003c6:	4b30      	ldr	r3, [pc, #192]	@ (8000488 <I2C_LCD_Init+0x158>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4930      	ldr	r1, [pc, #192]	@ (800048c <I2C_LCD_Init+0x15c>)
 80003cc:	fba1 1303 	umull	r1, r3, r1, r3
 80003d0:	0c9b      	lsrs	r3, r3, #18
 80003d2:	085b      	lsrs	r3, r3, #1
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	613b      	str	r3, [r7, #16]
 80003d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000484 <I2C_LCD_Init+0x154>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	1ad3      	subs	r3, r2, r3
 80003e0:	693a      	ldr	r2, [r7, #16]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d8f8      	bhi.n	80003d8 <I2C_LCD_Init+0xa8>
 80003e6:	6a3b      	ldr	r3, [r7, #32]
 80003e8:	3301      	adds	r3, #1
 80003ea:	623b      	str	r3, [r7, #32]
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d9dc      	bls.n	80003ac <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2130      	movs	r1, #48	@ 0x30
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff76 	bl	80002e8 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80003fc:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <I2C_LCD_Init+0x154>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	61fb      	str	r3, [r7, #28]
 8000402:	4b21      	ldr	r3, [pc, #132]	@ (8000488 <I2C_LCD_Init+0x158>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a21      	ldr	r2, [pc, #132]	@ (800048c <I2C_LCD_Init+0x15c>)
 8000408:	fba2 2303 	umull	r2, r3, r2, r3
 800040c:	0c9b      	lsrs	r3, r3, #18
 800040e:	2296      	movs	r2, #150	@ 0x96
 8000410:	fb03 f202 	mul.w	r2, r3, r2
 8000414:	4b1c      	ldr	r3, [pc, #112]	@ (8000488 <I2C_LCD_Init+0x158>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	491c      	ldr	r1, [pc, #112]	@ (800048c <I2C_LCD_Init+0x15c>)
 800041a:	fba1 1303 	umull	r1, r3, r1, r3
 800041e:	0c9b      	lsrs	r3, r3, #18
 8000420:	085b      	lsrs	r3, r3, #1
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	61bb      	str	r3, [r7, #24]
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <I2C_LCD_Init+0x154>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	69fa      	ldr	r2, [r7, #28]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	69ba      	ldr	r2, [r7, #24]
 8000430:	429a      	cmp	r2, r3
 8000432:	d8f8      	bhi.n	8000426 <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2102      	movs	r1, #2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff55 	bl	80002e8 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2128      	movs	r1, #40	@ 0x28
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff50 	bl	80002e8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	210c      	movs	r1, #12
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff4b 	bl	80002e8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2106      	movs	r1, #6
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff46 	bl	80002e8 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	4a0c      	ldr	r2, [pc, #48]	@ (8000490 <I2C_LCD_Init+0x160>)
 8000460:	2104      	movs	r1, #4
 8000462:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	4a09      	ldr	r2, [pc, #36]	@ (8000490 <I2C_LCD_Init+0x160>)
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	4413      	add	r3, r2
 800046e:	2208      	movs	r2, #8
 8000470:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f80d 	bl	8000494 <I2C_LCD_Clear>
}
 800047a:	bf00      	nop
 800047c:	3728      	adds	r7, #40	@ 0x28
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	e000e010 	.word	0xe000e010
 8000488:	20000008 	.word	0x20000008
 800048c:	431bde83 	.word	0x431bde83
 8000490:	20000030 	.word	0x20000030

08000494 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2101      	movs	r1, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff20 	bl	80002e8 <I2C_LCD_Cmd>
    DELAY_MS(5);
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e01f      	b.n	80004ee <I2C_LCD_Clear+0x5a>
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <I2C_LCD_Clear+0x6c>)
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <I2C_LCD_Clear+0x70>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a13      	ldr	r2, [pc, #76]	@ (8000508 <I2C_LCD_Clear+0x74>)
 80004ba:	fba2 2303 	umull	r2, r3, r2, r3
 80004be:	0c9b      	lsrs	r3, r3, #18
 80004c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004c4:	fb03 f202 	mul.w	r2, r3, r2
 80004c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <I2C_LCD_Clear+0x70>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	490e      	ldr	r1, [pc, #56]	@ (8000508 <I2C_LCD_Clear+0x74>)
 80004ce:	fba1 1303 	umull	r1, r3, r1, r3
 80004d2:	0c9b      	lsrs	r3, r3, #18
 80004d4:	085b      	lsrs	r3, r3, #1
 80004d6:	1ad3      	subs	r3, r2, r3
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <I2C_LCD_Clear+0x6c>)
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	693a      	ldr	r2, [r7, #16]
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d8f8      	bhi.n	80004da <I2C_LCD_Clear+0x46>
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	3301      	adds	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d9dc      	bls.n	80004ae <I2C_LCD_Clear+0x1a>
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	e000e010 	.word	0xe000e010
 8000504:	20000008 	.word	0x20000008
 8000508:	431bde83 	.word	0x431bde83

0800050c <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(5);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
 8000516:	460b      	mov	r3, r1
 8000518:	71bb      	strb	r3, [r7, #6]
 800051a:	4613      	mov	r3, r2
 800051c:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <I2C_LCD_SetCursor+0x7c>)
 8000520:	f107 0408 	add.w	r4, r7, #8
 8000524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800052a:	79fa      	ldrb	r2, [r7, #7]
 800052c:	4917      	ldr	r1, [pc, #92]	@ (800058c <I2C_LCD_SetCursor+0x80>)
 800052e:	4613      	mov	r3, r2
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4413      	add	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	330a      	adds	r3, #10
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	797a      	ldrb	r2, [r7, #5]
 800053e:	429a      	cmp	r2, r3
 8000540:	d90a      	bls.n	8000558 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8000542:	79fa      	ldrb	r2, [r7, #7]
 8000544:	4911      	ldr	r1, [pc, #68]	@ (800058c <I2C_LCD_SetCursor+0x80>)
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	440b      	add	r3, r1
 8000550:	330a      	adds	r3, #10
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3b01      	subs	r3, #1
 8000556:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8000558:	797b      	ldrb	r3, [r7, #5]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	3318      	adds	r3, #24
 800055e:	443b      	add	r3, r7
 8000560:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000564:	b2da      	uxtb	r2, r3
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	4413      	add	r3, r2
 800056a:	b2db      	uxtb	r3, r3
 800056c:	b25b      	sxtb	r3, r3
 800056e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000572:	b25b      	sxtb	r3, r3
 8000574:	b2da      	uxtb	r2, r3
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff feb4 	bl	80002e8 <I2C_LCD_Cmd>
}
 8000580:	bf00      	nop
 8000582:	371c      	adds	r7, #28
 8000584:	46bd      	mov	sp, r7
 8000586:	bd90      	pop	{r4, r7, pc}
 8000588:	08003e10 	.word	0x08003e10
 800058c:	08003e68 	.word	0x08003e68

08000590 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 800059c:	e008      	b.n	80005b0 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	603a      	str	r2, [r7, #0]
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff feae 	bl	800030c <I2C_LCD_Data>
    while (*Str)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1f2      	bne.n	800059e <I2C_LCD_WriteString+0xe>
    }
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <HAL_TIM_IC_CaptureCallback>:
static int16_t bsp_count = 0;
static int16_t direction = 0;
static int16_t speed = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

	counter = __HAL_TIM_GET_COUNTER(htim);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d2:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <HAL_TIM_IC_CaptureCallback+0x60>)
 80005d4:	6013      	str	r3, [r2, #0]
	bsp_count = (int16_t) counter;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <HAL_TIM_IC_CaptureCallback+0x60>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	b21a      	sxth	r2, r3
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005de:	801a      	strh	r2, [r3, #0]

	if(bsp_count > previous_count){
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <HAL_TIM_IC_CaptureCallback+0x68>)
 80005e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dd03      	ble.n	80005f8 <HAL_TIM_IC_CaptureCallback+0x34>
		direction = ENCODER_DIRECTION_RIGHT;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	801a      	strh	r2, [r3, #0]
 80005f6:	e00b      	b.n	8000610 <HAL_TIM_IC_CaptureCallback+0x4c>
	}
	else if(bsp_count < previous_count){
 80005f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000604:	429a      	cmp	r2, r3
 8000606:	da03      	bge.n	8000610 <HAL_TIM_IC_CaptureCallback+0x4c>
		direction = ENCODER_DIRECTION_LEFT;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800060a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800060e:	801a      	strh	r2, [r3, #0]
	}
	previous_count = bsp_count;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000612:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000616:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000618:	801a      	strh	r2, [r3, #0]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	20000034 	.word	0x20000034
 8000628:	2000003a 	.word	0x2000003a
 800062c:	20000038 	.word	0x20000038
 8000630:	2000003c 	.word	0x2000003c

08000634 <BSP_ENCODER_Init>:

void BSP_ENCODER_Init(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // For 2 channels
 8000638:	213c      	movs	r1, #60	@ 0x3c
 800063a:	4802      	ldr	r0, [pc, #8]	@ (8000644 <BSP_ENCODER_Init+0x10>)
 800063c:	f002 fcbb 	bl	8002fb6 <HAL_TIM_Encoder_Start_IT>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000010c 	.word	0x2000010c

08000648 <BSP_ENCODER_GetCount>:

inline int16_t BSP_ENCODER_GetCount(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	return bsp_count;
 800064c:	4b03      	ldr	r3, [pc, #12]	@ (800065c <BSP_ENCODER_GetCount+0x14>)
 800064e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	2000003a 	.word	0x2000003a

08000660 <BSP_ENCODER_GetDirection>:
		speed = (bsp_count - speed_count)*2; // speed in counts/sec
		speed_count = bsp_count;
	}
	return speed;
}
inline int16_t BSP_ENCODER_GetDirection(){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	return direction;
 8000664:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <BSP_ENCODER_GetDirection+0x14>)
 8000666:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000003c 	.word	0x2000003c

08000678 <BSP_ENCODER_GetSwitch>:
inline int16_t BSP_ENCODER_GetSwitch(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ENCODER_PORT, ENCODER_PIN);
 800067c:	2104      	movs	r1, #4
 800067e:	4803      	ldr	r0, [pc, #12]	@ (800068c <BSP_ENCODER_GetSwitch+0x14>)
 8000680:	f001 f818 	bl	80016b4 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	b21b      	sxth	r3, r3
}
 8000688:	4618      	mov	r0, r3
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40010800 	.word	0x40010800

08000690 <Initializing>:
#include "bsp_lcd.h"

extern uint8_t motion[5];

void Initializing(BSP_LCD_SetupParams_TypeDef *params){
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	char time[5];
	BSP_LCD_SendMessage("Initializing: ", 0, 0, true);
 8000698:	2301      	movs	r3, #1
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <Initializing+0x44>)
 80006a0:	f000 f84d 	bl	800073e <BSP_LCD_SendMessage>
 	itoa(params->setup_time - *(params->seconds), time, 10);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	461a      	mov	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	f107 0108 	add.w	r1, r7, #8
 80006b6:	220a      	movs	r2, #10
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 fb2d 	bl	8003d18 <itoa>
	BSP_LCD_SendMessage(time, 0, 1, false);
 80006be:	f107 0008 	add.w	r0, r7, #8
 80006c2:	2300      	movs	r3, #0
 80006c4:	2201      	movs	r2, #1
 80006c6:	2100      	movs	r1, #0
 80006c8:	f000 f839 	bl	800073e <BSP_LCD_SendMessage>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08003e20 	.word	0x08003e20

080006d8 <BSP_LCD_Init>:

void BSP_LCD_Init(BSP_LCD_SetupParams_TypeDef *params){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	I2C_LCD_Init(LCD);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fe25 	bl	8000330 <I2C_LCD_Init>
	  while(params->condition()){
 80006e6:	e006      	b.n	80006f6 <BSP_LCD_Init+0x1e>
		  Initializing(params);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ffd1 	bl	8000690 <Initializing>
		  HAL_Delay(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f2:	f000 fd29 	bl	8001148 <HAL_Delay>
	  while(params->condition()){
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4798      	blx	r3
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1f2      	bne.n	80006e8 <BSP_LCD_Init+0x10>
	  }
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <BSP_LCD_Clear>:


void BSP_LCD_Clear(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	I2C_LCD_Clear(LCD);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff febf 	bl	8000494 <I2C_LCD_Clear>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <BSP_LCD_SetCursor>:

void BSP_LCD_SetCursor(uint8_t col, uint8_t row){
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	460a      	mov	r2, r1
 8000724:	71fb      	strb	r3, [r7, #7]
 8000726:	4613      	mov	r3, r2
 8000728:	71bb      	strb	r3, [r7, #6]
 	I2C_LCD_SetCursor(LCD, col, row);
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4619      	mov	r1, r3
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff feeb 	bl	800050c <I2C_LCD_SetCursor>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <BSP_LCD_SendMessage>:

void BSP_LCD_SendMessage(char* message, uint8_t col, uint8_t row, bool clear){
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	4608      	mov	r0, r1
 8000748:	4611      	mov	r1, r2
 800074a:	461a      	mov	r2, r3
 800074c:	4603      	mov	r3, r0
 800074e:	70fb      	strb	r3, [r7, #3]
 8000750:	460b      	mov	r3, r1
 8000752:	70bb      	strb	r3, [r7, #2]
 8000754:	4613      	mov	r3, r2
 8000756:	707b      	strb	r3, [r7, #1]
	if(clear){
 8000758:	787b      	ldrb	r3, [r7, #1]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <BSP_LCD_SendMessage+0x24>
		BSP_LCD_Clear();
 800075e:	f7ff ffd5 	bl	800070c <BSP_LCD_Clear>
	}
	BSP_LCD_SetCursor(col, row);
 8000762:	78ba      	ldrb	r2, [r7, #2]
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffd6 	bl	800071a <BSP_LCD_SetCursor>
 	I2C_LCD_WriteString(LCD, message);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff ff0d 	bl	8000590 <I2C_LCD_WriteString>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	4b51      	ldr	r3, [pc, #324]	@ (80008dc <MX_GPIO_Init+0x15c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a50      	ldr	r2, [pc, #320]	@ (80008dc <MX_GPIO_Init+0x15c>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b4e      	ldr	r3, [pc, #312]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ac:	4b4b      	ldr	r3, [pc, #300]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a4a      	ldr	r2, [pc, #296]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b48      	ldr	r3, [pc, #288]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b45      	ldr	r3, [pc, #276]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a44      	ldr	r2, [pc, #272]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b42      	ldr	r3, [pc, #264]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	4b3f      	ldr	r3, [pc, #252]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a3e      	ldr	r2, [pc, #248]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b3c      	ldr	r3, [pc, #240]	@ (80008dc <MX_GPIO_Init+0x15c>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007fa:	4839      	ldr	r0, [pc, #228]	@ (80008e0 <MX_GPIO_Init+0x160>)
 80007fc:	f000 ff71 	bl	80016e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|CE_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000806:	4837      	ldr	r0, [pc, #220]	@ (80008e4 <MX_GPIO_Init+0x164>)
 8000808:	f000 ff6b 	bl	80016e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000812:	4835      	ldr	r0, [pc, #212]	@ (80008e8 <MX_GPIO_Init+0x168>)
 8000814:	f000 ff65 	bl	80016e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2302      	movs	r3, #2
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	4619      	mov	r1, r3
 8000830:	482b      	ldr	r0, [pc, #172]	@ (80008e0 <MX_GPIO_Init+0x160>)
 8000832:	f000 fdbb 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder_Switch_Pin;
 8000836:	2304      	movs	r3, #4
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_Switch_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	4827      	ldr	r0, [pc, #156]	@ (80008e8 <MX_GPIO_Init+0x168>)
 800084a:	f000 fdaf 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800084e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	481f      	ldr	r0, [pc, #124]	@ (80008e4 <MX_GPIO_Init+0x164>)
 8000868:	f000 fda0 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 800086c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	4817      	ldr	r0, [pc, #92]	@ (80008e4 <MX_GPIO_Init+0x164>)
 8000886:	f000 fd91 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CSN_Pin;
 800088a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CSN_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_GPIO_Init+0x168>)
 80008a4:	f000 fd82 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80008a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_GPIO_Init+0x16c>)
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480a      	ldr	r0, [pc, #40]	@ (80008e8 <MX_GPIO_Init+0x168>)
 80008be:	f000 fd75 	bl	80013ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2028      	movs	r0, #40	@ 0x28
 80008c8:	f000 fd39 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008cc:	2028      	movs	r0, #40	@ 0x28
 80008ce:	f000 fd52 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	40010800 	.word	0x40010800
 80008ec:	10210000 	.word	0x10210000

080008f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_I2C1_Init+0x50>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	@ (8000944 <MX_I2C1_Init+0x54>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_I2C1_Init+0x50>)
 80008fc:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <MX_I2C1_Init+0x58>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_I2C1_Init+0x50>)
 800090e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000912:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_I2C1_Init+0x50>)
 800092e:	f000 ff21 	bl	8001774 <HAL_I2C_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000938:	f000 f993 	bl	8000c62 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000040 	.word	0x20000040
 8000944:	40005400 	.word	0x40005400
 8000948:	00061a80 	.word	0x00061a80

0800094c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a15      	ldr	r2, [pc, #84]	@ (80009bc <HAL_I2C_MspInit+0x70>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d123      	bne.n	80009b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <HAL_I2C_MspInit+0x74>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a13      	ldr	r2, [pc, #76]	@ (80009c0 <HAL_I2C_MspInit+0x74>)
 8000972:	f043 0308 	orr.w	r3, r3, #8
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <HAL_I2C_MspInit+0x74>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000984:	23c0      	movs	r3, #192	@ 0xc0
 8000986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <HAL_I2C_MspInit+0x78>)
 8000998:	f000 fd08 	bl	80013ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_I2C_MspInit+0x74>)
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_I2C_MspInit+0x74>)
 80009a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009a6:	61d3      	str	r3, [r2, #28]
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <HAL_I2C_MspInit+0x74>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40005400 	.word	0x40005400
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <RetFalse>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rx_data[NRF24L01P_PAYLOAD_LENGTH] = {0,};
uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {0, 1, 2, 3, 4, 5, 6, 7};
bool RetFalse(){
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	return false;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
	...

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fb51 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f8c9 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f7ff fecb 	bl	8000780 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009ea:	f000 fa8d 	bl	8000f08 <MX_TIM2_Init>
  MX_I2C1_Init();
 80009ee:	f7ff ff7f 	bl	80008f0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80009f2:	f000 f93d 	bl	8000c70 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_SetupParams_TypeDef lcd_params;
  //lcd_params.condition = BSP_HCSR501_Ready;
  //lcd_params.setup_time = (uint8_t) HCSR501_SETUP_SECONDS + HCSR501_SETUP_MINUTES*60;
  //lcd_params.seconds = &motion[4];
  lcd_params.condition = RetFalse;
 80009f6:	4b55      	ldr	r3, [pc, #340]	@ (8000b4c <main+0x174>)
 80009f8:	60bb      	str	r3, [r7, #8]
  lcd_params.setup_time = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	733b      	strb	r3, [r7, #12]
  lcd_params.seconds = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]


  BSP_ENCODER_Init();
 8000a02:	f7ff fe17 	bl	8000634 <BSP_ENCODER_Init>
//  BSP_RC522_Init();
  BSP_LCD_Init(&lcd_params);
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fe64 	bl	80006d8 <BSP_LCD_Init>
  BSP_LCD_SendMessage("Hola", 0, 0, true);
 8000a10:	2301      	movs	r3, #1
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	484e      	ldr	r0, [pc, #312]	@ (8000b50 <main+0x178>)
 8000a18:	f7ff fe91 	bl	800073e <BSP_LCD_SendMessage>


  BSP_RF_Params_TypeDef rf_params = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	809a      	strh	r2, [r3, #4]
  rf_params.channel = NRF24L01P_CHANNEL;
 8000a24:	235a      	movs	r3, #90	@ 0x5a
 8000a26:	807b      	strh	r3, [r7, #2]
  rf_params.rate = NRF24L01P_RATE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	703b      	strb	r3, [r7, #0]
  rf_params.retransmit_count = NRF24L01P_RETRANSMIT_COUNT;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	713b      	strb	r3, [r7, #4]
  BSP_RF_Init(&rf_params);
 8000a30:	463b      	mov	r3, r7
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fd84 	bl	8003540 <BSP_RF_Init>
  BSP_RF_Sending();
 8000a38:	f002 fda4 	bl	8003584 <BSP_RF_Sending>
  HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a42:	4844      	ldr	r0, [pc, #272]	@ (8000b54 <main+0x17c>)
 8000a44:	f000 fe4d 	bl	80016e2 <HAL_GPIO_WritePin>
  uint8_t last_state = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	75fb      	strb	r3, [r7, #23]
  uint8_t waiting = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	75bb      	strb	r3, [r7, #22]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  button = BSP_ENCODER_GetSwitch();
 8000a50:	f7ff fe12 	bl	8000678 <BSP_ENCODER_GetSwitch>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4b3f      	ldr	r3, [pc, #252]	@ (8000b58 <main+0x180>)
 8000a5a:	801a      	strh	r2, [r3, #0]
	  if(button && waiting){
 8000a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b58 <main+0x180>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d037      	beq.n	8000ad4 <main+0xfc>
 8000a64:	7dbb      	ldrb	r3, [r7, #22]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d034      	beq.n	8000ad4 <main+0xfc>
		  tx_data[0] = BSP_ENCODER_GetDirection() > 0 ? 1 : 2;
 8000a6a:	f7ff fdf9 	bl	8000660 <BSP_ENCODER_GetDirection>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	dd01      	ble.n	8000a78 <main+0xa0>
 8000a74:	2201      	movs	r2, #1
 8000a76:	e000      	b.n	8000a7a <main+0xa2>
 8000a78:	2202      	movs	r2, #2
 8000a7a:	4b38      	ldr	r3, [pc, #224]	@ (8000b5c <main+0x184>)
 8000a7c:	701a      	strb	r2, [r3, #0]
		  tx_data[1] = (uint8_t) BSP_ENCODER_GetCount() & 0xFF; // 0..7
 8000a7e:	f7ff fde3 	bl	8000648 <BSP_ENCODER_GetCount>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <main+0x184>)
 8000a88:	705a      	strb	r2, [r3, #1]
		  tx_data[2] = (uint8_t) (BSP_ENCODER_GetCount() >> 8) & 0xFF;// 8..15
 8000a8a:	f7ff fddd 	bl	8000648 <BSP_ENCODER_GetCount>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	121b      	asrs	r3, r3, #8
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <main+0x184>)
 8000a98:	709a      	strb	r2, [r3, #2]
		  tx_data[3] = (uint8_t) (BSP_ENCODER_GetCount() >> 16) & 0xFF;// 16..23
 8000a9a:	f7ff fdd5 	bl	8000648 <BSP_ENCODER_GetCount>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	141b      	asrs	r3, r3, #16
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b5c <main+0x184>)
 8000aa6:	70da      	strb	r2, [r3, #3]
		  tx_data[4] = (uint8_t) (BSP_ENCODER_GetCount() >> 24) & 0xFF;// 24..31
 8000aa8:	f7ff fdce 	bl	8000648 <BSP_ENCODER_GetCount>
 8000aac:	4603      	mov	r3, r0
 8000aae:	161b      	asrs	r3, r3, #24
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <main+0x184>)
 8000ab4:	711a      	strb	r2, [r3, #4]
		  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000ab6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aba:	4826      	ldr	r0, [pc, #152]	@ (8000b54 <main+0x17c>)
 8000abc:	f000 fe29 	bl	8001712 <HAL_GPIO_TogglePin>
		  BSP_RF_SendMessage(tx_data);
 8000ac0:	4826      	ldr	r0, [pc, #152]	@ (8000b5c <main+0x184>)
 8000ac2:	f002 fd87 	bl	80035d4 <BSP_RF_SendMessage>
		  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000ac6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aca:	4822      	ldr	r0, [pc, #136]	@ (8000b54 <main+0x17c>)
 8000acc:	f000 fe21 	bl	8001712 <HAL_GPIO_TogglePin>
		  waiting = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	75bb      	strb	r3, [r7, #22]
	  }

	  if(handledInterruptsRF != toHandleInterruptsRF){
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <main+0x188>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <main+0x18c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d0b7      	beq.n	8000a50 <main+0x78>
		  handledInterruptsRF = toHandleInterruptsRF;
 8000ae0:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <main+0x18c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b60 <main+0x188>)
 8000ae6:	6013      	str	r3, [r2, #0]
		  if(rx_data[7] == 1 && last_state != 1){
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <main+0x190>)
 8000aea:	79db      	ldrb	r3, [r3, #7]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d10b      	bne.n	8000b08 <main+0x130>
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d008      	beq.n	8000b08 <main+0x130>
			  last_state = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	75fb      	strb	r3, [r7, #23]
			  BSP_LCD_SendMessage("No one there", 0, 0, true);
 8000afa:	2301      	movs	r3, #1
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	481a      	ldr	r0, [pc, #104]	@ (8000b6c <main+0x194>)
 8000b02:	f7ff fe1c 	bl	800073e <BSP_LCD_SendMessage>
 8000b06:	e01e      	b.n	8000b46 <main+0x16e>
		  }else if(rx_data[7] == 2 && last_state != 2){
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <main+0x190>)
 8000b0a:	79db      	ldrb	r3, [r3, #7]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d10b      	bne.n	8000b28 <main+0x150>
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d008      	beq.n	8000b28 <main+0x150>
			  last_state = 2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	75fb      	strb	r3, [r7, #23]
			  BSP_LCD_SendMessage("SOMEONE there", 0, 0, true);
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <main+0x198>)
 8000b22:	f7ff fe0c 	bl	800073e <BSP_LCD_SendMessage>
 8000b26:	e00e      	b.n	8000b46 <main+0x16e>
		  }else if(rx_data[7] == 0 && last_state != 0){
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <main+0x190>)
 8000b2a:	79db      	ldrb	r3, [r3, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10a      	bne.n	8000b46 <main+0x16e>
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d007      	beq.n	8000b46 <main+0x16e>
			  last_state = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	75fb      	strb	r3, [r7, #23]
			  BSP_LCD_SendMessage("No connection", 0, 0, true);
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <main+0x19c>)
 8000b42:	f7ff fdfc 	bl	800073e <BSP_LCD_SendMessage>
		  }
		  waiting = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	75bb      	strb	r3, [r7, #22]
	  button = BSP_ENCODER_GetSwitch();
 8000b4a:	e781      	b.n	8000a50 <main+0x78>
 8000b4c:	080009c9 	.word	0x080009c9
 8000b50:	08003e30 	.word	0x08003e30
 8000b54:	40011000 	.word	0x40011000
 8000b58:	2000009a 	.word	0x2000009a
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	2000009c 	.word	0x2000009c
 8000b64:	200000a0 	.word	0x200000a0
 8000b68:	200000a4 	.word	0x200000a4
 8000b6c:	08003e38 	.word	0x08003e38
 8000b70:	08003e48 	.word	0x08003e48
 8000b74:	08003e58 	.word	0x08003e58

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b090      	sub	sp, #64	@ 0x40
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	2228      	movs	r2, #40	@ 0x28
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 f90a 	bl	8003da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bac:	2302      	movs	r3, #2
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bb6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fa73 	bl	80020ac <HAL_RCC_OscConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bcc:	f000 f849 	bl	8000c62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2102      	movs	r1, #2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 fce0 	bl	80025b0 <HAL_RCC_ClockConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bf6:	f000 f834 	bl	8000c62 <Error_Handler>
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3740      	adds	r7, #64	@ 0x40
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <received_message>:

/* USER CODE BEGIN 4 */


void received_message()
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000c08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0c:	480a      	ldr	r0, [pc, #40]	@ (8000c38 <received_message+0x34>)
 8000c0e:	f000 fd80 	bl	8001712 <HAL_GPIO_TogglePin>
	toHandleInterruptsRF += BSP_RF_IrqHandler();
 8000c12:	f002 fcfd 	bl	8003610 <BSP_RF_IrqHandler>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <received_message+0x38>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <received_message+0x38>)
 8000c22:	6013      	str	r3, [r2, #0]
	BSP_RF_ReadData(rx_data);
 8000c24:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <received_message+0x3c>)
 8000c26:	f002 fd09 	bl	800363c <BSP_RF_ReadData>
	HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8000c2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c2e:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <received_message+0x34>)
 8000c30:	f000 fd6f 	bl	8001712 <HAL_GPIO_TogglePin>

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	200000a0 	.word	0x200000a0
 8000c40:	200000a4 	.word	0x200000a4

08000c44 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]
//	}
//	if(GPIO_Pin == HCSR501_PIN){
//		toHandleInterruptsLCD++;
//
//	}
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c54:	d101      	bne.n	8000c5a <HAL_GPIO_EXTI_Callback+0x16>
	{
		received_message();
 8000c56:	f7ff ffd5 	bl	8000c04 <received_message>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c66:	b672      	cpsid	i
}
 8000c68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6a:	bf00      	nop
 8000c6c:	e7fd      	b.n	8000c6a <Error_Handler+0x8>
	...

08000c70 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c74:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000c76:	4a18      	ldr	r2, [pc, #96]	@ (8000cd8 <MX_SPI2_Init+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000c7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ca0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000ca4:	2210      	movs	r2, #16
 8000ca6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000cbc:	220a      	movs	r2, #10
 8000cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <MX_SPI2_Init+0x64>)
 8000cc2:	f001 fdef 	bl	80028a4 <HAL_SPI_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ccc:	f7ff ffc9 	bl	8000c62 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000ac 	.word	0x200000ac
 8000cd8:	40003800 	.word	0x40003800

08000cdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <HAL_SPI_MspInit+0x8c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d131      	bne.n	8000d60 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <HAL_SPI_MspInit+0x90>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	@ (8000d6c <HAL_SPI_MspInit+0x90>)
 8000d02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d06:	61d3      	str	r3, [r2, #28]
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_SPI_MspInit+0x90>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_SPI_MspInit+0x90>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <HAL_SPI_MspInit+0x90>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_SPI_MspInit+0x90>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d2c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <HAL_SPI_MspInit+0x94>)
 8000d42:	f000 fb33 	bl	80013ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <HAL_SPI_MspInit+0x94>)
 8000d5c:	f000 fb26 	bl	80013ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40003800 	.word	0x40003800
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_MspInit+0x60>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_MspInit+0x60>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <NMI_Handler+0x4>

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <UsageFault_Handler+0x4>

08000e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	milliseconds++;
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <SysTick_Handler+0x98>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <SysTick_Handler+0x98>)
 8000e32:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f96c 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

	static uint16_t seconds = 0;
	static uint16_t milliseconds2 = 0;
	static uint16_t minutes = 0;
	milliseconds2++;
 8000e38:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <SysTick_Handler+0x9c>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <SysTick_Handler+0x9c>)
 8000e42:	801a      	strh	r2, [r3, #0]
	seconds += milliseconds2 / 1000;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <SysTick_Handler+0x9c>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec4 <SysTick_Handler+0xa0>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	099b      	lsrs	r3, r3, #6
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <SysTick_Handler+0xa4>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <SysTick_Handler+0xa4>)
 8000e5c:	801a      	strh	r2, [r3, #0]
	milliseconds2 %= 1000;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <SysTick_Handler+0x9c>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	4a18      	ldr	r2, [pc, #96]	@ (8000ec4 <SysTick_Handler+0xa0>)
 8000e64:	fba2 1203 	umull	r1, r2, r2, r3
 8000e68:	0992      	lsrs	r2, r2, #6
 8000e6a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e6e:	fb01 f202 	mul.w	r2, r1, r2
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <SysTick_Handler+0x9c>)
 8000e78:	801a      	strh	r2, [r3, #0]
	minutes = seconds / 60;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <SysTick_Handler+0xa4>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	4a13      	ldr	r2, [pc, #76]	@ (8000ecc <SysTick_Handler+0xa8>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	095b      	lsrs	r3, r3, #5
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <SysTick_Handler+0xac>)
 8000e8a:	801a      	strh	r2, [r3, #0]
	seconds %= 60;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <SysTick_Handler+0xa4>)
 8000e8e:	881a      	ldrh	r2, [r3, #0]
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <SysTick_Handler+0xa8>)
 8000e92:	fba3 1302 	umull	r1, r3, r3, r2
 8000e96:	0959      	lsrs	r1, r3, #5
 8000e98:	460b      	mov	r3, r1
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <SysTick_Handler+0xa4>)
 8000ea6:	801a      	strh	r2, [r3, #0]
	motion[4] = seconds;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <SysTick_Handler+0xa4>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <SysTick_Handler+0xb0>)
 8000eb0:	711a      	strb	r2, [r3, #4]
	if(minutes == HCSR501_SETUP_MINUTES && seconds == HCSR501_SETUP_SECONDS){
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <SysTick_Handler+0xac>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
//		__HAL_GPIO_EXTI_GENERATE_SWIT(GPIO_PIN_13);
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000104 	.word	0x20000104
 8000ec0:	20000106 	.word	0x20000106
 8000ec4:	10624dd3 	.word	0x10624dd3
 8000ec8:	20000108 	.word	0x20000108
 8000ecc:	88888889 	.word	0x88888889
 8000ed0:	2000010a 	.word	0x2000010a
 8000ed4:	20000094 	.word	0x20000094

08000ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <TIM2_IRQHandler+0x10>)
 8000ede:	f002 f918 	bl	8003112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000010c 	.word	0x2000010c

08000eec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000ef0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ef4:	f000 fc26 	bl	8001744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2224      	movs	r2, #36	@ 0x24
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 ff42 	bl	8003da0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f24:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_TIM2_Init+0xa4>)
 8000f26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_TIM2_Init+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <MX_TIM2_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <MX_TIM2_Init+0xa4>)
 8000f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_TIM2_Init+0xa4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_TIM2_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000f50:	2302      	movs	r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f54:	2301      	movs	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000f60:	2302      	movs	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f64:	2301      	movs	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	@ (8000fac <MX_TIM2_Init+0xa4>)
 8000f78:	f001 ff7b 	bl	8002e72 <HAL_TIM_Encoder_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f82:	f7ff fe6e 	bl	8000c62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	@ (8000fac <MX_TIM2_Init+0xa4>)
 8000f94:	f002 fa64 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f9e:	f7ff fe60 	bl	8000c62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	@ 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000010c 	.word	0x2000010c

08000fb0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fce:	d12b      	bne.n	8001028 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	4a16      	ldr	r2, [pc, #88]	@ (8001030 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	61d3      	str	r3, [r2, #28]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_TIM_Encoder_MspInit+0x80>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8001000:	2303      	movs	r3, #3
 8001002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	4808      	ldr	r0, [pc, #32]	@ (8001034 <HAL_TIM_Encoder_MspInit+0x84>)
 8001014:	f000 f9ca 	bl	80013ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	201c      	movs	r0, #28
 800101e:	f000 f98e 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001022:	201c      	movs	r0, #28
 8001024:	f000 f9a7 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800

08001038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001038:	f7ff ff60 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480b      	ldr	r0, [pc, #44]	@ (800106c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800103e:	490c      	ldr	r1, [pc, #48]	@ (8001070 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001040:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001054:	4c09      	ldr	r4, [pc, #36]	@ (800107c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001062:	f002 fea5 	bl	8003db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001066:	f7ff fcb7 	bl	80009d8 <main>
  bx lr
 800106a:	4770      	bx	lr
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001074:	08003ed8 	.word	0x08003ed8
  ldr r2, =_sbss
 8001078:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800107c:	20000168 	.word	0x20000168

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_Init+0x28>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_Init+0x28>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f947 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	200f      	movs	r0, #15
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fe68 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f95f 	bl	8001392 <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f927 	bl	800133e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000008 	.word	0x20000008
 8001108:	20000010 	.word	0x20000010
 800110c:	2000000c 	.word	0x2000000c

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a03      	ldr	r2, [pc, #12]	@ (8001130 <HAL_IncTick+0x20>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000010 	.word	0x20000010
 8001130:	20000154 	.word	0x20000154

08001134 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	@ (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000154 	.word	0x20000154

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff fff0 	bl	8001134 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffe0 	bl	8001134 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000010 	.word	0x20000010

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4906      	ldr	r1, [pc, #24]	@ (8001228 <__NVIC_EnableIRQ+0x34>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	@ (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff90 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff2d 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff42 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff35 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa2 	bl	80012e4 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b08b      	sub	sp, #44	@ 0x2c
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	e169      	b.n	8001694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c0:	2201      	movs	r2, #1
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	429a      	cmp	r2, r3
 80013da:	f040 8158 	bne.w	800168e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4a9a      	ldr	r2, [pc, #616]	@ (800164c <HAL_GPIO_Init+0x2a0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d05e      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 80013e8:	4a98      	ldr	r2, [pc, #608]	@ (800164c <HAL_GPIO_Init+0x2a0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d875      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 80013ee:	4a98      	ldr	r2, [pc, #608]	@ (8001650 <HAL_GPIO_Init+0x2a4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d058      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 80013f4:	4a96      	ldr	r2, [pc, #600]	@ (8001650 <HAL_GPIO_Init+0x2a4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d86f      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 80013fa:	4a96      	ldr	r2, [pc, #600]	@ (8001654 <HAL_GPIO_Init+0x2a8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d052      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 8001400:	4a94      	ldr	r2, [pc, #592]	@ (8001654 <HAL_GPIO_Init+0x2a8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d869      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 8001406:	4a94      	ldr	r2, [pc, #592]	@ (8001658 <HAL_GPIO_Init+0x2ac>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d04c      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 800140c:	4a92      	ldr	r2, [pc, #584]	@ (8001658 <HAL_GPIO_Init+0x2ac>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d863      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 8001412:	4a92      	ldr	r2, [pc, #584]	@ (800165c <HAL_GPIO_Init+0x2b0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d046      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 8001418:	4a90      	ldr	r2, [pc, #576]	@ (800165c <HAL_GPIO_Init+0x2b0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d85d      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 800141e:	2b12      	cmp	r3, #18
 8001420:	d82a      	bhi.n	8001478 <HAL_GPIO_Init+0xcc>
 8001422:	2b12      	cmp	r3, #18
 8001424:	d859      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 8001426:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <HAL_GPIO_Init+0x80>)
 8001428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142c:	080014a7 	.word	0x080014a7
 8001430:	08001481 	.word	0x08001481
 8001434:	08001493 	.word	0x08001493
 8001438:	080014d5 	.word	0x080014d5
 800143c:	080014db 	.word	0x080014db
 8001440:	080014db 	.word	0x080014db
 8001444:	080014db 	.word	0x080014db
 8001448:	080014db 	.word	0x080014db
 800144c:	080014db 	.word	0x080014db
 8001450:	080014db 	.word	0x080014db
 8001454:	080014db 	.word	0x080014db
 8001458:	080014db 	.word	0x080014db
 800145c:	080014db 	.word	0x080014db
 8001460:	080014db 	.word	0x080014db
 8001464:	080014db 	.word	0x080014db
 8001468:	080014db 	.word	0x080014db
 800146c:	080014db 	.word	0x080014db
 8001470:	08001489 	.word	0x08001489
 8001474:	0800149d 	.word	0x0800149d
 8001478:	4a79      	ldr	r2, [pc, #484]	@ (8001660 <HAL_GPIO_Init+0x2b4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147e:	e02c      	b.n	80014da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e029      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	3304      	adds	r3, #4
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e024      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	3308      	adds	r3, #8
 8001498:	623b      	str	r3, [r7, #32]
          break;
 800149a:	e01f      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	330c      	adds	r3, #12
 80014a2:	623b      	str	r3, [r7, #32]
          break;
 80014a4:	e01a      	b.n	80014dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ae:	2304      	movs	r3, #4
 80014b0:	623b      	str	r3, [r7, #32]
          break;
 80014b2:	e013      	b.n	80014dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d105      	bne.n	80014c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014bc:	2308      	movs	r3, #8
 80014be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	611a      	str	r2, [r3, #16]
          break;
 80014c6:	e009      	b.n	80014dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c8:	2308      	movs	r3, #8
 80014ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	615a      	str	r2, [r3, #20]
          break;
 80014d2:	e003      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x130>
          break;
 80014da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2bff      	cmp	r3, #255	@ 0xff
 80014e0:	d801      	bhi.n	80014e6 <HAL_GPIO_Init+0x13a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	e001      	b.n	80014ea <HAL_GPIO_Init+0x13e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3304      	adds	r3, #4
 80014ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2bff      	cmp	r3, #255	@ 0xff
 80014f0:	d802      	bhi.n	80014f8 <HAL_GPIO_Init+0x14c>
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	e002      	b.n	80014fe <HAL_GPIO_Init+0x152>
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	3b08      	subs	r3, #8
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	210f      	movs	r1, #15
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	401a      	ands	r2, r3
 8001510:	6a39      	ldr	r1, [r7, #32]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	431a      	orrs	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80b1 	beq.w	800168e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800152c:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <HAL_GPIO_Init+0x2b8>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a4c      	ldr	r2, [pc, #304]	@ (8001664 <HAL_GPIO_Init+0x2b8>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <HAL_GPIO_Init+0x2b8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001544:	4a48      	ldr	r2, [pc, #288]	@ (8001668 <HAL_GPIO_Init+0x2bc>)
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001550:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a40      	ldr	r2, [pc, #256]	@ (800166c <HAL_GPIO_Init+0x2c0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d013      	beq.n	8001598 <HAL_GPIO_Init+0x1ec>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a3f      	ldr	r2, [pc, #252]	@ (8001670 <HAL_GPIO_Init+0x2c4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d00d      	beq.n	8001594 <HAL_GPIO_Init+0x1e8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3e      	ldr	r2, [pc, #248]	@ (8001674 <HAL_GPIO_Init+0x2c8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d007      	beq.n	8001590 <HAL_GPIO_Init+0x1e4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3d      	ldr	r2, [pc, #244]	@ (8001678 <HAL_GPIO_Init+0x2cc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d101      	bne.n	800158c <HAL_GPIO_Init+0x1e0>
 8001588:	2303      	movs	r3, #3
 800158a:	e006      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 800158c:	2304      	movs	r3, #4
 800158e:	e004      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 8001590:	2302      	movs	r3, #2
 8001592:	e002      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 8001598:	2300      	movs	r3, #0
 800159a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800159c:	f002 0203 	and.w	r2, r2, #3
 80015a0:	0092      	lsls	r2, r2, #2
 80015a2:	4093      	lsls	r3, r2
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015aa:	492f      	ldr	r1, [pc, #188]	@ (8001668 <HAL_GPIO_Init+0x2bc>)
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	492c      	ldr	r1, [pc, #176]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4928      	ldr	r1, [pc, #160]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b23      	ldr	r3, [pc, #140]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4922      	ldr	r1, [pc, #136]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	43db      	mvns	r3, r3
 8001602:	491e      	ldr	r1, [pc, #120]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001604:	4013      	ands	r3, r2
 8001606:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001614:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4918      	ldr	r1, [pc, #96]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	43db      	mvns	r3, r3
 800162a:	4914      	ldr	r1, [pc, #80]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 800162c:	4013      	ands	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d021      	beq.n	8001680 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	490e      	ldr	r1, [pc, #56]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
 8001648:	e021      	b.n	800168e <HAL_GPIO_Init+0x2e2>
 800164a:	bf00      	nop
 800164c:	10320000 	.word	0x10320000
 8001650:	10310000 	.word	0x10310000
 8001654:	10220000 	.word	0x10220000
 8001658:	10210000 	.word	0x10210000
 800165c:	10120000 	.word	0x10120000
 8001660:	10110000 	.word	0x10110000
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	40010800 	.word	0x40010800
 8001670:	40010c00 	.word	0x40010c00
 8001674:	40011000 	.word	0x40011000
 8001678:	40011400 	.word	0x40011400
 800167c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_GPIO_Init+0x304>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4909      	ldr	r1, [pc, #36]	@ (80016b0 <HAL_GPIO_Init+0x304>)
 800168a:	4013      	ands	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f ae8e 	bne.w	80013c0 <HAL_GPIO_Init+0x14>
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	372c      	adds	r7, #44	@ 0x2c
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e001      	b.n	80016d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	807b      	strh	r3, [r7, #2]
 80016ee:	4613      	mov	r3, r2
 80016f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f2:	787b      	ldrb	r3, [r7, #1]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f8:	887a      	ldrh	r2, [r7, #2]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016fe:	e003      	b.n	8001708 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	041a      	lsls	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	611a      	str	r2, [r3, #16]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001724:	887a      	ldrh	r2, [r7, #2]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4013      	ands	r3, r2
 800172a:	041a      	lsls	r2, r3, #16
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43d9      	mvns	r1, r3
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	400b      	ands	r3, r1
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	611a      	str	r2, [r3, #16]
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fa6e 	bl	8000c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40010400 	.word	0x40010400

08001774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e12b      	b.n	80019de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff f8d6 	bl	800094c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2224      	movs	r2, #36	@ 0x24
 80017a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d8:	f001 f832 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80017dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a81      	ldr	r2, [pc, #516]	@ (80019e8 <HAL_I2C_Init+0x274>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d807      	bhi.n	80017f8 <HAL_I2C_Init+0x84>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a80      	ldr	r2, [pc, #512]	@ (80019ec <HAL_I2C_Init+0x278>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	bf94      	ite	ls
 80017f0:	2301      	movls	r3, #1
 80017f2:	2300      	movhi	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	e006      	b.n	8001806 <HAL_I2C_Init+0x92>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4a7d      	ldr	r2, [pc, #500]	@ (80019f0 <HAL_I2C_Init+0x27c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	bf94      	ite	ls
 8001800:	2301      	movls	r3, #1
 8001802:	2300      	movhi	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0e7      	b.n	80019de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4a78      	ldr	r2, [pc, #480]	@ (80019f4 <HAL_I2C_Init+0x280>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9b      	lsrs	r3, r3, #18
 8001818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	430a      	orrs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4a6a      	ldr	r2, [pc, #424]	@ (80019e8 <HAL_I2C_Init+0x274>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d802      	bhi.n	8001848 <HAL_I2C_Init+0xd4>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3301      	adds	r3, #1
 8001846:	e009      	b.n	800185c <HAL_I2C_Init+0xe8>
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	4a69      	ldr	r2, [pc, #420]	@ (80019f8 <HAL_I2C_Init+0x284>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	3301      	adds	r3, #1
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	430b      	orrs	r3, r1
 8001862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800186e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	495c      	ldr	r1, [pc, #368]	@ (80019e8 <HAL_I2C_Init+0x274>)
 8001878:	428b      	cmp	r3, r1
 800187a:	d819      	bhi.n	80018b0 <HAL_I2C_Init+0x13c>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e59      	subs	r1, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fbb1 f3f3 	udiv	r3, r1, r3
 800188a:	1c59      	adds	r1, r3, #1
 800188c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001890:	400b      	ands	r3, r1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00a      	beq.n	80018ac <HAL_I2C_Init+0x138>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1e59      	subs	r1, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018aa:	e051      	b.n	8001950 <HAL_I2C_Init+0x1dc>
 80018ac:	2304      	movs	r3, #4
 80018ae:	e04f      	b.n	8001950 <HAL_I2C_Init+0x1dc>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d111      	bne.n	80018dc <HAL_I2C_Init+0x168>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e58      	subs	r0, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	440b      	add	r3, r1
 80018c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	e012      	b.n	8001902 <HAL_I2C_Init+0x18e>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1e58      	subs	r0, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	0099      	lsls	r1, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Init+0x196>
 8001906:	2301      	movs	r3, #1
 8001908:	e022      	b.n	8001950 <HAL_I2C_Init+0x1dc>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10e      	bne.n	8001930 <HAL_I2C_Init+0x1bc>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1e58      	subs	r0, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6859      	ldr	r1, [r3, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	440b      	add	r3, r1
 8001920:	fbb0 f3f3 	udiv	r3, r0, r3
 8001924:	3301      	adds	r3, #1
 8001926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800192e:	e00f      	b.n	8001950 <HAL_I2C_Init+0x1dc>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	0099      	lsls	r1, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	fbb0 f3f3 	udiv	r3, r0, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	6809      	ldr	r1, [r1, #0]
 8001954:	4313      	orrs	r3, r2
 8001956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800197e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6911      	ldr	r1, [r2, #16]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68d2      	ldr	r2, [r2, #12]
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	430b      	orrs	r3, r1
 8001992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	000186a0 	.word	0x000186a0
 80019ec:	001e847f 	.word	0x001e847f
 80019f0:	003d08ff 	.word	0x003d08ff
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	10624dd3 	.word	0x10624dd3

080019fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	460b      	mov	r3, r1
 8001a0a:	817b      	strh	r3, [r7, #10]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff fb90 	bl	8001134 <HAL_GetTick>
 8001a14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	f040 80e0 	bne.w	8001be4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2319      	movs	r3, #25
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4970      	ldr	r1, [pc, #448]	@ (8001bf0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f964 	bl	8001cfc <I2C_WaitOnFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e0d3      	b.n	8001be6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_I2C_Master_Transmit+0x50>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e0cc      	b.n	8001be6 <HAL_I2C_Master_Transmit+0x1ea>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d007      	beq.n	8001a72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2221      	movs	r2, #33	@ 0x21
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	893a      	ldrh	r2, [r7, #8]
 8001aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4a50      	ldr	r2, [pc, #320]	@ (8001bf4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ab4:	8979      	ldrh	r1, [r7, #10]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	6a3a      	ldr	r2, [r7, #32]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f89c 	bl	8001bf8 <I2C_MasterRequestWrite>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e08d      	b.n	8001be6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ae0:	e066      	b.n	8001bb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 fa22 	bl	8001f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00d      	beq.n	8001b0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d107      	bne.n	8001b0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06b      	b.n	8001be6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d11b      	bne.n	8001b84 <HAL_I2C_Master_Transmit+0x188>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d017      	beq.n	8001b84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	6a39      	ldr	r1, [r7, #32]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fa19 	bl	8001fc0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00d      	beq.n	8001bb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d107      	bne.n	8001bac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001baa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e01a      	b.n	8001be6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d194      	bne.n	8001ae2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
  }
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	00100002 	.word	0x00100002
 8001bf4:	ffff0000 	.word	0xffff0000

08001bf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	460b      	mov	r3, r1
 8001c06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d006      	beq.n	8001c22 <I2C_MasterRequestWrite+0x2a>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d003      	beq.n	8001c22 <I2C_MasterRequestWrite+0x2a>
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c20:	d108      	bne.n	8001c34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e00b      	b.n	8001c4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c38:	2b12      	cmp	r3, #18
 8001c3a:	d107      	bne.n	8001c4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 f84f 	bl	8001cfc <I2C_WaitOnFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00d      	beq.n	8001c80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c72:	d103      	bne.n	8001c7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e035      	b.n	8001cec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c88:	d108      	bne.n	8001c9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c8a:	897b      	ldrh	r3, [r7, #10]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c98:	611a      	str	r2, [r3, #16]
 8001c9a:	e01b      	b.n	8001cd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c9c:	897b      	ldrh	r3, [r7, #10]
 8001c9e:	11db      	asrs	r3, r3, #7
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f003 0306 	and.w	r3, r3, #6
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f063 030f 	orn	r3, r3, #15
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	490e      	ldr	r1, [pc, #56]	@ (8001cf4 <I2C_MasterRequestWrite+0xfc>)
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f898 	bl	8001df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e010      	b.n	8001cec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cca:	897b      	ldrh	r3, [r7, #10]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4907      	ldr	r1, [pc, #28]	@ (8001cf8 <I2C_MasterRequestWrite+0x100>)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f888 	bl	8001df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	00010008 	.word	0x00010008
 8001cf8:	00010002 	.word	0x00010002

08001cfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d0c:	e048      	b.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d044      	beq.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d16:	f7ff fa0d 	bl	8001134 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d302      	bcc.n	8001d2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d139      	bne.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10d      	bne.n	8001d52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4013      	ands	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	e00c      	b.n	8001d6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d116      	bne.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	f043 0220 	orr.w	r2, r3, #32
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e023      	b.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	0c1b      	lsrs	r3, r3, #16
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d10d      	bne.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	43da      	mvns	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	4013      	ands	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	e00c      	b.n	8001de0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d093      	beq.n	8001d0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dfe:	e071      	b.n	8001ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0e:	d123      	bne.n	8001e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f043 0204 	orr.w	r2, r3, #4
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e067      	b.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5e:	d041      	beq.n	8001ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e60:	f7ff f968 	bl	8001134 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d302      	bcc.n	8001e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d136      	bne.n	8001ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d10c      	bne.n	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	e00b      	b.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d016      	beq.n	8001ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e021      	b.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	0c1b      	lsrs	r3, r3, #16
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10c      	bne.n	8001f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e00b      	b.n	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4013      	ands	r3, r2
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf14      	ite	ne
 8001f1a:	2301      	movne	r3, #1
 8001f1c:	2300      	moveq	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f47f af6d 	bne.w	8001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f3c:	e034      	b.n	8001fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f886 	bl	8002050 <I2C_IsAcknowledgeFailed>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e034      	b.n	8001fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d028      	beq.n	8001fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f56:	f7ff f8ed 	bl	8001134 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d302      	bcc.n	8001f6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d11d      	bne.n	8001fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f76:	2b80      	cmp	r3, #128	@ 0x80
 8001f78:	d016      	beq.n	8001fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e007      	b.n	8001fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb2:	2b80      	cmp	r3, #128	@ 0x80
 8001fb4:	d1c3      	bne.n	8001f3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fcc:	e034      	b.n	8002038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f83e 	bl	8002050 <I2C_IsAcknowledgeFailed>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e034      	b.n	8002048 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d028      	beq.n	8002038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe6:	f7ff f8a5 	bl	8001134 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d302      	bcc.n	8001ffc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d11d      	bne.n	8002038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d016      	beq.n	8002038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e007      	b.n	8002048 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b04      	cmp	r3, #4
 8002044:	d1c3      	bne.n	8001fce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002066:	d11b      	bne.n	80020a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002070:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f043 0204 	orr.w	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e272      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8087 	beq.w	80021da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020cc:	4b92      	ldr	r3, [pc, #584]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d00c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d112      	bne.n	800210a <HAL_RCC_OscConfig+0x5e>
 80020e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f0:	d10b      	bne.n	800210a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f2:	4b89      	ldr	r3, [pc, #548]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d06c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x12c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d168      	bne.n	80021d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e24c      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x76>
 8002114:	4b80      	ldr	r3, [pc, #512]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a7f      	ldr	r2, [pc, #508]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e02e      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b7b      	ldr	r3, [pc, #492]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7a      	ldr	r2, [pc, #488]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b78      	ldr	r3, [pc, #480]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a77      	ldr	r2, [pc, #476]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e01d      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0xbc>
 800214e:	4b72      	ldr	r3, [pc, #456]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a71      	ldr	r2, [pc, #452]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b6f      	ldr	r3, [pc, #444]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6e      	ldr	r2, [pc, #440]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0xd4>
 8002168:	4b6b      	ldr	r3, [pc, #428]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a6a      	ldr	r2, [pc, #424]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b68      	ldr	r3, [pc, #416]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a67      	ldr	r2, [pc, #412]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800217e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe ffd4 	bl	8001134 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7fe ffd0 	bl	8001134 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	@ 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e200      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0xe4>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe ffc0 	bl	8001134 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7fe ffbc 	bl	8001134 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	@ 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e1ec      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	4b53      	ldr	r3, [pc, #332]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x10c>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d063      	beq.n	80022ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021f2:	4b49      	ldr	r3, [pc, #292]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d11c      	bne.n	8002238 <HAL_RCC_OscConfig+0x18c>
 80021fe:	4b46      	ldr	r3, [pc, #280]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d116      	bne.n	8002238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_RCC_OscConfig+0x176>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e1c0      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b3d      	ldr	r3, [pc, #244]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4939      	ldr	r1, [pc, #228]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	e03a      	b.n	80022ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002240:	4b36      	ldr	r3, [pc, #216]	@ (800231c <HAL_RCC_OscConfig+0x270>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe ff75 	bl	8001134 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7fe ff71 	bl	8001134 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e1a1      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	4b2d      	ldr	r3, [pc, #180]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226c:	4b2a      	ldr	r3, [pc, #168]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4927      	ldr	r1, [pc, #156]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e015      	b.n	80022ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002282:	4b26      	ldr	r3, [pc, #152]	@ (800231c <HAL_RCC_OscConfig+0x270>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe ff54 	bl	8001134 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002290:	f7fe ff50 	bl	8001134 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e180      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d03a      	beq.n	8002330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d019      	beq.n	80022f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HAL_RCC_OscConfig+0x274>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7fe ff34 	bl	8001134 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d0:	f7fe ff30 	bl	8001134 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e160      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ee:	2001      	movs	r0, #1
 80022f0:	f000 faba 	bl	8002868 <RCC_Delay>
 80022f4:	e01c      	b.n	8002330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <HAL_RCC_OscConfig+0x274>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7fe ff1a 	bl	8001134 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002302:	e00f      	b.n	8002324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7fe ff16 	bl	8001134 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d908      	bls.n	8002324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e146      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	42420000 	.word	0x42420000
 8002320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	4b92      	ldr	r3, [pc, #584]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e9      	bne.n	8002304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a6 	beq.w	800248a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002342:	4b8b      	ldr	r3, [pc, #556]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10d      	bne.n	800236a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b88      	ldr	r3, [pc, #544]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a87      	ldr	r2, [pc, #540]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b85      	ldr	r3, [pc, #532]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b82      	ldr	r3, [pc, #520]	@ (8002574 <HAL_RCC_OscConfig+0x4c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002376:	4b7f      	ldr	r3, [pc, #508]	@ (8002574 <HAL_RCC_OscConfig+0x4c8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a7e      	ldr	r2, [pc, #504]	@ (8002574 <HAL_RCC_OscConfig+0x4c8>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002382:	f7fe fed7 	bl	8001134 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7fe fed3 	bl	8001134 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	@ 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e103      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b75      	ldr	r3, [pc, #468]	@ (8002574 <HAL_RCC_OscConfig+0x4c8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x312>
 80023b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6213      	str	r3, [r2, #32]
 80023bc:	e02d      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x334>
 80023c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a69      	ldr	r2, [pc, #420]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	4b67      	ldr	r3, [pc, #412]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a66      	ldr	r2, [pc, #408]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	e01c      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x356>
 80023e8:	4b61      	ldr	r3, [pc, #388]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a60      	ldr	r2, [pc, #384]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0x36e>
 8002402:	4b5b      	ldr	r3, [pc, #364]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a5a      	ldr	r2, [pc, #360]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	4b58      	ldr	r3, [pc, #352]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a57      	ldr	r2, [pc, #348]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d015      	beq.n	800244e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7fe fe87 	bl	8001134 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe fe83 	bl	8001134 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0b1      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	4b4b      	ldr	r3, [pc, #300]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ee      	beq.n	800242a <HAL_RCC_OscConfig+0x37e>
 800244c:	e014      	b.n	8002478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7fe fe71 	bl	8001134 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fe6d 	bl	8001134 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e09b      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	4b40      	ldr	r3, [pc, #256]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b3c      	ldr	r3, [pc, #240]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a3b      	ldr	r2, [pc, #236]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8087 	beq.w	80025a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002494:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d061      	beq.n	8002564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d146      	bne.n	8002536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b33      	ldr	r3, [pc, #204]	@ (8002578 <HAL_RCC_OscConfig+0x4cc>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe fe41 	bl	8001134 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe fe3d 	bl	8001134 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e06d      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	4b29      	ldr	r3, [pc, #164]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024dc:	d108      	bne.n	80024f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024de:	4b24      	ldr	r3, [pc, #144]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4921      	ldr	r1, [pc, #132]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a19      	ldr	r1, [r3, #32]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	430b      	orrs	r3, r1
 8002502:	491b      	ldr	r1, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_RCC_OscConfig+0x4cc>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fe11 	bl	8001134 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fe0d 	bl	8001134 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e03d      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x46a>
 8002534:	e035      	b.n	80025a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <HAL_RCC_OscConfig+0x4cc>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fdfa 	bl	8001134 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fdf6 	bl	8001134 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e026      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x498>
 8002562:	e01e      	b.n	80025a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e019      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
 8002578:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_RCC_OscConfig+0x500>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	429a      	cmp	r2, r3
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000

080025b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0d0      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d910      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b67      	ldr	r3, [pc, #412]	@ (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
 80025da:	4965      	ldr	r1, [pc, #404]	@ (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b63      	ldr	r3, [pc, #396]	@ (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b59      	ldr	r3, [pc, #356]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a58      	ldr	r2, [pc, #352]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002624:	4b53      	ldr	r3, [pc, #332]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a52      	ldr	r2, [pc, #328]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800262e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b50      	ldr	r3, [pc, #320]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	494d      	ldr	r1, [pc, #308]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d040      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d115      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	4b41      	ldr	r3, [pc, #260]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e073      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	4b3d      	ldr	r3, [pc, #244]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b39      	ldr	r3, [pc, #228]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4936      	ldr	r1, [pc, #216]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a0:	f7fe fd48 	bl	8001134 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7fe fd44 	bl	8001134 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e053      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b2d      	ldr	r3, [pc, #180]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d210      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b24      	ldr	r3, [pc, #144]	@ (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4922      	ldr	r1, [pc, #136]	@ (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e032      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4916      	ldr	r1, [pc, #88]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272a:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	490e      	ldr	r1, [pc, #56]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273e:	f000 f821 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	490a      	ldr	r1, [pc, #40]	@ (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	4a09      	ldr	r2, [pc, #36]	@ (800277c <HAL_RCC_ClockConfig+0x1cc>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275a:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_RCC_ClockConfig+0x1d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fca6 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000
 8002774:	40021000 	.word	0x40021000
 8002778:	08003e74 	.word	0x08003e74
 800277c:	20000008 	.word	0x20000008
 8002780:	2000000c 	.word	0x2000000c

08002784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800279e:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x94>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x36>
 80027b2:	e027      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b4:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_RCC_GetSysClockFreq+0x98>)
 80027b6:	613b      	str	r3, [r7, #16]
      break;
 80027b8:	e027      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	0c9b      	lsrs	r3, r3, #18
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d2:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x94>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	0c5b      	lsrs	r3, r3, #17
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	4a11      	ldr	r2, [pc, #68]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	@ (800281c <HAL_RCC_GetSysClockFreq+0x98>)
 80027e6:	fb03 f202 	mul.w	r2, r3, r2
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e004      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002828 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	613b      	str	r3, [r7, #16]
      break;
 8002802:	e002      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_GetSysClockFreq+0x98>)
 8002806:	613b      	str	r3, [r7, #16]
      break;
 8002808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280a:	693b      	ldr	r3, [r7, #16]
}
 800280c:	4618      	mov	r0, r3
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	007a1200 	.word	0x007a1200
 8002820:	08003e8c 	.word	0x08003e8c
 8002824:	08003e9c 	.word	0x08003e9c
 8002828:	003d0900 	.word	0x003d0900

0800282c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b02      	ldr	r3, [pc, #8]	@ (800283c <HAL_RCC_GetHCLKFreq+0x10>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	20000008 	.word	0x20000008

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002844:	f7ff fff2 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	@ (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	08003e84 	.word	0x08003e84

08002868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002870:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <RCC_Delay+0x34>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <RCC_Delay+0x38>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a5b      	lsrs	r3, r3, #9
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002884:	bf00      	nop
  }
  while (Delay --);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	60fa      	str	r2, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f9      	bne.n	8002884 <RCC_Delay+0x1c>
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	20000008 	.word	0x20000008
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e076      	b.n	80029a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028c6:	d009      	beq.n	80028dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
 80028ce:	e005      	b.n	80028dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f9f0 	bl	8000cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002912:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002960:	ea42 0103 	orr.w	r1, r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	0c1a      	lsrs	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f002 0204 	and.w	r2, r2, #4
 8002982:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002992:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	@ 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029ba:	2301      	movs	r3, #1
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029be:	f7fe fbb9 	bl	8001134 <HAL_GetTick>
 80029c2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029ca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029d6:	7ffb      	ldrb	r3, [r7, #31]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d00c      	beq.n	80029f6 <HAL_SPI_TransmitReceive+0x4a>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029e2:	d106      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d102      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x46>
 80029ec:	7ffb      	ldrb	r3, [r7, #31]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d001      	beq.n	80029f6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80029f2:	2302      	movs	r3, #2
 80029f4:	e17f      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x5c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x5c>
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e174      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_SPI_TransmitReceive+0x6e>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e16d      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d003      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	887a      	ldrh	r2, [r7, #2]
 8002a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	887a      	ldrh	r2, [r7, #2]
 8002a5e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a76:	2b40      	cmp	r3, #64	@ 0x40
 8002a78:	d007      	beq.n	8002a8a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a92:	d17e      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SPI_TransmitReceive+0xf6>
 8002a9c:	8afb      	ldrh	r3, [r7, #22]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d16c      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	1c9a      	adds	r2, r3, #2
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ac6:	e059      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d11b      	bne.n	8002b0e <HAL_SPI_TransmitReceive+0x162>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d016      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x162>
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d113      	bne.n	8002b0e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	881a      	ldrh	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	1c9a      	adds	r2, r3, #2
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d119      	bne.n	8002b50 <HAL_SPI_TransmitReceive+0x1a4>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b30:	b292      	uxth	r2, r2
 8002b32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b38:	1c9a      	adds	r2, r3, #2
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b50:	f7fe faf0 	bl	8001134 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d80d      	bhi.n	8002b7c <HAL_SPI_TransmitReceive+0x1d0>
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d009      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0bc      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1a0      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x11c>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d19b      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x11c>
 8002b90:	e082      	b.n	8002c98 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_TransmitReceive+0x1f4>
 8002b9a:	8afb      	ldrh	r3, [r7, #22]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d171      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bc6:	e05d      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d11c      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x264>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d017      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0x264>
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d114      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	330c      	adds	r3, #12
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d119      	bne.n	8002c52 <HAL_SPI_TransmitReceive+0x2a6>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d014      	beq.n	8002c52 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c52:	f7fe fa6f 	bl	8001134 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d803      	bhi.n	8002c6a <HAL_SPI_TransmitReceive+0x2be>
 8002c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d102      	bne.n	8002c70 <HAL_SPI_TransmitReceive+0x2c4>
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e038      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d19c      	bne.n	8002bc8 <HAL_SPI_TransmitReceive+0x21c>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d197      	bne.n	8002bc8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f8b7 	bl	8002e10 <SPI_EndRxTxTransaction>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e01d      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3728      	adds	r7, #40	@ 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d10:	f7fe fa10 	bl	8001134 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d20:	f7fe fa08 	bl	8001134 <HAL_GetTick>
 8002d24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d26:	4b39      	ldr	r3, [pc, #228]	@ (8002e0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	015b      	lsls	r3, r3, #5
 8002d2c:	0d1b      	lsrs	r3, r3, #20
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	fb02 f303 	mul.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d36:	e054      	b.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d050      	beq.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d40:	f7fe f9f8 	bl	8001134 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d902      	bls.n	8002d56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d13d      	bne.n	8002dd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d6e:	d111      	bne.n	8002d94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d78:	d004      	beq.n	8002d84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d82:	d107      	bne.n	8002d94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d9c:	d10f      	bne.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e017      	b.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d19b      	bne.n	8002d38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000008 	.word	0x20000008

08002e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2201      	movs	r2, #1
 8002e24:	2102      	movs	r1, #2
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff ff6a 	bl	8002d00 <SPI_WaitFlagStateUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e013      	b.n	8002e6a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2180      	movs	r1, #128	@ 0x80
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff ff57 	bl	8002d00 <SPI_WaitFlagStateUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e000      	b.n	8002e6a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e093      	b.n	8002fae <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe f888 	bl	8000fb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f000 fa38 	bl	800333c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef4:	f023 0303 	bic.w	r3, r3, #3
 8002ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	4313      	orrs	r3, r2
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002f12:	f023 030c 	bic.w	r3, r3, #12
 8002f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	011a      	lsls	r2, r3, #4
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	031b      	lsls	r3, r3, #12
 8002f42:	4313      	orrs	r3, r2
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002f50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fc6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fd6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002fde:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d110      	bne.n	8003008 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fec:	7b7b      	ldrb	r3, [r7, #13]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d001      	beq.n	8002ff6 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e089      	b.n	800310a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003006:	e031      	b.n	800306c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d110      	bne.n	8003030 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003014:	7b3b      	ldrb	r3, [r7, #12]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e075      	b.n	800310a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800302e:	e01d      	b.n	800306c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003036:	7bbb      	ldrb	r3, [r7, #14]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800303c:	7b7b      	ldrb	r3, [r7, #13]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003042:	7b3b      	ldrb	r3, [r7, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d001      	beq.n	800304c <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e05e      	b.n	800310a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_Encoder_Start_IT+0xc4>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b04      	cmp	r3, #4
 8003076:	d010      	beq.n	800309a <HAL_TIM_Encoder_Start_IT+0xe4>
 8003078:	e01f      	b.n	80030ba <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2201      	movs	r2, #1
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f9c8 	bl	8003418 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0202 	orr.w	r2, r2, #2
 8003096:	60da      	str	r2, [r3, #12]
      break;
 8003098:	e02e      	b.n	80030f8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2201      	movs	r2, #1
 80030a0:	2104      	movs	r1, #4
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f9b8 	bl	8003418 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0204 	orr.w	r2, r2, #4
 80030b6:	60da      	str	r2, [r3, #12]
      break;
 80030b8:	e01e      	b.n	80030f8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f9a8 	bl	8003418 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2201      	movs	r2, #1
 80030ce:	2104      	movs	r1, #4
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 f9a1 	bl	8003418 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0202 	orr.w	r2, r2, #2
 80030e4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0204 	orr.w	r2, r2, #4
 80030f4:	60da      	str	r2, [r3, #12]
      break;
 80030f6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01b      	beq.n	8003176 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0202 	mvn.w	r2, #2
 8003146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7fd fa31 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8003162:	e005      	b.n	8003170 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f8cd 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8d3 	bl	8003316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01b      	beq.n	80031c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f06f 0204 	mvn.w	r2, #4
 8003192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd fa0b 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 80031ae:	e005      	b.n	80031bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8a7 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8ad 	bl	8003316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01b      	beq.n	800320e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f06f 0208 	mvn.w	r2, #8
 80031de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2204      	movs	r2, #4
 80031e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fd f9e5 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 80031fa:	e005      	b.n	8003208 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f881 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f887 	bl	8003316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01b      	beq.n	800325a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0210 	mvn.w	r2, #16
 800322a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2208      	movs	r2, #8
 8003230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fd f9bf 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8003246:	e005      	b.n	8003254 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f85b 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f861 	bl	8003316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00c      	beq.n	800327e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f06f 0201 	mvn.w	r2, #1
 8003276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f83a 	bl	80032f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00c      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800329a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f946 	bl	800352e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00c      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f831 	bl	8003328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00c      	beq.n	80032ea <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f06f 0220 	mvn.w	r2, #32
 80032e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f919 	bl	800351c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
	...

0800333c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a2f      	ldr	r2, [pc, #188]	@ (800340c <TIM_Base_SetConfig+0xd0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_Base_SetConfig+0x30>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800335a:	d007      	beq.n	800336c <TIM_Base_SetConfig+0x30>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a2c      	ldr	r2, [pc, #176]	@ (8003410 <TIM_Base_SetConfig+0xd4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_Base_SetConfig+0x30>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a2b      	ldr	r2, [pc, #172]	@ (8003414 <TIM_Base_SetConfig+0xd8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d108      	bne.n	800337e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a22      	ldr	r2, [pc, #136]	@ (800340c <TIM_Base_SetConfig+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00b      	beq.n	800339e <TIM_Base_SetConfig+0x62>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338c:	d007      	beq.n	800339e <TIM_Base_SetConfig+0x62>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1f      	ldr	r2, [pc, #124]	@ (8003410 <TIM_Base_SetConfig+0xd4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_Base_SetConfig+0x62>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1e      	ldr	r2, [pc, #120]	@ (8003414 <TIM_Base_SetConfig+0xd8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d108      	bne.n	80033b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0d      	ldr	r2, [pc, #52]	@ (800340c <TIM_Base_SetConfig+0xd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d103      	bne.n	80033e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f023 0201 	bic.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	611a      	str	r2, [r3, #16]
  }
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800

08003418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2201      	movs	r2, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003474:	2302      	movs	r3, #2
 8003476:	e046      	b.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a16      	ldr	r2, [pc, #88]	@ (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c4:	d009      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a10      	ldr	r2, [pc, #64]	@ (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10c      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800

0800351c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <BSP_RF_Init>:


void _BSP_RF_ReceiveMessage();

void BSP_RF_Init(BSP_RF_Params_TypeDef* _params)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	nRF24_CE_L();
 8003548:	f000 fb9e 	bl	8003c88 <nRF24_CE_L>

    nRF24_Init();
 800354c:	f000 f91d 	bl	800378a <nRF24_Init>
	nRF24_SetRFChannel(_params->channel);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	885b      	ldrh	r3, [r3, #2]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fa07 	bl	800396a <nRF24_SetRFChannel>
	nRF24_SetDataRate(_params->rate);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fa8c 	bl	8003a7e <nRF24_SetDataRate>
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8003566:	200c      	movs	r0, #12
 8003568:	f000 f9de 	bl	8003928 <nRF24_SetCRCScheme>
	nRF24_SetAddrWidth(3);
 800356c:	2003      	movs	r0, #3
 800356e:	f000 fa25 	bl	80039bc <nRF24_SetAddrWidth>
	params = _params;
 8003572:	4a03      	ldr	r2, [pc, #12]	@ (8003580 <BSP_RF_Init+0x40>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000158 	.word	0x20000158

08003584 <BSP_RF_Sending>:

void BSP_RF_Sending(){
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR); // program TX address
 8003588:	4910      	ldr	r1, [pc, #64]	@ (80035cc <BSP_RF_Sending+0x48>)
 800358a:	2006      	movs	r0, #6
 800358c:	f000 fa26 	bl	80039dc <nRF24_SetAddr>
	nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR); // program address for pipe#0, must be same as TX (for Auto-ACK)
 8003590:	490e      	ldr	r1, [pc, #56]	@ (80035cc <BSP_RF_Sending+0x48>)
 8003592:	2000      	movs	r0, #0
 8003594:	f000 fa22 	bl	80039dc <nRF24_SetAddr>

	// Set TX power (maximum)
	nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8003598:	2006      	movs	r0, #6
 800359a:	f000 fa55 	bl	8003a48 <nRF24_SetTXPower>

	// Configure auto retransmit: 10 retransmissions with pause of 2500s in between
	nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 800359e:	210a      	movs	r1, #10
 80035a0:	2009      	movs	r0, #9
 80035a2:	f000 f9f0 	bl	8003986 <nRF24_SetAutoRetr>

	// Enable Auto-ACK for pipe#0 (for ACK packets)
	nRF24_EnableAA(nRF24_PIPE0);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f000 fa84 	bl	8003ab4 <nRF24_EnableAA>

	// Set operational mode (PTX == transmitter)
	nRF24_SetOperationalMode(nRF24_MODE_TX);
 80035ac:	2000      	movs	r0, #0
 80035ae:	f000 f99a 	bl	80038e6 <nRF24_SetOperationalMode>

	// Clear any pending IRQ flags
	nRF24_ClearIRQFlags();
 80035b2:	f000 fabc 	bl	8003b2e <nRF24_ClearIRQFlags>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 80035b6:	2002      	movs	r0, #2
 80035b8:	f000 f976 	bl	80038a8 <nRF24_SetPowerMode>
	nRF24_CE_H();
 80035bc:	f000 fb70 	bl	8003ca0 <nRF24_CE_H>
	mode = TX;
 80035c0:	4b03      	ldr	r3, [pc, #12]	@ (80035d0 <BSP_RF_Sending+0x4c>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	08003ea0 	.word	0x08003ea0
 80035d0:	2000015c 	.word	0x2000015c

080035d4 <BSP_RF_SendMessage>:

void BSP_RF_SendMessage(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH]){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
		nRF24_TransmitPacket(payload, NRF24L01P_PAYLOAD_LENGTH);
 80035dc:	2108      	movs	r1, #8
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fafa 	bl	8003bd8 <nRF24_TransmitPacket>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_BSP_RF_ReceiveMessage>:
    nRF24_CE_H();

	mode = RX;
}

void _BSP_RF_ReceiveMessage(){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0

	uint8_t payload_length = NRF24L01P_PAYLOAD_LENGTH;
 80035f2:	2308      	movs	r3, #8
 80035f4:	71fb      	strb	r3, [r7, #7]
	nRF24_ReadPayload(rx_data, &payload_length);
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	4619      	mov	r1, r3
 80035fa:	4804      	ldr	r0, [pc, #16]	@ (800360c <_BSP_RF_ReceiveMessage+0x20>)
 80035fc:	f000 fabc 	bl	8003b78 <nRF24_ReadPayload>
	nRF24_ClearIRQFlags();
 8003600:	f000 fa95 	bl	8003b2e <nRF24_ClearIRQFlags>

}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000160 	.word	0x20000160

08003610 <BSP_RF_IrqHandler>:

void BSP_RF_SetAck(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH]){
	memcpy(ack, payload, NRF24L01P_PAYLOAD_LENGTH);
}

uint8_t BSP_RF_IrqHandler(){
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	71fb      	strb	r3, [r7, #7]
	uint8_t payload_length = NRF24L01P_PAYLOAD_LENGTH;
 800361a:	2308      	movs	r3, #8
 800361c:	71bb      	strb	r3, [r7, #6]
	if(mode == RX){
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <BSP_RF_IrqHandler+0x28>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d101      	bne.n	800362a <BSP_RF_IrqHandler+0x1a>
		ret = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	71fb      	strb	r3, [r7, #7]
	}

	_BSP_RF_ReceiveMessage();
 800362a:	f7ff ffdf 	bl	80035ec <_BSP_RF_ReceiveMessage>

	return ret;
 800362e:	79fb      	ldrb	r3, [r7, #7]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	2000015c 	.word	0x2000015c

0800363c <BSP_RF_ReadData>:

void BSP_RF_ReadData(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH]){
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	memcpy(payload, rx_data, NRF24L01P_PAYLOAD_LENGTH);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4905      	ldr	r1, [pc, #20]	@ (800365c <BSP_RF_ReadData+0x20>)
 8003648:	461a      	mov	r2, r3
 800364a:	460b      	mov	r3, r1
 800364c:	cb03      	ldmia	r3!, {r0, r1}
 800364e:	6010      	str	r0, [r2, #0]
 8003650:	6051      	str	r1, [r2, #4]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	20000160 	.word	0x20000160

08003660 <nRF24_ReadReg>:

// Reads a value of register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800366a:	f000 fb25 	bl	8003cb8 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	b2db      	uxtb	r3, r3
 8003676:	4618      	mov	r0, r3
 8003678:	f000 faee 	bl	8003c58 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 800367c:	20ff      	movs	r0, #255	@ 0xff
 800367e:	f000 faeb 	bl	8003c58 <nRF24_LL_RW>
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8003686:	f000 fb23 	bl	8003cd0 <nRF24_CSN_H>

	return value;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <nRF24_WriteReg>:

// Writes a new value to the register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	460a      	mov	r2, r1
 800369e:	71fb      	strb	r3, [r7, #7]
 80036a0:	4613      	mov	r3, r2
 80036a2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80036a4:	f000 fb08 	bl	8003cb8 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	2b1f      	cmp	r3, #31
 80036ac:	d810      	bhi.n	80036d0 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW((uint8_t)(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP)));
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	b25b      	sxtb	r3, r3
 80036b8:	f043 0320 	orr.w	r3, r3, #32
 80036bc:	b25b      	sxtb	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fac9 	bl	8003c58 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80036c6:	79bb      	ldrb	r3, [r7, #6]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fac5 	bl	8003c58 <nRF24_LL_RW>
 80036ce:	e013      	b.n	80036f8 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fac0 	bl	8003c58 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	2be1      	cmp	r3, #225	@ 0xe1
 80036dc:	d00c      	beq.n	80036f8 <nRF24_WriteReg+0x64>
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	2be2      	cmp	r3, #226	@ 0xe2
 80036e2:	d009      	beq.n	80036f8 <nRF24_WriteReg+0x64>
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	2be3      	cmp	r3, #227	@ 0xe3
 80036e8:	d006      	beq.n	80036f8 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	2bff      	cmp	r3, #255	@ 0xff
 80036ee:	d003      	beq.n	80036f8 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 80036f0:	79bb      	ldrb	r3, [r7, #6]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fab0 	bl	8003c58 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80036f8:	f000 faea 	bl	8003cd0 <nRF24_CSN_H>
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <nRF24_ReadMBReg>:
// Reads to the buffer from a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
 8003710:	4613      	mov	r3, r2
 8003712:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003714:	f000 fad0 	bl	8003cb8 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fa9c 	bl	8003c58 <nRF24_LL_RW>
	while (count--) {
 8003720:	e007      	b.n	8003732 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8003722:	683c      	ldr	r4, [r7, #0]
 8003724:	1c63      	adds	r3, r4, #1
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	20ff      	movs	r0, #255	@ 0xff
 800372a:	f000 fa95 	bl	8003c58 <nRF24_LL_RW>
 800372e:	4603      	mov	r3, r0
 8003730:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8003732:	79bb      	ldrb	r3, [r7, #6]
 8003734:	1e5a      	subs	r2, r3, #1
 8003736:	71ba      	strb	r2, [r7, #6]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f2      	bne.n	8003722 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 800373c:	f000 fac8 	bl	8003cd0 <nRF24_CSN_H>
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bd90      	pop	{r4, r7, pc}

08003748 <nRF24_WriteMBReg>:
// Writes a buffer to a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	6039      	str	r1, [r7, #0]
 8003752:	71fb      	strb	r3, [r7, #7]
 8003754:	4613      	mov	r3, r2
 8003756:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003758:	f000 faae 	bl	8003cb8 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fa7a 	bl	8003c58 <nRF24_LL_RW>
	while (count--) {
 8003764:	e006      	b.n	8003774 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	603a      	str	r2, [r7, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fa72 	bl	8003c58 <nRF24_LL_RW>
	while (count--) {
 8003774:	79bb      	ldrb	r3, [r7, #6]
 8003776:	1e5a      	subs	r2, r3, #1
 8003778:	71ba      	strb	r2, [r7, #6]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f3      	bne.n	8003766 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 800377e:	f000 faa7 	bl	8003cd0 <nRF24_CSN_H>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <nRF24_Init>:

// Configures the transceiver to its initial state
void nRF24_Init(void) {
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
	// Write to the registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG,     0x08);
 8003790:	2108      	movs	r1, #8
 8003792:	2000      	movs	r0, #0
 8003794:	f7ff ff7e 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA,      0x3F);
 8003798:	213f      	movs	r1, #63	@ 0x3f
 800379a:	2001      	movs	r0, #1
 800379c:	f7ff ff7a 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR,  0x03);
 80037a0:	2103      	movs	r1, #3
 80037a2:	2002      	movs	r0, #2
 80037a4:	f7ff ff76 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW,   0x03);
 80037a8:	2103      	movs	r1, #3
 80037aa:	2003      	movs	r0, #3
 80037ac:	f7ff ff72 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80037b0:	2103      	movs	r1, #3
 80037b2:	2004      	movs	r0, #4
 80037b4:	f7ff ff6e 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH,      0x02);
 80037b8:	2102      	movs	r1, #2
 80037ba:	2005      	movs	r0, #5
 80037bc:	f7ff ff6a 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP,   0x0E);
 80037c0:	210e      	movs	r1, #14
 80037c2:	2006      	movs	r0, #6
 80037c4:	f7ff ff66 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS,     0x00);
 80037c8:	2100      	movs	r1, #0
 80037ca:	2007      	movs	r0, #7
 80037cc:	f7ff ff62 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0,   0x00);
 80037d0:	2100      	movs	r1, #0
 80037d2:	2011      	movs	r0, #17
 80037d4:	f7ff ff5e 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1,   0x00);
 80037d8:	2100      	movs	r1, #0
 80037da:	2012      	movs	r0, #18
 80037dc:	f7ff ff5a 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2,   0x00);
 80037e0:	2100      	movs	r1, #0
 80037e2:	2013      	movs	r0, #19
 80037e4:	f7ff ff56 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3,   0x00);
 80037e8:	2100      	movs	r1, #0
 80037ea:	2014      	movs	r0, #20
 80037ec:	f7ff ff52 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4,   0x00);
 80037f0:	2100      	movs	r1, #0
 80037f2:	2015      	movs	r0, #21
 80037f4:	f7ff ff4e 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5,   0x00);
 80037f8:	2100      	movs	r1, #0
 80037fa:	2016      	movs	r0, #22
 80037fc:	f7ff ff4a 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD,      0x00);
 8003800:	2100      	movs	r1, #0
 8003802:	201c      	movs	r0, #28
 8003804:	f7ff ff46 	bl	8003694 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE,    0x00);
 8003808:	2100      	movs	r1, #0
 800380a:	201d      	movs	r0, #29
 800380c:	f7ff ff42 	bl	8003694 <nRF24_WriteReg>

	// Configure the default RX/TX address values
	uint8_t addr[5];
	uint8_t idx;
	for (idx = 0U; idx < sizeof(addr); idx++) {
 8003810:	2300      	movs	r3, #0
 8003812:	71fb      	strb	r3, [r7, #7]
 8003814:	e008      	b.n	8003828 <nRF24_Init+0x9e>
		addr[idx] = 0xE7;
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	3308      	adds	r3, #8
 800381a:	443b      	add	r3, r7
 800381c:	22e7      	movs	r2, #231	@ 0xe7
 800381e:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (idx = 0U; idx < sizeof(addr); idx++) {
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	3301      	adds	r3, #1
 8003826:	71fb      	strb	r3, [r7, #7]
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2b04      	cmp	r3, #4
 800382c:	d9f3      	bls.n	8003816 <nRF24_Init+0x8c>
	}
	nRF24_SetAddr(nRF24_PIPETX, addr);
 800382e:	463b      	mov	r3, r7
 8003830:	4619      	mov	r1, r3
 8003832:	2006      	movs	r0, #6
 8003834:	f000 f8d2 	bl	80039dc <nRF24_SetAddr>
	nRF24_SetAddr(nRF24_PIPE0, addr);
 8003838:	463b      	mov	r3, r7
 800383a:	4619      	mov	r1, r3
 800383c:	2000      	movs	r0, #0
 800383e:	f000 f8cd 	bl	80039dc <nRF24_SetAddr>
	for (idx = 0U; idx < sizeof(addr); idx++) {
 8003842:	2300      	movs	r3, #0
 8003844:	71fb      	strb	r3, [r7, #7]
 8003846:	e008      	b.n	800385a <nRF24_Init+0xd0>
		addr[idx] = 0xC2;
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	3308      	adds	r3, #8
 800384c:	443b      	add	r3, r7
 800384e:	22c2      	movs	r2, #194	@ 0xc2
 8003850:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (idx = 0U; idx < sizeof(addr); idx++) {
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	3301      	adds	r3, #1
 8003858:	71fb      	strb	r3, [r7, #7]
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d9f3      	bls.n	8003848 <nRF24_Init+0xbe>
	}
	nRF24_SetAddr(nRF24_PIPE1, addr);
 8003860:	463b      	mov	r3, r7
 8003862:	4619      	mov	r1, r3
 8003864:	2001      	movs	r0, #1
 8003866:	f000 f8b9 	bl	80039dc <nRF24_SetAddr>
	for (idx = 2U; idx < 6U; idx++) {
 800386a:	2302      	movs	r3, #2
 800386c:	71fb      	strb	r3, [r7, #7]
 800386e:	e00c      	b.n	800388a <nRF24_Init+0x100>
		addr[0] = idx + 0xC1;
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	3b3f      	subs	r3, #63	@ 0x3f
 8003874:	b2db      	uxtb	r3, r3
 8003876:	703b      	strb	r3, [r7, #0]
		nRF24_SetAddr(idx, addr);
 8003878:	463a      	mov	r2, r7
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f8ac 	bl	80039dc <nRF24_SetAddr>
	for (idx = 2U; idx < 6U; idx++) {
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	3301      	adds	r3, #1
 8003888:	71fb      	strb	r3, [r7, #7]
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	2b05      	cmp	r3, #5
 800388e:	d9ef      	bls.n	8003870 <nRF24_Init+0xe6>
	}

	// Clear the FIFO's
	nRF24_FlushRX();
 8003890:	f000 f945 	bl	8003b1e <nRF24_FlushRX>
	nRF24_FlushTX();
 8003894:	f000 f93b 	bl	8003b0e <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8003898:	f000 f949 	bl	8003b2e <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800389c:	f000 fa18 	bl	8003cd0 <nRF24_CSN_H>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <nRF24_SetPowerMode>:
}

// Set transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80038b2:	2000      	movs	r0, #0
 80038b4:	f7ff fed4 	bl	8003660 <nRF24_ReadReg>
 80038b8:	4603      	mov	r3, r0
 80038ba:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d104      	bne.n	80038cc <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Standby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	e003      	b.n	80038d4 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// It goes into Power Down mode with consumption about 900nA
		reg &= (uint8_t)(~nRF24_CONFIG_PWR_UP);
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	f023 0302 	bic.w	r3, r3, #2
 80038d2:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	4619      	mov	r1, r3
 80038d8:	2000      	movs	r0, #0
 80038da:	f7ff fedb 	bl	8003694 <nRF24_WriteReg>
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7ff feb5 	bl	8003660 <nRF24_ReadReg>
 80038f6:	4603      	mov	r3, r0
 80038f8:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~nRF24_CONFIG_PRIM_RX);
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
	reg = (uint8_t)(reg | (mode & nRF24_CONFIG_PRIM_RX));
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	b25a      	sxtb	r2, r3
 800390c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003910:	4313      	orrs	r3, r2
 8003912:	b25b      	sxtb	r3, r3
 8003914:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	4619      	mov	r1, r3
 800391a:	2000      	movs	r0, #0
 800391c:	f7ff feba 	bl	8003694 <nRF24_WriteReg>
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003932:	2000      	movs	r0, #0
 8003934:	f7ff fe94 	bl	8003660 <nRF24_ReadReg>
 8003938:	4603      	mov	r3, r0
 800393a:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~nRF24_MASK_CRC);
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	f023 030c 	bic.w	r3, r3, #12
 8003942:	73fb      	strb	r3, [r7, #15]
	reg = (uint8_t)(reg | (scheme & nRF24_MASK_CRC));
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	f003 030c 	and.w	r3, r3, #12
 800394c:	b25a      	sxtb	r2, r3
 800394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003952:	4313      	orrs	r3, r2
 8003954:	b25b      	sxtb	r3, r3
 8003956:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	4619      	mov	r1, r3
 800395c:	2000      	movs	r0, #0
 800395e:	f7ff fe99 	bl	8003694 <nRF24_WriteReg>
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <nRF24_SetRFChannel>:
// Set RF frequency channel
// input:
//   channel - radio frequency channel, can be a value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	4619      	mov	r1, r3
 8003978:	2005      	movs	r0, #5
 800397a:	f7ff fe8b 	bl	8003694 <nRF24_WriteReg>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <nRF24_SetAutoRetr>:
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: in order to disable automatic retransmission,
//       the value of the variable XXX should be zero
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	460a      	mov	r2, r1
 8003990:	71fb      	strb	r3, [r7, #7]
 8003992:	4613      	mov	r3, r2
 8003994:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteReg(
		nRF24_REG_SETUP_RETR,
		(uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC))
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	b25a      	sxtb	r2, r3
 800399c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	b25b      	sxtb	r3, r3
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b25b      	sxtb	r3, r3
	nRF24_WriteReg(
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	4619      	mov	r1, r3
 80039ae:	2004      	movs	r0, #4
 80039b0:	f7ff fe70 	bl	8003694 <nRF24_WriteReg>
	);
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, (uint8_t)(addr_width - 2U));
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	3b02      	subs	r3, #2
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	2003      	movs	r0, #3
 80039d0:	f7ff fe60 	bl	8003694 <nRF24_WriteReg>
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <nRF24_SetAddr>:
//       of the actual address width configured in the transceiver
// note: for the pipes[2..5] only the first byte from the addr buffer
//       will be written since the pipes[1..5] share the four
//       most significant address bytes
// note: always ensure that none of the data pipes have the same address
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d00a      	beq.n	8003a04 <nRF24_SetAddr+0x28>
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	dc22      	bgt.n	8003a38 <nRF24_SetAddr+0x5c>
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	dc02      	bgt.n	80039fc <nRF24_SetAddr+0x20>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	da04      	bge.n	8003a04 <nRF24_SetAddr+0x28>
			// it will be the LSByte of the pipe address
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 80039fa:	e01d      	b.n	8003a38 <nRF24_SetAddr+0x5c>
 80039fc:	3b02      	subs	r3, #2
	switch (pipe) {
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d81a      	bhi.n	8003a38 <nRF24_SetAddr+0x5c>
 8003a02:	e00f      	b.n	8003a24 <nRF24_SetAddr+0x48>
			addr_width = nRF24_GetAddrWidth();
 8003a04:	f000 f871 	bl	8003aea <nRF24_GetAddrWidth>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	73fb      	strb	r3, [r7, #15]
				nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe],
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a44 <nRF24_SetAddr+0x68>)
 8003a10:	5cd3      	ldrb	r3, [r2, r3]
			nRF24_WriteMBReg(
 8003a12:	f043 0320 	orr.w	r3, r3, #32
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	6839      	ldr	r1, [r7, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fe93 	bl	8003748 <nRF24_WriteMBReg>
			break;
 8003a22:	e00a      	b.n	8003a3a <nRF24_SetAddr+0x5e>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <nRF24_SetAddr+0x68>)
 8003a28:	5cd2      	ldrb	r2, [r2, r3]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4610      	mov	r0, r2
 8003a32:	f7ff fe2f 	bl	8003694 <nRF24_WriteReg>
			break;
 8003a36:	e000      	b.n	8003a3a <nRF24_SetAddr+0x5e>
			break;
 8003a38:	bf00      	nop
	}
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	08003ea4 	.word	0x08003ea4

08003a48 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003a52:	2006      	movs	r0, #6
 8003a54:	f7ff fe04 	bl	8003660 <nRF24_ReadReg>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~nRF24_MASK_RF_PWR);
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	f023 0306 	bic.w	r3, r3, #6
 8003a62:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	2006      	movs	r0, #6
 8003a72:	f7ff fe0f 	bl	8003694 <nRF24_WriteReg>
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4603      	mov	r3, r0
 8003a86:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003a88:	2006      	movs	r0, #6
 8003a8a:	f7ff fde9 	bl	8003660 <nRF24_ReadReg>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	73fb      	strb	r3, [r7, #15]
	reg &= (uint8_t)(~nRF24_MASK_DATARATE);
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8003a98:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	2006      	movs	r0, #6
 8003aa8:	f7ff fdf4 	bl	8003694 <nRF24_WriteReg>
}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f7ff fdce 	bl	8003660 <nRF24_ReadReg>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73fb      	strb	r3, [r7, #15]
	reg = reg | (uint8_t)(1U << pipe);
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	2201      	movs	r2, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	4619      	mov	r1, r3
 8003adc:	2001      	movs	r0, #1
 8003ade:	f7ff fdd9 	bl	8003694 <nRF24_WriteReg>
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <nRF24_GetAddrWidth>:
}

// Get address length
// return: the length of the address configured in the transceiver,
//         value from 3 to 5
uint8_t nRF24_GetAddrWidth(void) {
 8003aea:	b580      	push	{r7, lr}
 8003aec:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_SETUP_AW) + 2U;
 8003aee:	2003      	movs	r0, #3
 8003af0:	f7ff fdb6 	bl	8003660 <nRF24_ReadReg>
 8003af4:	4603      	mov	r3, r0
 8003af6:	3302      	adds	r3, #2
 8003af8:	b2db      	uxtb	r3, r3
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	bd80      	pop	{r7, pc}

08003afe <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8003afe:	b580      	push	{r7, lr}
 8003b00:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8003b02:	2007      	movs	r0, #7
 8003b04:	f7ff fdac 	bl	8003660 <nRF24_ReadReg>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8003b12:	21ff      	movs	r1, #255	@ 0xff
 8003b14:	20e1      	movs	r0, #225	@ 0xe1
 8003b16:	f7ff fdbd 	bl	8003694 <nRF24_WriteReg>
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8003b22:	21ff      	movs	r1, #255	@ 0xff
 8003b24:	20e2      	movs	r0, #226	@ 0xe2
 8003b26:	f7ff fdb5 	bl	8003694 <nRF24_WriteReg>
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg = nRF24_ReadReg(nRF24_REG_STATUS);
 8003b34:	2007      	movs	r0, #7
 8003b36:	f7ff fd93 	bl	8003660 <nRF24_ReadReg>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003b44:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	2007      	movs	r0, #7
 8003b4c:	f7ff fda2 	bl	8003694 <nRF24_WriteReg>
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	461a      	mov	r2, r3
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	20a0      	movs	r0, #160	@ 0xa0
 8003b6c:	f7ff fdec 	bl	8003748 <nRF24_WriteMBReg>
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8003b82:	2007      	movs	r0, #7
 8003b84:	f7ff fd6c 	bl	8003660 <nRF24_ReadReg>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	105b      	asrs	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6U) {
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d816      	bhi.n	8003bc8 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_REG_RX_PW_P0 + pipe);
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	3311      	adds	r3, #17
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fd5d 	bl	8003660 <nRF24_ReadReg>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	2061      	movs	r0, #97	@ 0x61
 8003bc0:	f7ff fda0 	bl	8003704 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	e003      	b.n	8003bd0 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0U;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8003bce:	23ff      	movs	r3, #255	@ 0xff
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <nRF24_TransmitPacket>:


nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_TX_TIMEOUT;
 8003be4:	2302      	movs	r3, #2
 8003be6:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8003be8:	f000 f84e 	bl	8003c88 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ffb1 	bl	8003b58 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8003bf6:	f000 f853 	bl	8003ca0 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8003bfa:	f7ff ff80 	bl	8003afe <nRF24_GetStatus>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	1e5a      	subs	r2, r3, #1
 8003c10:	60ba      	str	r2, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f1      	bne.n	8003bfa <nRF24_TransmitPacket+0x22>
 8003c16:	e000      	b.n	8003c1a <nRF24_TransmitPacket+0x42>
			break;
 8003c18:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8003c1a:	f000 f835 	bl	8003c88 <nRF24_CE_L>

	if (!wait) {
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8003c24:	2302      	movs	r3, #2
 8003c26:	e012      	b.n	8003c4e <nRF24_TransmitPacket+0x76>
	}


	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8003c28:	f7ff ff81 	bl	8003b2e <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <nRF24_TransmitPacket+0x62>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e009      	b.n	8003c4e <nRF24_TransmitPacket+0x76>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <nRF24_TransmitPacket+0x70>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e002      	b.n	8003c4e <nRF24_TransmitPacket+0x76>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8003c48:	f7ff ff61 	bl	8003b0e <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <nRF24_LL_RW>:

// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t nRF24_LL_RW(uint8_t data) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
	 // Wait until TX buffer is empty
	uint8_t* pRxData = {0,};
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &data, pRxData, 1, 100);
 8003c66:	1df9      	adds	r1, r7, #7
 8003c68:	2364      	movs	r3, #100	@ 0x64
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4804      	ldr	r0, [pc, #16]	@ (8003c84 <nRF24_LL_RW+0x2c>)
 8003c72:	f7fe fe9b 	bl	80029ac <HAL_SPI_TransmitReceive>
	// Return received byte
	return *pRxData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	781b      	ldrb	r3, [r3, #0]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200000ac 	.word	0x200000ac

08003c88 <nRF24_CE_L>:

void nRF24_CE_L(void){
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c92:	4802      	ldr	r0, [pc, #8]	@ (8003c9c <nRF24_CE_L+0x14>)
 8003c94:	f7fd fd25 	bl	80016e2 <HAL_GPIO_WritePin>
}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40010c00 	.word	0x40010c00

08003ca0 <nRF24_CE_H>:

void nRF24_CE_H(void){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003caa:	4802      	ldr	r0, [pc, #8]	@ (8003cb4 <nRF24_CE_H+0x14>)
 8003cac:	f7fd fd19 	bl	80016e2 <HAL_GPIO_WritePin>
}
 8003cb0:	bf00      	nop
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40010c00 	.word	0x40010c00

08003cb8 <nRF24_CSN_L>:


void nRF24_CSN_L(void){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cc2:	4802      	ldr	r0, [pc, #8]	@ (8003ccc <nRF24_CSN_L+0x14>)
 8003cc4:	f7fd fd0d 	bl	80016e2 <HAL_GPIO_WritePin>
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40010800 	.word	0x40010800

08003cd0 <nRF24_CSN_H>:
void nRF24_CSN_H(void){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cda:	4802      	ldr	r0, [pc, #8]	@ (8003ce4 <nRF24_CSN_H+0x14>)
 8003cdc:	f7fd fd01 	bl	80016e2 <HAL_GPIO_WritePin>
}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40010800 	.word	0x40010800

08003ce8 <__itoa>:
 8003ce8:	1e93      	subs	r3, r2, #2
 8003cea:	2b22      	cmp	r3, #34	@ 0x22
 8003cec:	b510      	push	{r4, lr}
 8003cee:	460c      	mov	r4, r1
 8003cf0:	d904      	bls.n	8003cfc <__itoa+0x14>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	461c      	mov	r4, r3
 8003cf6:	700b      	strb	r3, [r1, #0]
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	bd10      	pop	{r4, pc}
 8003cfc:	2a0a      	cmp	r2, #10
 8003cfe:	d109      	bne.n	8003d14 <__itoa+0x2c>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	da07      	bge.n	8003d14 <__itoa+0x2c>
 8003d04:	232d      	movs	r3, #45	@ 0x2d
 8003d06:	700b      	strb	r3, [r1, #0]
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4240      	negs	r0, r0
 8003d0c:	4421      	add	r1, r4
 8003d0e:	f000 f805 	bl	8003d1c <__utoa>
 8003d12:	e7f1      	b.n	8003cf8 <__itoa+0x10>
 8003d14:	2100      	movs	r1, #0
 8003d16:	e7f9      	b.n	8003d0c <__itoa+0x24>

08003d18 <itoa>:
 8003d18:	f7ff bfe6 	b.w	8003ce8 <__itoa>

08003d1c <__utoa>:
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1e:	b08b      	sub	sp, #44	@ 0x2c
 8003d20:	4605      	mov	r5, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	466e      	mov	r6, sp
 8003d26:	4c1d      	ldr	r4, [pc, #116]	@ (8003d9c <__utoa+0x80>)
 8003d28:	f104 0c20 	add.w	ip, r4, #32
 8003d2c:	4637      	mov	r7, r6
 8003d2e:	6820      	ldr	r0, [r4, #0]
 8003d30:	6861      	ldr	r1, [r4, #4]
 8003d32:	3408      	adds	r4, #8
 8003d34:	c703      	stmia	r7!, {r0, r1}
 8003d36:	4564      	cmp	r4, ip
 8003d38:	463e      	mov	r6, r7
 8003d3a:	d1f7      	bne.n	8003d2c <__utoa+0x10>
 8003d3c:	7921      	ldrb	r1, [r4, #4]
 8003d3e:	6820      	ldr	r0, [r4, #0]
 8003d40:	7139      	strb	r1, [r7, #4]
 8003d42:	1e91      	subs	r1, r2, #2
 8003d44:	2922      	cmp	r1, #34	@ 0x22
 8003d46:	6038      	str	r0, [r7, #0]
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	d904      	bls.n	8003d58 <__utoa+0x3c>
 8003d4e:	7019      	strb	r1, [r3, #0]
 8003d50:	460b      	mov	r3, r1
 8003d52:	4618      	mov	r0, r3
 8003d54:	b00b      	add	sp, #44	@ 0x2c
 8003d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d58:	1e58      	subs	r0, r3, #1
 8003d5a:	4684      	mov	ip, r0
 8003d5c:	fbb5 f7f2 	udiv	r7, r5, r2
 8003d60:	fb02 5617 	mls	r6, r2, r7, r5
 8003d64:	3628      	adds	r6, #40	@ 0x28
 8003d66:	446e      	add	r6, sp
 8003d68:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003d72:	462e      	mov	r6, r5
 8003d74:	42b2      	cmp	r2, r6
 8003d76:	463d      	mov	r5, r7
 8003d78:	f101 0101 	add.w	r1, r1, #1
 8003d7c:	d9ee      	bls.n	8003d5c <__utoa+0x40>
 8003d7e:	2200      	movs	r2, #0
 8003d80:	545a      	strb	r2, [r3, r1]
 8003d82:	1919      	adds	r1, r3, r4
 8003d84:	1aa5      	subs	r5, r4, r2
 8003d86:	42aa      	cmp	r2, r5
 8003d88:	dae3      	bge.n	8003d52 <__utoa+0x36>
 8003d8a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003d8e:	780e      	ldrb	r6, [r1, #0]
 8003d90:	3201      	adds	r2, #1
 8003d92:	7006      	strb	r6, [r0, #0]
 8003d94:	f801 5901 	strb.w	r5, [r1], #-1
 8003d98:	e7f4      	b.n	8003d84 <__utoa+0x68>
 8003d9a:	bf00      	nop
 8003d9c:	08003eab 	.word	0x08003eab

08003da0 <memset>:
 8003da0:	4603      	mov	r3, r0
 8003da2:	4402      	add	r2, r0
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d100      	bne.n	8003daa <memset+0xa>
 8003da8:	4770      	bx	lr
 8003daa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dae:	e7f9      	b.n	8003da4 <memset+0x4>

08003db0 <__libc_init_array>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	2600      	movs	r6, #0
 8003db4:	4d0c      	ldr	r5, [pc, #48]	@ (8003de8 <__libc_init_array+0x38>)
 8003db6:	4c0d      	ldr	r4, [pc, #52]	@ (8003dec <__libc_init_array+0x3c>)
 8003db8:	1b64      	subs	r4, r4, r5
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	42a6      	cmp	r6, r4
 8003dbe:	d109      	bne.n	8003dd4 <__libc_init_array+0x24>
 8003dc0:	f000 f81a 	bl	8003df8 <_init>
 8003dc4:	2600      	movs	r6, #0
 8003dc6:	4d0a      	ldr	r5, [pc, #40]	@ (8003df0 <__libc_init_array+0x40>)
 8003dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8003df4 <__libc_init_array+0x44>)
 8003dca:	1b64      	subs	r4, r4, r5
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	42a6      	cmp	r6, r4
 8003dd0:	d105      	bne.n	8003dde <__libc_init_array+0x2e>
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd8:	4798      	blx	r3
 8003dda:	3601      	adds	r6, #1
 8003ddc:	e7ee      	b.n	8003dbc <__libc_init_array+0xc>
 8003dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de2:	4798      	blx	r3
 8003de4:	3601      	adds	r6, #1
 8003de6:	e7f2      	b.n	8003dce <__libc_init_array+0x1e>
 8003de8:	08003ed0 	.word	0x08003ed0
 8003dec:	08003ed0 	.word	0x08003ed0
 8003df0:	08003ed0 	.word	0x08003ed0
 8003df4:	08003ed4 	.word	0x08003ed4

08003df8 <_init>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	bf00      	nop
 8003dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfe:	bc08      	pop	{r3}
 8003e00:	469e      	mov	lr, r3
 8003e02:	4770      	bx	lr

08003e04 <_fini>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	bf00      	nop
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr
