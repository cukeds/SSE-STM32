
SSE-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000159c  08006aec  08006aec  00007aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008088  08008088  0000a12c  2**0
                  CONTENTS
  4 .ARM          00000000  08008088  08008088  0000a12c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008088  08008088  0000a12c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008088  08008088  00009088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800808c  0800808c  0000908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08008090  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  2000012c  080081bc  0000a12c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  080081bc  0000a594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129d8  00000000  00000000  0000a155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aaa  00000000  00000000  0001cb2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  000205d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00004e75  00000000  00000000  000219e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b42a  00000000  00000000  0002685d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008edf9  00000000  00000000  00041c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000d0a80  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000fb8  00000000  00000000  000d0ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005520  00000000  00000000  000d1a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d6f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000012c 	.word	0x2000012c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ad4 	.word	0x08006ad4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000130 	.word	0x20000130
 8000148:	08006ad4 	.word	0x08006ad4

0800014c <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f1xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000156:	4802      	ldr	r0, [pc, #8]	@ (8000160 <ILI9341_Select+0x14>)
 8000158:	f003 fad5 	bl	8003706 <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010c00 	.word	0x40010c00

08000164 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800016e:	4802      	ldr	r0, [pc, #8]	@ (8000178 <ILI9341_Unselect+0x14>)
 8000170:	f003 fac9 	bl	8003706 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010c00 	.word	0x40010c00

0800017c <ILI9341_WriteCommand>:
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
}

static void ILI9341_WriteCommand(uint8_t cmd) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	2102      	movs	r1, #2
 800018a:	4807      	ldr	r0, [pc, #28]	@ (80001a8 <ILI9341_WriteCommand+0x2c>)
 800018c:	f003 fabb 	bl	8003706 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000190:	1df9      	adds	r1, r7, #7
 8000192:	f04f 33ff 	mov.w	r3, #4294967295
 8000196:	2201      	movs	r2, #1
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <ILI9341_WriteCommand+0x30>)
 800019a:	f004 f8c1 	bl	8004320 <HAL_SPI_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010c00 	.word	0x40010c00
 80001ac:	200001cc 	.word	0x200001cc

080001b0 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
 80001b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2102      	movs	r1, #2
 80001be:	4811      	ldr	r0, [pc, #68]	@ (8000204 <ILI9341_WriteData+0x54>)
 80001c0:	f003 faa1 	bl	8003706 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80001c4:	e015      	b.n	80001f2 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80001cc:	bf28      	it	cs
 80001ce:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80001d2:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001d4:	89fa      	ldrh	r2, [r7, #14]
 80001d6:	f04f 33ff 	mov.w	r3, #4294967295
 80001da:	6879      	ldr	r1, [r7, #4]
 80001dc:	480a      	ldr	r0, [pc, #40]	@ (8000208 <ILI9341_WriteData+0x58>)
 80001de:	f004 f89f 	bl	8004320 <HAL_SPI_Transmit>
        buff += chunk_size;
 80001e2:	89fb      	ldrh	r3, [r7, #14]
 80001e4:	687a      	ldr	r2, [r7, #4]
 80001e6:	4413      	add	r3, r2
 80001e8:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80001ea:	89fb      	ldrh	r3, [r7, #14]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	1ad3      	subs	r3, r2, r3
 80001f0:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d1e6      	bne.n	80001c6 <ILI9341_WriteData+0x16>
    }
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40010c00 	.word	0x40010c00
 8000208:	200001cc 	.word	0x200001cc

0800020c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800020c:	b590      	push	{r4, r7, lr}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	4604      	mov	r4, r0
 8000214:	4608      	mov	r0, r1
 8000216:	4611      	mov	r1, r2
 8000218:	461a      	mov	r2, r3
 800021a:	4623      	mov	r3, r4
 800021c:	80fb      	strh	r3, [r7, #6]
 800021e:	4603      	mov	r3, r0
 8000220:	80bb      	strh	r3, [r7, #4]
 8000222:	460b      	mov	r3, r1
 8000224:	807b      	strh	r3, [r7, #2]
 8000226:	4613      	mov	r3, r2
 8000228:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800022a:	202a      	movs	r0, #42	@ 0x2a
 800022c:	f7ff ffa6 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000230:	88fb      	ldrh	r3, [r7, #6]
 8000232:	0a1b      	lsrs	r3, r3, #8
 8000234:	b29b      	uxth	r3, r3
 8000236:	b2db      	uxtb	r3, r3
 8000238:	733b      	strb	r3, [r7, #12]
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	737b      	strb	r3, [r7, #13]
 8000240:	887b      	ldrh	r3, [r7, #2]
 8000242:	0a1b      	lsrs	r3, r3, #8
 8000244:	b29b      	uxth	r3, r3
 8000246:	b2db      	uxtb	r3, r3
 8000248:	73bb      	strb	r3, [r7, #14]
 800024a:	887b      	ldrh	r3, [r7, #2]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000250:	f107 030c 	add.w	r3, r7, #12
 8000254:	2104      	movs	r1, #4
 8000256:	4618      	mov	r0, r3
 8000258:	f7ff ffaa 	bl	80001b0 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800025c:	202b      	movs	r0, #43	@ 0x2b
 800025e:	f7ff ff8d 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000262:	88bb      	ldrh	r3, [r7, #4]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b29b      	uxth	r3, r3
 8000268:	b2db      	uxtb	r3, r3
 800026a:	723b      	strb	r3, [r7, #8]
 800026c:	88bb      	ldrh	r3, [r7, #4]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	727b      	strb	r3, [r7, #9]
 8000272:	883b      	ldrh	r3, [r7, #0]
 8000274:	0a1b      	lsrs	r3, r3, #8
 8000276:	b29b      	uxth	r3, r3
 8000278:	b2db      	uxtb	r3, r3
 800027a:	72bb      	strb	r3, [r7, #10]
 800027c:	883b      	ldrh	r3, [r7, #0]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	2104      	movs	r1, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff91 	bl	80001b0 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800028e:	202c      	movs	r0, #44	@ 0x2c
 8000290:	f7ff ff74 	bl	800017c <ILI9341_WriteCommand>
}
 8000294:	bf00      	nop
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	bd90      	pop	{r4, r7, pc}

0800029c <ILI9341_Init>:

void ILI9341_Init() {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b09b      	sub	sp, #108	@ 0x6c
 80002a0:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 80002a2:	f7ff ff5f 	bl	8000164 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80002a6:	f000 fa67 	bl	8000778 <ILI9341_TouchUnselect>
    ILI9341_Select();
 80002aa:	f7ff ff4f 	bl	800014c <ILI9341_Select>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80002ae:	2001      	movs	r0, #1
 80002b0:	f7ff ff64 	bl	800017c <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80002b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b8:	f002 ff58 	bl	800316c <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80002bc:	20cb      	movs	r0, #203	@ 0xcb
 80002be:	f7ff ff5d 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80002c2:	4a87      	ldr	r2, [pc, #540]	@ (80004e0 <ILI9341_Init+0x244>)
 80002c4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80002c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002cc:	6018      	str	r0, [r3, #0]
 80002ce:	3304      	adds	r3, #4
 80002d0:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80002d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80002d6:	2105      	movs	r1, #5
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff69 	bl	80001b0 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80002de:	20cf      	movs	r0, #207	@ 0xcf
 80002e0:	f7ff ff4c 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80002e4:	4a7f      	ldr	r2, [pc, #508]	@ (80004e4 <ILI9341_Init+0x248>)
 80002e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002ea:	6812      	ldr	r2, [r2, #0]
 80002ec:	4611      	mov	r1, r2
 80002ee:	8019      	strh	r1, [r3, #0]
 80002f0:	3302      	adds	r3, #2
 80002f2:	0c12      	lsrs	r2, r2, #16
 80002f4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80002f6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002fa:	2103      	movs	r1, #3
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff57 	bl	80001b0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000302:	20e8      	movs	r0, #232	@ 0xe8
 8000304:	f7ff ff3a 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000308:	4a77      	ldr	r2, [pc, #476]	@ (80004e8 <ILI9341_Init+0x24c>)
 800030a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800030e:	6812      	ldr	r2, [r2, #0]
 8000310:	4611      	mov	r1, r2
 8000312:	8019      	strh	r1, [r3, #0]
 8000314:	3302      	adds	r3, #2
 8000316:	0c12      	lsrs	r2, r2, #16
 8000318:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800031a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800031e:	2103      	movs	r1, #3
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff45 	bl	80001b0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000326:	20ea      	movs	r0, #234	@ 0xea
 8000328:	f7ff ff28 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800032c:	2300      	movs	r3, #0
 800032e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000332:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000336:	2102      	movs	r1, #2
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff39 	bl	80001b0 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800033e:	20ed      	movs	r0, #237	@ 0xed
 8000340:	f7ff ff1c 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000344:	4b69      	ldr	r3, [pc, #420]	@ (80004ec <ILI9341_Init+0x250>)
 8000346:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000348:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800034c:	2104      	movs	r1, #4
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff2e 	bl	80001b0 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000354:	20f7      	movs	r0, #247	@ 0xf7
 8000356:	f7ff ff11 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800035a:	2320      	movs	r3, #32
 800035c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000360:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000364:	2101      	movs	r1, #1
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff22 	bl	80001b0 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 800036c:	20c0      	movs	r0, #192	@ 0xc0
 800036e:	f7ff ff05 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000372:	2323      	movs	r3, #35	@ 0x23
 8000374:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000378:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800037c:	2101      	movs	r1, #1
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff16 	bl	80001b0 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000384:	20c1      	movs	r0, #193	@ 0xc1
 8000386:	f7ff fef9 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800038a:	2310      	movs	r3, #16
 800038c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000390:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000394:	2101      	movs	r1, #1
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff0a 	bl	80001b0 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 800039c:	20c5      	movs	r0, #197	@ 0xc5
 800039e:	f7ff feed 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80003a2:	f642 033e 	movw	r3, #10302	@ 0x283e
 80003a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80003aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003ae:	2102      	movs	r1, #2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff fefd 	bl	80001b0 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80003b6:	20c7      	movs	r0, #199	@ 0xc7
 80003b8:	f7ff fee0 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80003bc:	2386      	movs	r3, #134	@ 0x86
 80003be:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80003c2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003c6:	2101      	movs	r1, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff fef1 	bl	80001b0 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80003ce:	2036      	movs	r0, #54	@ 0x36
 80003d0:	f7ff fed4 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80003d4:	2348      	movs	r3, #72	@ 0x48
 80003d6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 80003da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003de:	2101      	movs	r1, #1
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff fee5 	bl	80001b0 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80003e6:	203a      	movs	r0, #58	@ 0x3a
 80003e8:	f7ff fec8 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80003ec:	2355      	movs	r3, #85	@ 0x55
 80003ee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 80003f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80003f6:	2101      	movs	r1, #1
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff fed9 	bl	80001b0 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80003fe:	20b1      	movs	r0, #177	@ 0xb1
 8000400:	f7ff febc 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000404:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000408:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 800040a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800040e:	2102      	movs	r1, #2
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff fecd 	bl	80001b0 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000416:	20b6      	movs	r0, #182	@ 0xb6
 8000418:	f7ff feb0 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800041c:	4a34      	ldr	r2, [pc, #208]	@ (80004f0 <ILI9341_Init+0x254>)
 800041e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000422:	6812      	ldr	r2, [r2, #0]
 8000424:	4611      	mov	r1, r2
 8000426:	8019      	strh	r1, [r3, #0]
 8000428:	3302      	adds	r3, #2
 800042a:	0c12      	lsrs	r2, r2, #16
 800042c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800042e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000432:	2103      	movs	r1, #3
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff febb 	bl	80001b0 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800043a:	20f2      	movs	r0, #242	@ 0xf2
 800043c:	f7ff fe9e 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000440:	2300      	movs	r3, #0
 8000442:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8000446:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800044a:	2101      	movs	r1, #1
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff feaf 	bl	80001b0 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8000452:	2026      	movs	r0, #38	@ 0x26
 8000454:	f7ff fe92 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000458:	2301      	movs	r3, #1
 800045a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 800045e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000462:	2101      	movs	r1, #1
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fea3 	bl	80001b0 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800046a:	20e0      	movs	r0, #224	@ 0xe0
 800046c:	f7ff fe86 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000470:	4b20      	ldr	r3, [pc, #128]	@ (80004f4 <ILI9341_Init+0x258>)
 8000472:	f107 0414 	add.w	r4, r7, #20
 8000476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000478:	c407      	stmia	r4!, {r0, r1, r2}
 800047a:	8023      	strh	r3, [r4, #0]
 800047c:	3402      	adds	r4, #2
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	210f      	movs	r1, #15
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fe91 	bl	80001b0 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800048e:	20e1      	movs	r0, #225	@ 0xe1
 8000490:	f7ff fe74 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000494:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <ILI9341_Init+0x25c>)
 8000496:	1d3c      	adds	r4, r7, #4
 8000498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800049a:	c407      	stmia	r4!, {r0, r1, r2}
 800049c:	8023      	strh	r3, [r4, #0]
 800049e:	3402      	adds	r4, #2
 80004a0:	0c1b      	lsrs	r3, r3, #16
 80004a2:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	210f      	movs	r1, #15
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff fe81 	bl	80001b0 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80004ae:	2011      	movs	r0, #17
 80004b0:	f7ff fe64 	bl	800017c <ILI9341_WriteCommand>
    HAL_Delay(120);
 80004b4:	2078      	movs	r0, #120	@ 0x78
 80004b6:	f002 fe59 	bl	800316c <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80004ba:	2029      	movs	r0, #41	@ 0x29
 80004bc:	f7ff fe5e 	bl	800017c <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80004c0:	2036      	movs	r0, #54	@ 0x36
 80004c2:	f7ff fe5b 	bl	800017c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80004c6:	2328      	movs	r3, #40	@ 0x28
 80004c8:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80004ca:	463b      	mov	r3, r7
 80004cc:	2101      	movs	r1, #1
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fe6e 	bl	80001b0 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80004d4:	f7ff fe46 	bl	8000164 <ILI9341_Unselect>
}
 80004d8:	bf00      	nop
 80004da:	376c      	adds	r7, #108	@ 0x6c
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	08006aec 	.word	0x08006aec
 80004e4:	08006af4 	.word	0x08006af4
 80004e8:	08006af8 	.word	0x08006af8
 80004ec:	81120364 	.word	0x81120364
 80004f0:	08006afc 	.word	0x08006afc
 80004f4:	08006b00 	.word	0x08006b00
 80004f8:	08006b10 	.word	0x08006b10

080004fc <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80004fc:	b082      	sub	sp, #8
 80004fe:	b580      	push	{r7, lr}
 8000500:	b088      	sub	sp, #32
 8000502:	af00      	add	r7, sp, #0
 8000504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
 800050a:	460b      	mov	r3, r1
 800050c:	80bb      	strh	r3, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000512:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000516:	461a      	mov	r2, r3
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	4413      	add	r3, r2
 800051c:	b29b      	uxth	r3, r3
 800051e:	3b01      	subs	r3, #1
 8000520:	b29a      	uxth	r2, r3
 8000522:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000526:	4619      	mov	r1, r3
 8000528:	88bb      	ldrh	r3, [r7, #4]
 800052a:	440b      	add	r3, r1
 800052c:	b29b      	uxth	r3, r3
 800052e:	3b01      	subs	r3, #1
 8000530:	b29b      	uxth	r3, r3
 8000532:	88b9      	ldrh	r1, [r7, #4]
 8000534:	88f8      	ldrh	r0, [r7, #6]
 8000536:	f7ff fe69 	bl	800020c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
 800053e:	e041      	b.n	80005c4 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8000540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	3b20      	subs	r3, #32
 8000546:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800054a:	fb01 f303 	mul.w	r3, r1, r3
 800054e:	4619      	mov	r1, r3
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	440b      	add	r3, r1
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4413      	add	r3, r2
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800055c:	2300      	movs	r3, #0
 800055e:	61bb      	str	r3, [r7, #24]
 8000560:	e027      	b.n	80005b2 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00e      	beq.n	8000590 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000572:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	b29b      	uxth	r3, r3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	743b      	strb	r3, [r7, #16]
 800057c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800057e:	b2db      	uxtb	r3, r3
 8000580:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	2102      	movs	r1, #2
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe11 	bl	80001b0 <ILI9341_WriteData>
 800058e:	e00d      	b.n	80005ac <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000590:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000592:	0a1b      	lsrs	r3, r3, #8
 8000594:	b29b      	uxth	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	733b      	strb	r3, [r7, #12]
 800059a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800059c:	b2db      	uxtb	r3, r3
 800059e:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2102      	movs	r1, #2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe02 	bl	80001b0 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	3301      	adds	r3, #1
 80005b0:	61bb      	str	r3, [r7, #24]
 80005b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80005b6:	461a      	mov	r2, r3
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d3d1      	bcc.n	8000562 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	3301      	adds	r3, #1
 80005c2:	61fb      	str	r3, [r7, #28]
 80005c4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80005c8:	461a      	mov	r2, r3
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d3b7      	bcc.n	8000540 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005dc:	b002      	add	sp, #8
 80005de:	4770      	bx	lr

080005e0 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80005e0:	b082      	sub	sp, #8
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af04      	add	r7, sp, #16
 80005e8:	603a      	str	r2, [r7, #0]
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	4603      	mov	r3, r0
 80005ee:	80fb      	strh	r3, [r7, #6]
 80005f0:	460b      	mov	r3, r1
 80005f2:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80005f4:	f7ff fdaa 	bl	800014c <ILI9341_Select>

    while(*str) {
 80005f8:	e02e      	b.n	8000658 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	7d3a      	ldrb	r2, [r7, #20]
 80005fe:	4413      	add	r3, r2
 8000600:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000604:	db13      	blt.n	800062e <ILI9341_WriteString+0x4e>
            x = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800060a:	7d7b      	ldrb	r3, [r7, #21]
 800060c:	461a      	mov	r2, r3
 800060e:	88bb      	ldrh	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000614:	88bb      	ldrh	r3, [r7, #4]
 8000616:	7d7a      	ldrb	r2, [r7, #21]
 8000618:	4413      	add	r3, r2
 800061a:	2bef      	cmp	r3, #239	@ 0xef
 800061c:	dc21      	bgt.n	8000662 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b20      	cmp	r3, #32
 8000624:	d103      	bne.n	800062e <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	603b      	str	r3, [r7, #0]
                continue;
 800062c:	e014      	b.n	8000658 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	88b9      	ldrh	r1, [r7, #4]
 8000634:	88f8      	ldrh	r0, [r7, #6]
 8000636:	8c3b      	ldrh	r3, [r7, #32]
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	8bbb      	ldrh	r3, [r7, #28]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	f7ff ff5a 	bl	80004fc <ILI9341_WriteChar>
        x += font.width;
 8000648:	7d3b      	ldrb	r3, [r7, #20]
 800064a:	461a      	mov	r2, r3
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	4413      	add	r3, r2
 8000650:	80fb      	strh	r3, [r7, #6]
        str++;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1cc      	bne.n	80005fa <ILI9341_WriteString+0x1a>
 8000660:	e000      	b.n	8000664 <ILI9341_WriteString+0x84>
                break;
 8000662:	bf00      	nop
    }

    ILI9341_Unselect();
 8000664:	f7ff fd7e 	bl	8000164 <ILI9341_Unselect>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000672:	b002      	add	sp, #8
 8000674:	4770      	bx	lr
	...

08000678 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	4604      	mov	r4, r0
 8000680:	4608      	mov	r0, r1
 8000682:	4611      	mov	r1, r2
 8000684:	461a      	mov	r2, r3
 8000686:	4623      	mov	r3, r4
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	4603      	mov	r3, r0
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	460b      	mov	r3, r1
 8000690:	807b      	strh	r3, [r7, #2]
 8000692:	4613      	mov	r3, r2
 8000694:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800069c:	d252      	bcs.n	8000744 <ILI9341_FillRectangle+0xcc>
 800069e:	88bb      	ldrh	r3, [r7, #4]
 80006a0:	2bef      	cmp	r3, #239	@ 0xef
 80006a2:	d84f      	bhi.n	8000744 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80006a4:	88fa      	ldrh	r2, [r7, #6]
 80006a6:	887b      	ldrh	r3, [r7, #2]
 80006a8:	4413      	add	r3, r2
 80006aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006ae:	dd03      	ble.n	80006b8 <ILI9341_FillRectangle+0x40>
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80006b6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80006b8:	88ba      	ldrh	r2, [r7, #4]
 80006ba:	883b      	ldrh	r3, [r7, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	2bf0      	cmp	r3, #240	@ 0xf0
 80006c0:	dd03      	ble.n	80006ca <ILI9341_FillRectangle+0x52>
 80006c2:	88bb      	ldrh	r3, [r7, #4]
 80006c4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80006c8:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80006ca:	f7ff fd3f 	bl	800014c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80006ce:	88fa      	ldrh	r2, [r7, #6]
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	4413      	add	r3, r2
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	3b01      	subs	r3, #1
 80006d8:	b29c      	uxth	r4, r3
 80006da:	88ba      	ldrh	r2, [r7, #4]
 80006dc:	883b      	ldrh	r3, [r7, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	3b01      	subs	r3, #1
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	88b9      	ldrh	r1, [r7, #4]
 80006e8:	88f8      	ldrh	r0, [r7, #6]
 80006ea:	4622      	mov	r2, r4
 80006ec:	f7ff fd8e 	bl	800020c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80006f0:	8c3b      	ldrh	r3, [r7, #32]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	733b      	strb	r3, [r7, #12]
 80006fa:	8c3b      	ldrh	r3, [r7, #32]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2102      	movs	r1, #2
 8000704:	4811      	ldr	r0, [pc, #68]	@ (800074c <ILI9341_FillRectangle+0xd4>)
 8000706:	f002 fffe 	bl	8003706 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800070a:	883b      	ldrh	r3, [r7, #0]
 800070c:	80bb      	strh	r3, [r7, #4]
 800070e:	e013      	b.n	8000738 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	80fb      	strh	r3, [r7, #6]
 8000714:	e00a      	b.n	800072c <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000716:	f107 010c 	add.w	r1, r7, #12
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	2202      	movs	r2, #2
 8000720:	480b      	ldr	r0, [pc, #44]	@ (8000750 <ILI9341_FillRectangle+0xd8>)
 8000722:	f003 fdfd 	bl	8004320 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	3b01      	subs	r3, #1
 800072a:	80fb      	strh	r3, [r7, #6]
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f1      	bne.n	8000716 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000732:	88bb      	ldrh	r3, [r7, #4]
 8000734:	3b01      	subs	r3, #1
 8000736:	80bb      	strh	r3, [r7, #4]
 8000738:	88bb      	ldrh	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1e8      	bne.n	8000710 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 800073e:	f7ff fd11 	bl	8000164 <ILI9341_Unselect>
 8000742:	e000      	b.n	8000746 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000744:	bf00      	nop
}
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	40010c00 	.word	0x40010c00
 8000750:	200001cc 	.word	0x200001cc

08000754 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af02      	add	r7, sp, #8
 800075a:	4603      	mov	r3, r0
 800075c:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	23f0      	movs	r3, #240	@ 0xf0
 8000764:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000768:	2100      	movs	r1, #0
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff ff84 	bl	8000678 <ILI9341_FillRectangle>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000782:	4802      	ldr	r0, [pc, #8]	@ (800078c <ILI9341_TouchUnselect+0x14>)
 8000784:	f002 ffbf 	bl	8003706 <HAL_GPIO_WritePin>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40010800 	.word	0x40010800

08000790 <HAL_TIM_IC_CaptureCallback>:
static int16_t speed = 0;

static boolean reset = False;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	if(reset){
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <HAL_TIM_IC_CaptureCallback+0x78>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d006      	beq.n	80007ae <HAL_TIM_IC_CaptureCallback+0x1e>
		__HAL_TIM_SET_COUNTER(htim, 0);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	@ 0x24
		reset = False;
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <HAL_TIM_IC_CaptureCallback+0x78>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
	}
	counter = __HAL_TIM_GET_COUNTER(htim);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b4:	4a15      	ldr	r2, [pc, #84]	@ (800080c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80007b6:	6013      	str	r3, [r2, #0]
	bsp_count = (int16_t) counter;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b21a      	sxth	r2, r3
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <HAL_TIM_IC_CaptureCallback+0x80>)
 80007c0:	801a      	strh	r2, [r3, #0]

	if(bsp_count > previous_count){
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <HAL_TIM_IC_CaptureCallback+0x80>)
 80007c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <HAL_TIM_IC_CaptureCallback+0x84>)
 80007ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	dd03      	ble.n	80007da <HAL_TIM_IC_CaptureCallback+0x4a>
		direction = ENCODER_DIRECTION_RIGHT;
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <HAL_TIM_IC_CaptureCallback+0x88>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	801a      	strh	r2, [r3, #0]
 80007d8:	e00b      	b.n	80007f2 <HAL_TIM_IC_CaptureCallback+0x62>
	}
	else if(bsp_count < previous_count){
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <HAL_TIM_IC_CaptureCallback+0x80>)
 80007dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <HAL_TIM_IC_CaptureCallback+0x84>)
 80007e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	da03      	bge.n	80007f2 <HAL_TIM_IC_CaptureCallback+0x62>
		direction = ENCODER_DIRECTION_LEFT;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <HAL_TIM_IC_CaptureCallback+0x88>)
 80007ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f0:	801a      	strh	r2, [r3, #0]
	}
	previous_count = bsp_count;
 80007f2:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <HAL_TIM_IC_CaptureCallback+0x80>)
 80007f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_TIM_IC_CaptureCallback+0x84>)
 80007fa:	801a      	strh	r2, [r3, #0]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000152 	.word	0x20000152
 800080c:	20000148 	.word	0x20000148
 8000810:	2000014e 	.word	0x2000014e
 8000814:	2000014c 	.word	0x2000014c
 8000818:	20000150 	.word	0x20000150

0800081c <BSP_ENCODER_Init>:

void BSP_ENCODER_Init(){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // For 2 channels
 8000820:	213c      	movs	r1, #60	@ 0x3c
 8000822:	4802      	ldr	r0, [pc, #8]	@ (800082c <BSP_ENCODER_Init+0x10>)
 8000824:	f004 fbfe 	bl	8005024 <HAL_TIM_Encoder_Start_IT>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000280 	.word	0x20000280

08000830 <BSP_ENCODER_GetCount>:

inline uint16_t BSP_ENCODER_GetCount(){
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	return bsp_count/4;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <BSP_ENCODER_GetCount+0x20>)
 8000836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083a:	2b00      	cmp	r3, #0
 800083c:	da00      	bge.n	8000840 <BSP_ENCODER_GetCount+0x10>
 800083e:	3303      	adds	r3, #3
 8000840:	109b      	asrs	r3, r3, #2
 8000842:	b21b      	sxth	r3, r3
 8000844:	b29b      	uxth	r3, r3
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	2000014e 	.word	0x2000014e

08000854 <BSP_ENCODER_GetSwitch>:
	return speed;
}
inline int16_t BSP_ENCODER_GetDirection(){
	return direction;
}
inline int16_t BSP_ENCODER_GetSwitch(){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(ENCODER_PORT, ENCODER_PIN);
 8000858:	2104      	movs	r1, #4
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <BSP_ENCODER_GetSwitch+0x20>)
 800085c:	f002 ff3c 	bl	80036d8 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	b21b      	sxth	r3, r3
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40010800 	.word	0x40010800

08000878 <BSP_ENCODER_ResetEncoder>:
void BSP_ENCODER_WriteSpeed(int16_t _speed){
	speed = _speed;
}

void BSP_ENCODER_ResetEncoder(){
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	counter = 0;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <BSP_ENCODER_ResetEncoder+0x20>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
	bsp_count = 0;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <BSP_ENCODER_ResetEncoder+0x24>)
 8000884:	2200      	movs	r2, #0
 8000886:	801a      	strh	r2, [r3, #0]
	reset = True;
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <BSP_ENCODER_ResetEncoder+0x28>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000148 	.word	0x20000148
 800089c:	2000014e 	.word	0x2000014e
 80008a0:	20000152 	.word	0x20000152

080008a4 <BSP_HCSR501_Init>:
#include <bsp_hcsr501.h>


static boolean allow_readings = False;

inline void BSP_HCSR501_Init(){
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
	allow_readings = True;
 80008a8:	4b03      	ldr	r3, [pc, #12]	@ (80008b8 <BSP_HCSR501_Init+0x14>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000153 	.word	0x20000153

080008bc <BSP_HCSR501_Read>:

inline void BSP_HCSR501_OffTime(){
	allow_readings = False;
}

uint8_t BSP_HCSR501_Read(){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	if(!allow_readings){
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <BSP_HCSR501_Read+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <BSP_HCSR501_Read+0x10>
		return HCSR501_INITIALIZING;
 80008c8:	2302      	movs	r3, #2
 80008ca:	e005      	b.n	80008d8 <BSP_HCSR501_Read+0x1c>
	}
	return HAL_GPIO_ReadPin(HCSR501_PORT, HCSR501_PIN);
 80008cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <BSP_HCSR501_Read+0x24>)
 80008d2:	f002 ff01 	bl	80036d8 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000153 	.word	0x20000153
 80008e0:	40010c00 	.word	0x40010c00

080008e4 <BSP_HCSR501_Ready>:

boolean BSP_HCSR501_Ready(){
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	return allow_readings;
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <BSP_HCSR501_Ready+0x10>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	20000153 	.word	0x20000153

080008f8 <BSP_LCD_Init>:
	BSP_LCD_SendMessage("Initializing: ", 0, 0, True);
 	itoa(params->setup_time - *(params->seconds), time, 10);
	BSP_LCD_SendMessage(time, 0, 1, False);
}

void BSP_LCD_Init(BSP_LCD_SetupParams_TypeDef *params){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	ILI9341_Init();
 8000900:	f7ff fccc 	bl	800029c <ILI9341_Init>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <BSP_LCD_Clear>:


void BSP_LCD_Clear(int* _bg_color){
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	int bg_color = ILI9341_GREEN;
 8000914:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000918:	60fb      	str	r3, [r7, #12]
	if(_bg_color) bg_color = *_bg_color;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <BSP_LCD_Clear+0x1a>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
	ILI9341_FillScreen(bg_color);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	b29b      	uxth	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff12 	bl	8000754 <ILI9341_FillScreen>
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <BSP_LCD_SendMessage>:


void BSP_LCD_SendMessage(char* message, uint8_t col, uint8_t row, boolean clear){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af04      	add	r7, sp, #16
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	4608      	mov	r0, r1
 8000942:	4611      	mov	r1, r2
 8000944:	461a      	mov	r2, r3
 8000946:	4603      	mov	r3, r0
 8000948:	70fb      	strb	r3, [r7, #3]
 800094a:	460b      	mov	r3, r1
 800094c:	70bb      	strb	r3, [r7, #2]
 800094e:	4613      	mov	r3, r2
 8000950:	707b      	strb	r3, [r7, #1]
	BSP_LCD_SendMessageWithParams(message, col, row, clear, NULL, NULL, NULL);
 8000952:	787b      	ldrb	r3, [r7, #1]
 8000954:	78ba      	ldrb	r2, [r7, #2]
 8000956:	78f9      	ldrb	r1, [r7, #3]
 8000958:	2000      	movs	r0, #0
 800095a:	9002      	str	r0, [sp, #8]
 800095c:	2000      	movs	r0, #0
 800095e:	9001      	str	r0, [sp, #4]
 8000960:	2000      	movs	r0, #0
 8000962:	9000      	str	r0, [sp, #0]
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f805 	bl	8000974 <BSP_LCD_SendMessageWithParams>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <BSP_LCD_SendMessageWithParams>:

void BSP_LCD_SendMessageWithParams(char* message, uint8_t col, uint8_t row, boolean clear, FontDef* _font, int* _text_color, int* _bg_color){
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b08b      	sub	sp, #44	@ 0x2c
 8000978:	af04      	add	r7, sp, #16
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	4608      	mov	r0, r1
 800097e:	4611      	mov	r1, r2
 8000980:	461a      	mov	r2, r3
 8000982:	4603      	mov	r3, r0
 8000984:	70fb      	strb	r3, [r7, #3]
 8000986:	460b      	mov	r3, r1
 8000988:	70bb      	strb	r3, [r7, #2]
 800098a:	4613      	mov	r3, r2
 800098c:	707b      	strb	r3, [r7, #1]
	if(clear){
 800098e:	787b      	ldrb	r3, [r7, #1]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <BSP_LCD_SendMessageWithParams+0x26>
		BSP_LCD_Clear(NULL);
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ffb9 	bl	800090c <BSP_LCD_Clear>
	}
	int text_color = ILI9341_BLACK, bg_color = ILI9341_WHITE;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009a2:	613b      	str	r3, [r7, #16]
    FontDef *font = _font ? _font : &Font_16x26;
 80009a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <BSP_LCD_SendMessageWithParams+0x3a>
 80009aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ac:	e000      	b.n	80009b0 <BSP_LCD_SendMessageWithParams+0x3c>
 80009ae:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <BSP_LCD_SendMessageWithParams+0x84>)
 80009b0:	60fb      	str	r3, [r7, #12]
    if(_text_color) text_color = *_text_color;
 80009b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <BSP_LCD_SendMessageWithParams+0x4a>
 80009b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	617b      	str	r3, [r7, #20]
	if(_bg_color) bg_color = *_bg_color;
 80009be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <BSP_LCD_SendMessageWithParams+0x56>
 80009c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	613b      	str	r3, [r7, #16]
	ILI9341_WriteString(col, row, message, *(font), text_color, bg_color);
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	b298      	uxth	r0, r3
 80009ce:	78bb      	ldrb	r3, [r7, #2]
 80009d0:	b29c      	uxth	r4, r3
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	b299      	uxth	r1, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	9102      	str	r1, [sp, #8]
 80009de:	9201      	str	r2, [sp, #4]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	9200      	str	r2, [sp, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4621      	mov	r1, r4
 80009ea:	f7ff fdf9 	bl	80005e0 <ILI9341_WriteString>
}
 80009ee:	bf00      	nop
 80009f0:	371c      	adds	r7, #28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000000 	.word	0x20000000

080009fc <BSP_LCD_ADD_STATUS>:

int BSP_LCD_ADD_STATUS(uint8_t symbol[8], boolean default_value){
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	status[status_index] = default_value;
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <BSP_LCD_ADD_STATUS+0x2c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4907      	ldr	r1, [pc, #28]	@ (8000a2c <BSP_LCD_ADD_STATUS+0x30>)
 8000a0e:	78fa      	ldrb	r2, [r7, #3]
 8000a10:	54ca      	strb	r2, [r1, r3]
	return status_index++;
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <BSP_LCD_ADD_STATUS+0x2c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	4903      	ldr	r1, [pc, #12]	@ (8000a28 <BSP_LCD_ADD_STATUS+0x2c>)
 8000a1a:	600a      	str	r2, [r1, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000160 	.word	0x20000160
 8000a2c:	20000154 	.word	0x20000154

08000a30 <BSP_LCD_UPDATE_STATUS>:

void BSP_LCD_UPDATE_STATUS(uint8_t idx, boolean value){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
	status[idx] = value;
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4904      	ldr	r1, [pc, #16]	@ (8000a54 <BSP_LCD_UPDATE_STATUS+0x24>)
 8000a44:	79ba      	ldrb	r2, [r7, #6]
 8000a46:	54ca      	strb	r2, [r1, r3]
	BSP_LCD_DISPLAY_STATUS();
 8000a48:	f000 f806 	bl	8000a58 <BSP_LCD_DISPLAY_STATUS>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000154 	.word	0x20000154

08000a58 <BSP_LCD_DISPLAY_STATUS>:

void BSP_LCD_DISPLAY_STATUS(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af04      	add	r7, sp, #16
	for(int i = 0; i < status_index; i++){
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	e025      	b.n	8000ab0 <BSP_LCD_DISPLAY_STATUS+0x58>
		if(status[i]){
 8000a64:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <BSP_LCD_DISPLAY_STATUS+0x6c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00e      	beq.n	8000a8e <BSP_LCD_DISPLAY_STATUS+0x36>
			ILI9341_WriteString(0, 50, "STATUS", Font_16x26, ILI9341_BLACK, ILI9341_WHITE);
 8000a70:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <BSP_LCD_DISPLAY_STATUS+0x70>)
 8000a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a76:	9202      	str	r2, [sp, #8]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	9201      	str	r2, [sp, #4]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	9200      	str	r2, [sp, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <BSP_LCD_DISPLAY_STATUS+0x74>)
 8000a84:	2132      	movs	r1, #50	@ 0x32
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff fdaa 	bl	80005e0 <ILI9341_WriteString>
 8000a8c:	e00d      	b.n	8000aaa <BSP_LCD_DISPLAY_STATUS+0x52>

		}else{

			ILI9341_WriteString(0, 50, "", Font_16x26, ILI9341_BLACK, ILI9341_WHITE);
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <BSP_LCD_DISPLAY_STATUS+0x70>)
 8000a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a94:	9202      	str	r2, [sp, #8]
 8000a96:	2200      	movs	r2, #0
 8000a98:	9201      	str	r2, [sp, #4]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	9200      	str	r2, [sp, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad0 <BSP_LCD_DISPLAY_STATUS+0x78>)
 8000aa2:	2132      	movs	r1, #50	@ 0x32
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fd9b 	bl	80005e0 <ILI9341_WriteString>
	for(int i = 0; i < status_index; i++){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3301      	adds	r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <BSP_LCD_DISPLAY_STATUS+0x7c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	dbd4      	blt.n	8000a64 <BSP_LCD_DISPLAY_STATUS+0xc>
		}
	}
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000154 	.word	0x20000154
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	08006b30 	.word	0x08006b30
 8000ad0:	08006b38 	.word	0x08006b38
 8000ad4:	20000160 	.word	0x20000160

08000ad8 <BSP_RC522_Init>:
#include "bsp_rc522.h"
#include <string.h>

void BSP_RC522_Init(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	 MFRC522_Init();
 8000adc:	f000 fc72 	bl	80013c4 <MFRC522_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <BSP_RC522_GetSerialNumber>:

uint8_t BSP_RC522_GetSerialNumber(uint8_t* sNum){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t str[MAX_LEN];
	status = MFRC522_Request(PICC_REQALL, str);
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4619      	mov	r1, r3
 8000af2:	2052      	movs	r0, #82	@ 0x52
 8000af4:	f000 fd5d 	bl	80015b2 <MFRC522_Request>
 8000af8:	4603      	mov	r3, r0
 8000afa:	77fb      	strb	r3, [r7, #31]
	status = MFRC522_Anticoll(str);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fd7b 	bl	80015fc <MFRC522_Anticoll>
 8000b06:	4603      	mov	r3, r0
 8000b08:	77fb      	strb	r3, [r7, #31]
	if(status == MI_OK){
 8000b0a:	7ffb      	ldrb	r3, [r7, #31]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d106      	bne.n	8000b1e <BSP_RC522_GetSerialNumber+0x3a>
		memcpy(sNum, str, 5);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2205      	movs	r2, #5
 8000b16:	4619      	mov	r1, r3
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f005 fb7f 	bl	800621c <memcpy>
	}
	return status;
 8000b1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b64      	ldr	r3, [pc, #400]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a63      	ldr	r2, [pc, #396]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b61      	ldr	r3, [pc, #388]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b54:	4b5e      	ldr	r3, [pc, #376]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a5d      	ldr	r2, [pc, #372]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b5a:	f043 0320 	orr.w	r3, r3, #32
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b5b      	ldr	r3, [pc, #364]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0320 	and.w	r3, r3, #32
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b58      	ldr	r3, [pc, #352]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a57      	ldr	r2, [pc, #348]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b55      	ldr	r3, [pc, #340]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b52      	ldr	r3, [pc, #328]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a51      	ldr	r2, [pc, #324]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd0 <MX_GPIO_Init+0x1a8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba2:	484c      	ldr	r0, [pc, #304]	@ (8000cd4 <MX_GPIO_Init+0x1ac>)
 8000ba4:	f002 fdaf 	bl	8003706 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2110      	movs	r1, #16
 8000bac:	484a      	ldr	r0, [pc, #296]	@ (8000cd8 <MX_GPIO_Init+0x1b0>)
 8000bae:	f002 fdaa 	bl	8003706 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4849      	ldr	r0, [pc, #292]	@ (8000cdc <MX_GPIO_Init+0x1b4>)
 8000bb8:	f002 fda5 	bl	8003706 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_11|CE_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f641 4102 	movw	r1, #7170	@ 0x1c02
 8000bc2:	4846      	ldr	r0, [pc, #280]	@ (8000cdc <MX_GPIO_Init+0x1b4>)
 8000bc4:	f002 fd9f 	bl	8003706 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bce:	4842      	ldr	r0, [pc, #264]	@ (8000cd8 <MX_GPIO_Init+0x1b0>)
 8000bd0:	f002 fd99 	bl	8003706 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	4619      	mov	r1, r3
 8000bec:	4839      	ldr	r0, [pc, #228]	@ (8000cd4 <MX_GPIO_Init+0x1ac>)
 8000bee:	f002 fbef 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder_Switch_Pin;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce0 <MX_GPIO_Init+0x1b8>)
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_Switch_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4619      	mov	r1, r3
 8000c04:	4834      	ldr	r0, [pc, #208]	@ (8000cd8 <MX_GPIO_Init+0x1b0>)
 8000c06:	f002 fbe3 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI2_CSN_Pin;
 8000c0a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	482d      	ldr	r0, [pc, #180]	@ (8000cd8 <MX_GPIO_Init+0x1b0>)
 8000c24:	f002 fbd4 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RST_Pin|CE_Pin;
 8000c28:	f241 0301 	movw	r3, #4097	@ 0x1001
 8000c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4826      	ldr	r0, [pc, #152]	@ (8000cdc <MX_GPIO_Init+0x1b4>)
 8000c42:	f002 fbc5 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB11 */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_11;
 8000c46:	f640 4302 	movw	r3, #3074	@ 0xc02
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	@ (8000cdc <MX_GPIO_Init+0x1b4>)
 8000c60:	f002 fbb6 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000c64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_GPIO_Init+0x1bc>)
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4619      	mov	r1, r3
 8000c78:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <MX_GPIO_Init+0x1b0>)
 8000c7a:	f002 fba9 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c84:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <MX_GPIO_Init+0x1b8>)
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4619      	mov	r1, r3
 8000c92:	4812      	ldr	r0, [pc, #72]	@ (8000cdc <MX_GPIO_Init+0x1b4>)
 8000c94:	f002 fb9c 	bl	80033d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f002 fb60 	bl	8003362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ca2:	2008      	movs	r0, #8
 8000ca4:	f002 fb79 	bl	800339a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2017      	movs	r0, #23
 8000cae:	f002 fb58 	bl	8003362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cb2:	2017      	movs	r0, #23
 8000cb4:	f002 fb71 	bl	800339a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2028      	movs	r0, #40	@ 0x28
 8000cbe:	f002 fb50 	bl	8003362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc2:	2028      	movs	r0, #40	@ 0x28
 8000cc4:	f002 fb69 	bl	800339a <HAL_NVIC_EnableIRQ>

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	10310000 	.word	0x10310000
 8000ce4:	10210000 	.word	0x10210000

08000ce8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000cee:	4a13      	ldr	r2, [pc, #76]	@ (8000d3c <MX_I2C1_Init+0x54>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000cf4:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <MX_I2C1_Init+0x58>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000d06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <MX_I2C1_Init+0x50>)
 8000d26:	f002 fd37 	bl	8003798 <HAL_I2C_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d30:	f000 fa90 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000164 	.word	0x20000164
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	00061a80 	.word	0x00061a80

08000d44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a15      	ldr	r2, [pc, #84]	@ (8000db4 <HAL_I2C_MspInit+0x70>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d123      	bne.n	8000dac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7c:	23c0      	movs	r3, #192	@ 0xc0
 8000d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d80:	2312      	movs	r3, #18
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <HAL_I2C_MspInit+0x78>)
 8000d90:	f002 fb1e 	bl	80033d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <HAL_I2C_MspInit+0x74>)
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d9e:	61d3      	str	r3, [r2, #28]
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_I2C_MspInit+0x74>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010c00 	.word	0x40010c00

08000dc0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0c      	blt.n	8000dec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	@ (8000df8 <__NVIC_ClearPendingIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	3360      	adds	r3, #96	@ 0x60
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <RetFalse>:
void received_message();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
boolean RetFalse(){
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	return False;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
	...

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f002 f949 	bl	80030a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f83f 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f7ff fe85 	bl	8000b28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e1e:	f000 fdfd 	bl	8001a1c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e22:	f7ff ff61 	bl	8000ce8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e26:	f000 fc5d 	bl	80016e4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8000e2a:	f000 fc25 	bl	8001678 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000e2e:	f000 fe49 	bl	8001ac4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e32:	f000 fe9d 	bl	8001b70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_SetupParams_TypeDef lcd_params;
//  lcd_params.condition = BSP_HCSR501_Ready;
//  lcd_params.setup_time = (uint8_t) HCSR501_SETUP_SECONDS + HCSR501_SETUP_MINUTES*60;
//  lcd_params.seconds = &motion[4];
  lcd_params.condition = RetFalse;
 8000e36:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <main+0x84>)
 8000e38:	60fb      	str	r3, [r7, #12]
  lcd_params.setup_time = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	743b      	strb	r3, [r7, #16]
  lcd_params.seconds = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]


  BSP_ENCODER_Init();
 8000e42:	f7ff fceb 	bl	800081c <BSP_ENCODER_Init>
  BSP_RC522_Init();
 8000e46:	f7ff fe47 	bl	8000ad8 <BSP_RC522_Init>
  BSP_LCD_Init(&lcd_params);
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fd52 	bl	80008f8 <BSP_LCD_Init>


  BSP_RF_Params_TypeDef rf_params = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	809a      	strh	r2, [r3, #4]
  rf_params.channel = NRF24L01P_CHANNEL;
 8000e5c:	235a      	movs	r3, #90	@ 0x5a
 8000e5e:	80fb      	strh	r3, [r7, #6]
  rf_params.rate = NRF24L01P_RATE;
 8000e60:	2302      	movs	r3, #2
 8000e62:	713b      	strb	r3, [r7, #4]
  rf_params.retransmit_count = NRF24L01P_RETRANSMIT_COUNT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	723b      	strb	r3, [r7, #8]
  BSP_RF_Init(&rf_params);
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f004 fcf2 	bl	8005854 <BSP_RF_Init>
  BSP_RF_Listening();
 8000e70:	f004 fd58 	bl	8005924 <BSP_RF_Listening>
  HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <main+0x88>)
 8000e7c:	f002 fc43 	bl	8003706 <HAL_GPIO_WritePin>
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000e80:	2028      	movs	r0, #40	@ 0x28
 8000e82:	f7ff ff9d 	bl	8000dc0 <__NVIC_ClearPendingIRQ>


  app_init();
 8000e86:	f000 ff6d 	bl	8001d64 <app_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app();
 8000e8a:	f000 ff95 	bl	8001db8 <app>
 8000e8e:	e7fc      	b.n	8000e8a <main+0x7e>
 8000e90:	08000dfd 	.word	0x08000dfd
 8000e94:	40011000 	.word	0x40011000

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	@ 0x40
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	2228      	movs	r2, #40	@ 0x28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f005 f97c 	bl	80061a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ed6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fd9d 	bl	8003a20 <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000eec:	f000 f9b2 	bl	8001254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000efc:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 f80a 	bl	8003f24 <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f16:	f000 f99d 	bl	8001254 <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3740      	adds	r7, #64	@ 0x40
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <received_message>:

/* USER CODE BEGIN 4 */


void received_message()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	if(!BSP_RF_IrqHandler())
 8000f28:	f004 fd20 	bl	800596c <BSP_RF_IrqHandler>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00e      	beq.n	8000f50 <received_message+0x2c>
		return;
	HAL_GPIO_TogglePin(GPIOD, LED_Pin);
 8000f32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f36:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <received_message+0x30>)
 8000f38:	f002 fbfd 	bl	8003736 <HAL_GPIO_TogglePin>
	APP_SETFLAG(MESSAGE_RECEIVED, true);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f001 fe5e 	bl	8002c00 <APP_SETFLAG>
	HAL_GPIO_TogglePin(GPIOD, LED_Pin);
 8000f44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <received_message+0x30>)
 8000f4a:	f002 fbf4 	bl	8003736 <HAL_GPIO_TogglePin>
 8000f4e:	e000      	b.n	8000f52 <received_message+0x2e>
		return;
 8000f50:	bf00      	nop
}
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40011400 	.word	0x40011400

08000f58 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_interrupt_time = 0;

	if(GPIO_Pin == HCSR501_PIN){
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f68:	d115      	bne.n	8000f96 <HAL_GPIO_EXTI_Callback+0x3e>
		if(BSP_HCSR501_Ready()){
 8000f6a:	f7ff fcbb 	bl	80008e4 <BSP_HCSR501_Ready>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d010      	beq.n	8000f96 <HAL_GPIO_EXTI_Callback+0x3e>

			SET_FIELD(GET_APP_DATA(), motion_status, BSP_HCSR501_Read());
 8000f74:	f001 ff96 	bl	8002ea4 <GET_APP_DATA>
 8000f78:	4604      	mov	r4, r0
 8000f7a:	f7ff fc9f 	bl	80008bc <BSP_HCSR501_Read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	7623      	strb	r3, [r4, #24]
			if(!GET_APP_DATA()->motion_status){
 8000f82:	f001 ff8f 	bl	8002ea4 <GET_APP_DATA>
 8000f86:	4603      	mov	r3, r0
 8000f88:	7e1b      	ldrb	r3, [r3, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d103      	bne.n	8000f96 <HAL_GPIO_EXTI_Callback+0x3e>
				APP_SETFLAG(UPDATE_MOTION, True);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2004      	movs	r0, #4
 8000f92:	f001 fe35 	bl	8002c00 <APP_SETFLAG>
//				HAL_TIM_Base_Start_IT(&htim4);
//				BSP_HCSR501_OffTime();
		}
	}

    if (GPIO_Pin == Encoder_Switch_Pin) {
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d119      	bne.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x78>
        uint32_t current_time = HAL_GetTick();
 8000f9c:	f002 f8dc 	bl	8003158 <HAL_GetTick>
 8000fa0:	60f8      	str	r0, [r7, #12]

        // Check if the debounce delay has passed
        if ((current_time - last_interrupt_time) >= DEBOUNCE_DELAY) {
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b63      	cmp	r3, #99	@ 0x63
 8000fac:	d910      	bls.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x78>
            last_interrupt_time = current_time; // Update last interrupt time
 8000fae:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6013      	str	r3, [r2, #0]

            // Check the encoder switch state and update flags
            if (BSP_ENCODER_GetSwitch() == GPIO_PIN_SET) {
 8000fb4:	f7ff fc4e 	bl	8000854 <BSP_ENCODER_GetSwitch>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d104      	bne.n	8000fc8 <HAL_GPIO_EXTI_Callback+0x70>
                APP_SETFLAG(BUTTON_PRESSED, True);
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f001 fe1d 	bl	8002c00 <APP_SETFLAG>
 8000fc6:	e003      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x78>
            } else {
                APP_SETFLAG(BUTTON_PRESSED, False);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2005      	movs	r0, #5
 8000fcc:	f001 fe18 	bl	8002c00 <APP_SETFLAG>
            }
        }
    }


	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fd6:	d101      	bne.n	8000fdc <HAL_GPIO_EXTI_Callback+0x84>
	{
		received_message();
 8000fd8:	f7ff ffa4 	bl	8000f24 <received_message>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	200001bc 	.word	0x200001bc

08000fe8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

	if(htim == &htim4){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a89      	ldr	r2, [pc, #548]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d105      	bne.n	8001004 <HAL_TIM_PeriodElapsedCallback+0x1c>
		BSP_HCSR501_Init();
 8000ff8:	f7ff fc54 	bl	80008a4 <BSP_HCSR501_Init>
		HAL_TIM_Base_Stop_IT(&htim4);
 8000ffc:	4886      	ldr	r0, [pc, #536]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000ffe:	f003 ff41 	bl	8004e84 <HAL_TIM_Base_Stop_IT>
		return;
 8001002:	e105      	b.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x228>
	}

	milliseconds++;
 8001004:	4b85      	ldr	r3, [pc, #532]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b83      	ldr	r3, [pc, #524]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800100e:	801a      	strh	r2, [r3, #0]
	static uint16_t milliseconds2 = 0;
	static uint16_t minutes = 0;
	static boolean triggered = False;
	static uint16_t button_held_counter = 0;
	static uint16_t button_held_cooldown_timer = 0;
	milliseconds2++;
 8001010:	4b83      	ldr	r3, [pc, #524]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b81      	ldr	r3, [pc, #516]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800101a:	801a      	strh	r2, [r3, #0]
	seconds += milliseconds2 / 1000;
 800101c:	4b80      	ldr	r3, [pc, #512]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4a80      	ldr	r2, [pc, #512]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	099b      	lsrs	r3, r3, #6
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b7f      	ldr	r3, [pc, #508]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	b29a      	uxth	r2, r3
 8001032:	4b7d      	ldr	r3, [pc, #500]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001034:	801a      	strh	r2, [r3, #0]
	milliseconds2 %= 1000;
 8001036:	4b7a      	ldr	r3, [pc, #488]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	4a7a      	ldr	r2, [pc, #488]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800103c:	fba2 1203 	umull	r1, r2, r2, r3
 8001040:	0992      	lsrs	r2, r2, #6
 8001042:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001046:	fb01 f202 	mul.w	r2, r1, r2
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b74      	ldr	r3, [pc, #464]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001050:	801a      	strh	r2, [r3, #0]
	minutes = seconds / 60;
 8001052:	4b75      	ldr	r3, [pc, #468]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	4a75      	ldr	r2, [pc, #468]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001058:	fba2 2303 	umull	r2, r3, r2, r3
 800105c:	095b      	lsrs	r3, r3, #5
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b73      	ldr	r3, [pc, #460]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001062:	801a      	strh	r2, [r3, #0]
	seconds %= 60;
 8001064:	4b70      	ldr	r3, [pc, #448]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	4b70      	ldr	r3, [pc, #448]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800106a:	fba3 1302 	umull	r1, r3, r3, r2
 800106e:	0959      	lsrs	r1, r3, #5
 8001070:	460b      	mov	r3, r1
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	1a5b      	subs	r3, r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b6a      	ldr	r3, [pc, #424]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800107e:	801a      	strh	r2, [r3, #0]
	if(minutes >= HCSR501_SETUP_MINUTES && seconds >= HCSR501_SETUP_SECONDS && !triggered){
 8001080:	4b69      	ldr	r3, [pc, #420]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <HAL_TIM_PeriodElapsedCallback+0xb2>
 8001088:	4b6a      	ldr	r3, [pc, #424]	@ (8001234 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0xb2>
		BSP_HCSR501_Init();
 8001090:	f7ff fc08 	bl	80008a4 <BSP_HCSR501_Init>
		triggered = True;
 8001094:	4b67      	ldr	r3, [pc, #412]	@ (8001234 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
	}

	BSP_Countdown();
 800109a:	f001 ff9b 	bl	8002fd4 <BSP_Countdown>
	if(BSP_GetCounter() <= 0){
 800109e:	f001 ffa7 	bl	8002ff0 <BSP_GetCounter>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11a      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0xf6>
		APP_SETFLAG(IS_CARD_COOLDOWN, False);
 80010a8:	2100      	movs	r1, #0
 80010aa:	2003      	movs	r0, #3
 80010ac:	f001 fda8 	bl	8002c00 <APP_SETFLAG>
		if(BSP_GetDisplay() == True){
 80010b0:	f001 ff86 	bl	8002fc0 <BSP_GetDisplay>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d10b      	bne.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0xea>
			BSP_LCD_SendMessage("Lector", 0, 0, True);
 80010ba:	2301      	movs	r3, #1
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	485d      	ldr	r0, [pc, #372]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80010c2:	f7ff fc39 	bl	8000938 <BSP_LCD_SendMessage>
			BSP_LCD_SendMessage("Disponible", 0, 1, False);
 80010c6:	2300      	movs	r3, #0
 80010c8:	2201      	movs	r2, #1
 80010ca:	2100      	movs	r1, #0
 80010cc:	485b      	ldr	r0, [pc, #364]	@ (800123c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80010ce:	f7ff fc33 	bl	8000938 <BSP_LCD_SendMessage>
		}
		BSP_LCD_UPDATE_STATUS(rfidSymbol_idx, True);
 80010d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2101      	movs	r1, #1
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fca9 	bl	8000a30 <BSP_LCD_UPDATE_STATUS>
	}
	if(BSP_GetCounter() == 5000 && BSP_GetDisplay()){
 80010de:	f001 ff87 	bl	8002ff0 <BSP_GetCounter>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d10a      	bne.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x11a>
 80010ec:	f001 ff68 	bl	8002fc0 <BSP_GetDisplay>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x11a>
		BSP_LCD_SendMessage("Espera...", 0, 0, True);
 80010f6:	2301      	movs	r3, #1
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4851      	ldr	r0, [pc, #324]	@ (8001244 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80010fe:	f7ff fc1b 	bl	8000938 <BSP_LCD_SendMessage>
	}

	BSP_Blink();
 8001102:	f001 ff8b 	bl	800301c <BSP_Blink>

	if(milliseconds % (MOTION_ACTIVITY_RANGE_SECONDS * 1000) == 0){
 8001106:	4b45      	ldr	r3, [pc, #276]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	4a4f      	ldr	r2, [pc, #316]	@ (8001248 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800110c:	fba2 1203 	umull	r1, r2, r2, r3
 8001110:	0b12      	lsrs	r2, r2, #12
 8001112:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001116:	fb01 f202 	mul.w	r2, r1, r2
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	b29b      	uxth	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d11c      	bne.n	800115c <HAL_TIM_PeriodElapsedCallback+0x174>

		SET_FIELD(GET_APP_DATA(), motion_activity, GET_APP_DATA()->motion_status == 1 ? GET_APP_DATA()->motion_activity+1 : 0);
 8001122:	f001 febf 	bl	8002ea4 <GET_APP_DATA>
 8001126:	4603      	mov	r3, r0
 8001128:	7e1b      	ldrb	r3, [r3, #24]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d106      	bne.n	800113c <HAL_TIM_PeriodElapsedCallback+0x154>
 800112e:	f001 feb9 	bl	8002ea4 <GET_APP_DATA>
 8001132:	4603      	mov	r3, r0
 8001134:	7e5b      	ldrb	r3, [r3, #25]
 8001136:	3301      	adds	r3, #1
 8001138:	b2dc      	uxtb	r4, r3
 800113a:	e000      	b.n	800113e <HAL_TIM_PeriodElapsedCallback+0x156>
 800113c:	2400      	movs	r4, #0
 800113e:	f001 feb1 	bl	8002ea4 <GET_APP_DATA>
 8001142:	4603      	mov	r3, r0
 8001144:	4622      	mov	r2, r4
 8001146:	765a      	strb	r2, [r3, #25]
		if(GET_APP_DATA()->motion_activity == MOTION_ACTIVITY_MINIMUM){
 8001148:	f001 feac 	bl	8002ea4 <GET_APP_DATA>
 800114c:	4603      	mov	r3, r0
 800114e:	7e5b      	ldrb	r3, [r3, #25]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d103      	bne.n	800115c <HAL_TIM_PeriodElapsedCallback+0x174>
			APP_SETFLAG(UPDATE_MOTION, True);
 8001154:	2101      	movs	r1, #1
 8001156:	2004      	movs	r0, #4
 8001158:	f001 fd52 	bl	8002c00 <APP_SETFLAG>
		}

	}


    if (GET_APP_FLAGS()->button_pressed) {
 800115c:	f001 feac 	bl	8002eb8 <GET_APP_FLAGS>
 8001160:	4603      	mov	r3, r0
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d028      	beq.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x1d2>
        button_held_counter++; // Increment the counter for button hold duration
 8001168:	4b38      	ldr	r3, [pc, #224]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b36      	ldr	r3, [pc, #216]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001172:	801a      	strh	r2, [r3, #0]

        // Check if the button has been held long enough to be considered "held"
        if (button_held_counter >= CONFIG_MENU_BUTTON_DELAY_MS) {
 8001174:	4b35      	ldr	r3, [pc, #212]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	f240 52db 	movw	r2, #1499	@ 0x5db
 800117c:	4293      	cmp	r3, r2
 800117e:	d912      	bls.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x1be>
            APP_SETFLAG(BUTTON_HELD, True);       // Mark as "held"
 8001180:	2101      	movs	r1, #1
 8001182:	2006      	movs	r0, #6
 8001184:	f001 fd3c 	bl	8002c00 <APP_SETFLAG>
            APP_SETFLAG(BUTTON_PRESSED, False);    // Reset "pressed" flag
 8001188:	2100      	movs	r1, #0
 800118a:	2005      	movs	r0, #5
 800118c:	f001 fd38 	bl	8002c00 <APP_SETFLAG>
            APP_SETFLAG(BUTTON_ONLY_PRESSED, False); // Reset "only pressed" flag
 8001190:	2100      	movs	r1, #0
 8001192:	2007      	movs	r0, #7
 8001194:	f001 fd34 	bl	8002c00 <APP_SETFLAG>
            button_held_counter = 0; // Reset counter after confirming hold status
 8001198:	4b2c      	ldr	r3, [pc, #176]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800119a:	2200      	movs	r2, #0
 800119c:	801a      	strh	r2, [r3, #0]
            button_held_cooldown_timer = BUTTON_HELD_COOLDOWN;
 800119e:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80011a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011a4:	801a      	strh	r2, [r3, #0]
        }
        if(BSP_ENCODER_GetSwitch() == GPIO_PIN_RESET){
 80011a6:	f7ff fb55 	bl	8000854 <BSP_ENCODER_GetSwitch>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d125      	bne.n	80011fc <HAL_TIM_PeriodElapsedCallback+0x214>
        	APP_SETFLAG(BUTTON_PRESSED, False);
 80011b0:	2100      	movs	r1, #0
 80011b2:	2005      	movs	r0, #5
 80011b4:	f001 fd24 	bl	8002c00 <APP_SETFLAG>
 80011b8:	e020      	b.n	80011fc <HAL_TIM_PeriodElapsedCallback+0x214>
        }
    } else {
        // If button was previously pressed and released quickly
        if (button_held_counter > 0 && button_held_counter < CONFIG_MENU_BUTTON_DELAY_MS) {
 80011ba:	4b24      	ldr	r3, [pc, #144]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d019      	beq.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x20e>
 80011c2:	4b22      	ldr	r3, [pc, #136]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	f240 52db 	movw	r2, #1499	@ 0x5db
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d813      	bhi.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x20e>
            // It was a short press, not held long enough
        	APP_SETFLAG(BUTTON_PRESSED, False);
 80011ce:	2100      	movs	r1, #0
 80011d0:	2005      	movs	r0, #5
 80011d2:	f001 fd15 	bl	8002c00 <APP_SETFLAG>
            APP_SETFLAG(BUTTON_ONLY_PRESSED, True); // Mark as "only pressed"
 80011d6:	2101      	movs	r1, #1
 80011d8:	2007      	movs	r0, #7
 80011da:	f001 fd11 	bl	8002c00 <APP_SETFLAG>
            APP_SETFLAG(BUTTON_HELD, False);        // Ensure "held" is reset
 80011de:	2100      	movs	r1, #0
 80011e0:	2006      	movs	r0, #6
 80011e2:	f001 fd0d 	bl	8002c00 <APP_SETFLAG>
            if(button_held_cooldown_timer != 0){
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x20e>
            	APP_SETFLAG(BUTTON_ONLY_PRESSED, False);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2007      	movs	r0, #7
 80011f2:	f001 fd05 	bl	8002c00 <APP_SETFLAG>
            }
        }
        button_held_counter = 0; // Reset counter since button is now released
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	801a      	strh	r2, [r3, #0]
    }
    if(button_held_cooldown_timer > 0){
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x228>
        button_held_cooldown_timer--;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800120e:	801a      	strh	r2, [r3, #0]
    }

}
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}
 8001216:	bf00      	nop
 8001218:	20000310 	.word	0x20000310
 800121c:	200001b8 	.word	0x200001b8
 8001220:	200001c0 	.word	0x200001c0
 8001224:	10624dd3 	.word	0x10624dd3
 8001228:	200001c2 	.word	0x200001c2
 800122c:	88888889 	.word	0x88888889
 8001230:	200001c4 	.word	0x200001c4
 8001234:	200001c6 	.word	0x200001c6
 8001238:	08006b3c 	.word	0x08006b3c
 800123c:	08006b44 	.word	0x08006b44
 8001240:	20000375 	.word	0x20000375
 8001244:	08006b50 	.word	0x08006b50
 8001248:	d1b71759 	.word	0xd1b71759
 800124c:	200001c8 	.word	0x200001c8
 8001250:	200001ca 	.word	0x200001ca

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <Error_Handler+0x8>

08001260 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800126a:	f107 020f 	add.w	r2, r7, #15
 800126e:	1df9      	adds	r1, r7, #7
 8001270:	2364      	movs	r3, #100	@ 0x64
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	4804      	ldr	r0, [pc, #16]	@ (8001288 <RC522_SPI_Transfer+0x28>)
 8001278:	f003 faaf 	bl	80047da <HAL_SPI_TransmitReceive>

	return rx_data;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001cc 	.word	0x200001cc

0800128c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	460a      	mov	r2, r1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2110      	movs	r1, #16
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <Write_MFRC522+0x48>)
 80012a2:	f002 fa30 	bl	8003706 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffd4 	bl	8001260 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ffd0 	bl	8001260 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2110      	movs	r1, #16
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <Write_MFRC522+0x48>)
 80012c6:	f002 fa1e 	bl	8003706 <HAL_GPIO_WritePin>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40010800 	.word	0x40010800

080012d8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2110      	movs	r1, #16
 80012e6:	480f      	ldr	r0, [pc, #60]	@ (8001324 <Read_MFRC522+0x4c>)
 80012e8:	f002 fa0d 	bl	8003706 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ffad 	bl	8001260 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ffaa 	bl	8001260 <RC522_SPI_Transfer>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	2110      	movs	r1, #16
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <Read_MFRC522+0x4c>)
 8001316:	f002 f9f6 	bl	8003706 <HAL_GPIO_WritePin>

	return val;
 800131a:	7bfb      	ldrb	r3, [r7, #15]

}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40010800 	.word	0x40010800

08001328 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	4613      	mov	r3, r2
 8001336:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ffcc 	bl	80012d8 <Read_MFRC522>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	4313      	orrs	r3, r2
 800134a:	b2da      	uxtb	r2, r3
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff9b 	bl	800128c <Write_MFRC522>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	460a      	mov	r2, r1
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	4613      	mov	r3, r2
 800136c:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ffb1 	bl	80012d8 <Read_MFRC522>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800137a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800137e:	43db      	mvns	r3, r3
 8001380:	b25a      	sxtb	r2, r3
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4013      	ands	r3, r2
 8001388:	b25b      	sxtb	r3, r3
 800138a:	b2da      	uxtb	r2, r3
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff7b 	bl	800128c <Write_MFRC522>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80013a2:	2014      	movs	r0, #20
 80013a4:	f7ff ff98 	bl	80012d8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80013a8:	2103      	movs	r1, #3
 80013aa:	2014      	movs	r0, #20
 80013ac:	f7ff ffbc 	bl	8001328 <SetBitMask>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80013b8:	210f      	movs	r1, #15
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff ff66 	bl	800128c <Write_MFRC522>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2110      	movs	r1, #16
 80013cc:	4812      	ldr	r0, [pc, #72]	@ (8001418 <MFRC522_Init+0x54>)
 80013ce:	f002 f99a 	bl	8003706 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2101      	movs	r1, #1
 80013d6:	4811      	ldr	r0, [pc, #68]	@ (800141c <MFRC522_Init+0x58>)
 80013d8:	f002 f995 	bl	8003706 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80013dc:	f7ff ffea 	bl	80013b4 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80013e0:	218d      	movs	r1, #141	@ 0x8d
 80013e2:	202a      	movs	r0, #42	@ 0x2a
 80013e4:	f7ff ff52 	bl	800128c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80013e8:	213e      	movs	r1, #62	@ 0x3e
 80013ea:	202b      	movs	r0, #43	@ 0x2b
 80013ec:	f7ff ff4e 	bl	800128c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80013f0:	211e      	movs	r1, #30
 80013f2:	202d      	movs	r0, #45	@ 0x2d
 80013f4:	f7ff ff4a 	bl	800128c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80013f8:	2100      	movs	r1, #0
 80013fa:	202c      	movs	r0, #44	@ 0x2c
 80013fc:	f7ff ff46 	bl	800128c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8001400:	2140      	movs	r1, #64	@ 0x40
 8001402:	2015      	movs	r0, #21
 8001404:	f7ff ff42 	bl	800128c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001408:	213d      	movs	r1, #61	@ 0x3d
 800140a:	2011      	movs	r0, #17
 800140c:	f7ff ff3e 	bl	800128c <Write_MFRC522>

	AntennaOn();
 8001410:	f7ff ffc5 	bl	800139e <AntennaOn>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40010800 	.word	0x40010800
 800141c:	40010c00 	.word	0x40010c00

08001420 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b089      	sub	sp, #36	@ 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	4613      	mov	r3, r2
 8001430:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001432:	2302      	movs	r3, #2
 8001434:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 800143a:	2300      	movs	r3, #0
 800143c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d006      	beq.n	8001452 <MFRC522_ToCard+0x32>
 8001444:	2b0e      	cmp	r3, #14
 8001446:	d109      	bne.n	800145c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001448:	2312      	movs	r3, #18
 800144a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 800144c:	2310      	movs	r3, #16
 800144e:	777b      	strb	r3, [r7, #29]
			break;
 8001450:	e005      	b.n	800145e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001452:	2377      	movs	r3, #119	@ 0x77
 8001454:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001456:	2330      	movs	r3, #48	@ 0x30
 8001458:	777b      	strb	r3, [r7, #29]
			break;
 800145a:	e000      	b.n	800145e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800145c:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4619      	mov	r1, r3
 8001468:	2002      	movs	r0, #2
 800146a:	f7ff ff0f 	bl	800128c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800146e:	2180      	movs	r1, #128	@ 0x80
 8001470:	2004      	movs	r0, #4
 8001472:	f7ff ff74 	bl	800135e <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	200a      	movs	r0, #10
 800147a:	f7ff ff55 	bl	8001328 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800147e:	2100      	movs	r1, #0
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff ff03 	bl	800128c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	e00a      	b.n	80014a2 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4413      	add	r3, r2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	2009      	movs	r0, #9
 8001498:	f7ff fef8 	bl	800128c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	3301      	adds	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3f0      	bcc.n	800148c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	4619      	mov	r1, r3
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7ff feec 	bl	800128c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d103      	bne.n	80014c2 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80014ba:	2180      	movs	r1, #128	@ 0x80
 80014bc:	200d      	movs	r0, #13
 80014be:	f7ff ff33 	bl	8001328 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80014c2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014c6:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80014c8:	2004      	movs	r0, #4
 80014ca:	f7ff ff05 	bl	80012d8 <Read_MFRC522>
 80014ce:	4603      	mov	r3, r0
 80014d0:	773b      	strb	r3, [r7, #28]
        i--;
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00a      	beq.n	80014f4 <MFRC522_ToCard+0xd4>
 80014de:	7f3b      	ldrb	r3, [r7, #28]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <MFRC522_ToCard+0xd4>
 80014e8:	7f3a      	ldrb	r2, [r7, #28]
 80014ea:	7f7b      	ldrb	r3, [r7, #29]
 80014ec:	4013      	ands	r3, r2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0e9      	beq.n	80014c8 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80014f4:	2180      	movs	r1, #128	@ 0x80
 80014f6:	200d      	movs	r0, #13
 80014f8:	f7ff ff31 	bl	800135e <ClearBitMask>

    if (i != 0)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d052      	beq.n	80015a8 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001502:	2006      	movs	r0, #6
 8001504:	f7ff fee8 	bl	80012d8 <Read_MFRC522>
 8001508:	4603      	mov	r3, r0
 800150a:	f003 031b 	and.w	r3, r3, #27
 800150e:	2b00      	cmp	r3, #0
 8001510:	d148      	bne.n	80015a4 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001516:	7f3a      	ldrb	r2, [r7, #28]
 8001518:	7fbb      	ldrb	r3, [r7, #30]
 800151a:	4013      	ands	r3, r2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8001526:	2301      	movs	r3, #1
 8001528:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d13b      	bne.n	80015a8 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001530:	200a      	movs	r0, #10
 8001532:	f7ff fed1 	bl	80012d8 <Read_MFRC522>
 8001536:	4603      	mov	r3, r0
 8001538:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800153a:	200c      	movs	r0, #12
 800153c:	f7ff fecc 	bl	80012d8 <Read_MFRC522>
 8001540:	4603      	mov	r3, r0
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 800154e:	7f3b      	ldrb	r3, [r7, #28]
 8001550:	3b01      	subs	r3, #1
 8001552:	00da      	lsls	r2, r3, #3
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	4413      	add	r3, r2
 8001558:	461a      	mov	r2, r3
 800155a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e004      	b.n	800156a <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001560:	7f3b      	ldrb	r3, [r7, #28]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	461a      	mov	r2, r3
 8001566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001568:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800156a:	7f3b      	ldrb	r3, [r7, #28]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001574:	7f3b      	ldrb	r3, [r7, #28]
 8001576:	2b10      	cmp	r3, #16
 8001578:	d901      	bls.n	800157e <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 800157a:	2310      	movs	r3, #16
 800157c:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	e00a      	b.n	800159a <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	18d4      	adds	r4, r2, r3
 800158a:	2009      	movs	r0, #9
 800158c:	f7ff fea4 	bl	80012d8 <Read_MFRC522>
 8001590:	4603      	mov	r3, r0
 8001592:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	3301      	adds	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	7f3b      	ldrb	r3, [r7, #28]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3f0      	bcc.n	8001584 <MFRC522_ToCard+0x164>
 80015a2:	e001      	b.n	80015a8 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80015a4:	2302      	movs	r3, #2
 80015a6:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	@ 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}

080015b2 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af02      	add	r7, sp, #8
 80015b8:	4603      	mov	r3, r0
 80015ba:	6039      	str	r1, [r7, #0]
 80015bc:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80015be:	2107      	movs	r1, #7
 80015c0:	200d      	movs	r0, #13
 80015c2:	f7ff fe63 	bl	800128c <Write_MFRC522>

	TagType[0] = reqMode;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	79fa      	ldrb	r2, [r7, #7]
 80015ca:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2201      	movs	r2, #1
 80015d6:	6839      	ldr	r1, [r7, #0]
 80015d8:	200c      	movs	r0, #12
 80015da:	f7ff ff21 	bl	8001420 <MFRC522_ToCard>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <MFRC522_Request+0x3c>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d001      	beq.n	80015f2 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80015ee:	2302      	movs	r3, #2
 80015f0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af02      	add	r7, sp, #8
 8001602:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8001604:	2300      	movs	r3, #0
 8001606:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001608:	2100      	movs	r1, #0
 800160a:	200d      	movs	r0, #13
 800160c:	f7ff fe3e 	bl	800128c <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2293      	movs	r2, #147	@ 0x93
 8001614:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3301      	adds	r3, #1
 800161a:	2220      	movs	r2, #32
 800161c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	200c      	movs	r0, #12
 800162c:	f7ff fef8 	bl	8001420 <MFRC522_ToCard>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	73bb      	strb	r3, [r7, #14]
 800163e:	e009      	b.n	8001654 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001640:	7bbb      	ldrb	r3, [r7, #14]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	7b7b      	ldrb	r3, [r7, #13]
 800164a:	4053      	eors	r3, r2
 800164c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	3301      	adds	r3, #1
 8001652:	73bb      	strb	r3, [r7, #14]
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d9f2      	bls.n	8001640 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	7b7a      	ldrb	r2, [r7, #13]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001668:	2302      	movs	r3, #2
 800166a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <MX_SPI1_Init+0x64>)
 800167e:	4a18      	ldr	r2, [pc, #96]	@ (80016e0 <MX_SPI1_Init+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <MX_SPI1_Init+0x64>)
 8001684:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_SPI1_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <MX_SPI1_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_SPI1_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_SPI1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016ac:	2208      	movs	r2, #8
 80016ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016c4:	220a      	movs	r2, #10
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016ca:	f002 fda5 	bl	8004218 <HAL_SPI_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016d4:	f7ff fdbe 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200001cc 	.word	0x200001cc
 80016e0:	40013000 	.word	0x40013000

080016e4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016e8:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <MX_SPI2_Init+0x64>)
 80016ea:	4a18      	ldr	r2, [pc, #96]	@ (800174c <MX_SPI2_Init+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <MX_SPI2_Init+0x64>)
 80016f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016f6:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <MX_SPI2_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <MX_SPI2_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <MX_SPI2_Init+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <MX_SPI2_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <MX_SPI2_Init+0x64>)
 8001710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001714:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <MX_SPI2_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <MX_SPI2_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <MX_SPI2_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <MX_SPI2_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_SPI2_Init+0x64>)
 8001730:	220a      	movs	r2, #10
 8001732:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <MX_SPI2_Init+0x64>)
 8001736:	f002 fd6f 	bl	8004218 <HAL_SPI_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001740:	f7ff fd88 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000224 	.word	0x20000224
 800174c:	40003800 	.word	0x40003800

08001750 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	@ 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a37      	ldr	r2, [pc, #220]	@ (8001848 <HAL_SPI_MspInit+0xf8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d130      	bne.n	80017d2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001770:	4b36      	ldr	r3, [pc, #216]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a35      	ldr	r2, [pc, #212]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 8001776:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b33      	ldr	r3, [pc, #204]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b30      	ldr	r3, [pc, #192]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a2f      	ldr	r2, [pc, #188]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017a0:	23a0      	movs	r3, #160	@ 0xa0
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4827      	ldr	r0, [pc, #156]	@ (8001850 <HAL_SPI_MspInit+0x100>)
 80017b4:	f001 fe0c 	bl	80033d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017b8:	2340      	movs	r3, #64	@ 0x40
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	4619      	mov	r1, r3
 80017ca:	4821      	ldr	r0, [pc, #132]	@ (8001850 <HAL_SPI_MspInit+0x100>)
 80017cc:	f001 fe00 	bl	80033d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017d0:	e036      	b.n	8001840 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001854 <HAL_SPI_MspInit+0x104>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d131      	bne.n	8001840 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017dc:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	4a1a      	ldr	r2, [pc, #104]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 80017e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e6:	61d3      	str	r3, [r2, #28]
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a14      	ldr	r2, [pc, #80]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_SPI_MspInit+0xfc>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800180c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 0318 	add.w	r3, r7, #24
 800181e:	4619      	mov	r1, r3
 8001820:	480d      	ldr	r0, [pc, #52]	@ (8001858 <HAL_SPI_MspInit+0x108>)
 8001822:	f001 fdd5 	bl	80033d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001826:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 0318 	add.w	r3, r7, #24
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	@ (8001858 <HAL_SPI_MspInit+0x108>)
 800183c:	f001 fdc8 	bl	80033d0 <HAL_GPIO_Init>
}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	@ 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013000 	.word	0x40013000
 800184c:	40021000 	.word	0x40021000
 8001850:	40010800 	.word	0x40010800
 8001854:	40003800 	.word	0x40003800
 8001858:	40010c00 	.word	0x40010c00

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6193      	str	r3, [r2, #24]
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <HAL_MspInit+0x5c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a0e      	ldr	r2, [pc, #56]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <HAL_MspInit+0x60>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <HAL_MspInit+0x60>)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <NMI_Handler+0x4>

080018c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_SendMessage("Oops, ", 0, 0, True);
 80018cc:	2301      	movs	r3, #1
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <HardFault_Handler+0x20>)
 80018d4:	f7ff f830 	bl	8000938 <BSP_LCD_SendMessage>
	BSP_LCD_SendMessage("hard fault...", 0, 1, False);
 80018d8:	2300      	movs	r3, #0
 80018da:	2201      	movs	r2, #1
 80018dc:	2100      	movs	r1, #0
 80018de:	4803      	ldr	r0, [pc, #12]	@ (80018ec <HardFault_Handler+0x24>)
 80018e0:	f7ff f82a 	bl	8000938 <BSP_LCD_SendMessage>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <HardFault_Handler+0x1c>
 80018e8:	08006b5c 	.word	0x08006b5c
 80018ec:	08006b64 	.word	0x08006b64

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <MemManage_Handler+0x4>

080018f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <UsageFault_Handler+0x4>

08001908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001930:	f001 fc00 	bl	8003134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  /* USER CODE END SysTick_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Switch_Pin);
 800193c:	2004      	movs	r0, #4
 800193e:	f001 ff13 	bl	8003768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}

08001946 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800194a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800194e:	f001 ff0b 	bl	8003768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <TIM2_IRQHandler+0x10>)
 800195e:	f003 fc0f 	bl	8005180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000280 	.word	0x20000280

0800196c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <TIM3_IRQHandler+0x10>)
 8001972:	f003 fc05 	bl	8005180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200002c8 	.word	0x200002c8

08001980 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <TIM4_IRQHandler+0x10>)
 8001986:	f003 fbfb 	bl	8005180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000310 	.word	0x20000310

08001994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001998:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800199c:	f001 fee4 	bl	8003768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f004 fbee 	bl	80061b4 <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20005000 	.word	0x20005000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	2000027c 	.word	0x2000027c
 8001a0c:	20000598 	.word	0x20000598

08001a10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	@ 0x30
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	2224      	movs	r2, #36	@ 0x24
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 fbba 	bl	80061a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a38:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <MX_TIM2_Init+0xa4>)
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <MX_TIM2_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <MX_TIM2_Init+0xa4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <MX_TIM2_Init+0xa4>)
 8001a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <MX_TIM2_Init+0xa4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <MX_TIM2_Init+0xa4>)
 8001a5c:	2280      	movs	r2, #128	@ 0x80
 8001a5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a60:	2303      	movs	r3, #3
 8001a62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a70:	230a      	movs	r3, #10
 8001a72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <MX_TIM2_Init+0xa4>)
 8001a8c:	f003 fa28 	bl	8004ee0 <HAL_TIM_Encoder_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a96:	f7ff fbdd 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	@ (8001ac0 <MX_TIM2_Init+0xa4>)
 8001aa8:	f003 fe64 	bl	8005774 <HAL_TIMEx_MasterConfigSynchronization>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ab2:	f7ff fbcf 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3730      	adds	r7, #48	@ 0x30
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000280 	.word	0x20000280

08001ac4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ae0:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001ae2:	4a22      	ldr	r2, [pc, #136]	@ (8001b6c <MX_TIM3_Init+0xa8>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ae6:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36000 - 1;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001af4:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001af8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b06:	4818      	ldr	r0, [pc, #96]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001b08:	f003 f91b 	bl	8004d42 <HAL_TIM_Base_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b12:	f7ff fb9f 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	4619      	mov	r1, r3
 8001b22:	4811      	ldr	r0, [pc, #68]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001b24:	f003 fc1c 	bl	8005360 <HAL_TIM_ConfigClockSource>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f7ff fb91 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480a      	ldr	r0, [pc, #40]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001b40:	f003 fe18 	bl	8005774 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b4a:	f7ff fb83 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  if (  HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001b4e:	4806      	ldr	r0, [pc, #24]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001b50:	f003 f946 	bl	8004de0 <HAL_TIM_Base_Start_IT>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM3_Init+0x9a>
    {
      Error_Handler();
 8001b5a:	f7ff fb7b 	bl	8001254 <Error_Handler>
    }
  /* USER CODE END TIM3_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002c8 	.word	0x200002c8
 8001b6c:	40000400 	.word	0x40000400

08001b70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c08 <MX_TIM4_Init+0x98>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000 - 1;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001b94:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001b98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001ba2:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001ba6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bb4:	4813      	ldr	r0, [pc, #76]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001bb6:	f003 f8c4 	bl	8004d42 <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bc0:	f7ff fb48 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001bd2:	f003 fbc5 	bl	8005360 <HAL_TIM_ConfigClockSource>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001bdc:	f7ff fb3a 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001bee:	f003 fdc1 	bl	8005774 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001bf8:	f7ff fb2c 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000310 	.word	0x20000310
 8001c08:	40000800 	.word	0x40000800

08001c0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c2a:	d12b      	bne.n	8001c84 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a10      	ldr	r2, [pc, #64]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x80>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4808      	ldr	r0, [pc, #32]	@ (8001c90 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c70:	f001 fbae 	bl	80033d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	201c      	movs	r0, #28
 8001c7a:	f001 fb72 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c7e:	201c      	movs	r0, #28
 8001c80:	f001 fb8b 	bl	800339a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40010800 	.word	0x40010800

08001c94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d0c <HAL_TIM_Base_MspInit+0x78>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d114      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HAL_TIM_Base_MspInit+0x7c>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <HAL_TIM_Base_MspInit+0x7c>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <HAL_TIM_Base_MspInit+0x7c>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	201d      	movs	r0, #29
 8001cc4:	f001 fb4d 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cc8:	201d      	movs	r0, #29
 8001cca:	f001 fb66 	bl	800339a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cce:	e018      	b.n	8001d02 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d14 <HAL_TIM_Base_MspInit+0x80>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d113      	bne.n	8001d02 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_TIM_Base_MspInit+0x7c>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	@ (8001d10 <HAL_TIM_Base_MspInit+0x7c>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	61d3      	str	r3, [r2, #28]
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_TIM_Base_MspInit+0x7c>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	201e      	movs	r0, #30
 8001cf8:	f001 fb33 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cfc:	201e      	movs	r0, #30
 8001cfe:	f001 fb4c 	bl	800339a <HAL_NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40000800 	.word	0x40000800

08001d18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
;    bl  SystemInit
 8001d18:	f7ff fe7a 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d1c:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d1e:	490c      	ldr	r1, [pc, #48]	@ (8001d50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d20:	4a0c      	ldr	r2, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d34:	4c09      	ldr	r4, [pc, #36]	@ (8001d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d42:	f004 fa3d 	bl	80061c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d46:	f7ff f861 	bl	8000e0c <main>
  bx lr
 8001d4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8001d54:	08008090 	.word	0x08008090
  ldr r2, =_sbss
 8001d58:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8001d5c:	20000594 	.word	0x20000594

08001d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC1_2_IRQHandler>
	...

08001d64 <app_init>:
		(void (*)())CONFIG_MENU_CONFIGURAR,
		(void (*)())CONFIG_MENU_ANADIR,
		(void (*)())CONFIG_MENU_BORRAR,
};

void app_init(){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	rfidSymbol_idx = BSP_LCD_ADD_STATUS(rfidSymbol, True);
 8001d68:	2101      	movs	r1, #1
 8001d6a:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <app_init+0x3c>)
 8001d6c:	f7fe fe46 	bl	80009fc <BSP_LCD_ADD_STATUS>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <app_init+0x40>)
 8001d76:	701a      	strb	r2, [r3, #0]
	motionSymbol_idx = BSP_LCD_ADD_STATUS(motionSymbol, False);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	480b      	ldr	r0, [pc, #44]	@ (8001da8 <app_init+0x44>)
 8001d7c:	f7fe fe3e 	bl	80009fc <BSP_LCD_ADD_STATUS>
 8001d80:	4603      	mov	r3, r0
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <app_init+0x48>)
 8001d86:	701a      	strb	r2, [r3, #0]
	configSymbol_idx = BSP_LCD_ADD_STATUS(configSymbol, False);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4809      	ldr	r0, [pc, #36]	@ (8001db0 <app_init+0x4c>)
 8001d8c:	f7fe fe36 	bl	80009fc <BSP_LCD_ADD_STATUS>
 8001d90:	4603      	mov	r3, r0
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <app_init+0x50>)
 8001d96:	701a      	strb	r2, [r3, #0]

	BSP_LCD_DISPLAY_STATUS();
 8001d98:	f7fe fe5e 	bl	8000a58 <BSP_LCD_DISPLAY_STATUS>
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000098 	.word	0x20000098
 8001da4:	20000375 	.word	0x20000375
 8001da8:	200000a0 	.word	0x200000a0
 8001dac:	20000376 	.word	0x20000376
 8001db0:	200000a8 	.word	0x200000a8
 8001db4:	20000377 	.word	0x20000377

08001db8 <app>:

void app(){
 8001db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0

	APP_HANDLE_INPUT(state);
 8001dbe:	4bb1      	ldr	r3, [pc, #708]	@ (8002084 <app+0x2cc>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fd76 	bl	80028b4 <APP_HANDLE_INPUT>

	if(app_flags.message_to_send){
 8001dc8:	4baf      	ldr	r3, [pc, #700]	@ (8002088 <app+0x2d0>)
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <app+0x1c>
		APP_SEND_MESSAGE();
 8001dd0:	f000 feca 	bl	8002b68 <APP_SEND_MESSAGE>
	}
	if(app_flags.message_received && state == Idle){
 8001dd4:	4bac      	ldr	r3, [pc, #688]	@ (8002088 <app+0x2d0>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <app+0x38>
 8001ddc:	4ba9      	ldr	r3, [pc, #676]	@ (8002084 <app+0x2cc>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <app+0x38>
		APP_MESSAGE_RECEIVED();
 8001de4:	f000 feb2 	bl	8002b4c <APP_MESSAGE_RECEIVED>
		APP_UPDATE_WORKSTATION(True);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f000 ffeb 	bl	8002dc4 <APP_UPDATE_WORKSTATION>
 8001dee:	e004      	b.n	8001dfa <app+0x42>
	}else{
		APP_MESSAGE_RECEIVED();
 8001df0:	f000 feac 	bl	8002b4c <APP_MESSAGE_RECEIVED>
		APP_UPDATE_WORKSTATION(False);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 ffe5 	bl	8002dc4 <APP_UPDATE_WORKSTATION>
	}
	switch(state){
 8001dfa:	4ba2      	ldr	r3, [pc, #648]	@ (8002084 <app+0x2cc>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b07      	cmp	r3, #7
 8001e00:	f200 852f 	bhi.w	8002862 <app+0xaaa>
 8001e04:	a201      	add	r2, pc, #4	@ (adr r2, 8001e0c <app+0x54>)
 8001e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001e2d 	.word	0x08001e2d
 8001e10:	08001f6d 	.word	0x08001f6d
 8001e14:	08001fd9 	.word	0x08001fd9
 8001e18:	0800205d 	.word	0x0800205d
 8001e1c:	08002197 	.word	0x08002197
 8001e20:	08002603 	.word	0x08002603
 8001e24:	080026fd 	.word	0x080026fd
 8001e28:	0800277f 	.word	0x0800277f
	case Idle:
	{
		if(app_flags.show_idle){
 8001e2c:	4b96      	ldr	r3, [pc, #600]	@ (8002088 <app+0x2d0>)
 8001e2e:	7a9b      	ldrb	r3, [r3, #10]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d009      	beq.n	8001e48 <app+0x90>
			APP_SETFLAG(SHOW_IDLE, False);
 8001e34:	2100      	movs	r1, #0
 8001e36:	200b      	movs	r0, #11
 8001e38:	f000 fee2 	bl	8002c00 <APP_SETFLAG>
			BSP_LCD_SendMessage("Bienvenido!", 0, 0, True);
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	4892      	ldr	r0, [pc, #584]	@ (800208c <app+0x2d4>)
 8001e44:	f7fe fd78 	bl	8000938 <BSP_LCD_SendMessage>
		}

		if(app_flags.waiting_for_user){
 8001e48:	4b8f      	ldr	r3, [pc, #572]	@ (8002088 <app+0x2d0>)
 8001e4a:	78db      	ldrb	r3, [r3, #3]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d07a      	beq.n	8001f46 <app+0x18e>
			static uint8_t sNum = 1;
			if(!app_flags.is_card_cooldown){
 8001e50:	4b8d      	ldr	r3, [pc, #564]	@ (8002088 <app+0x2d0>)
 8001e52:	789b      	ldrb	r3, [r3, #2]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <app+0xb0>
				BSP_RC522_GetSerialNumber(&sNum);
 8001e58:	488d      	ldr	r0, [pc, #564]	@ (8002090 <app+0x2d8>)
 8001e5a:	f7fe fe43 	bl	8000ae4 <BSP_RC522_GetSerialNumber>
			}else{
				sNum = 1;
				return;
			}
			if(sNum != 1){
 8001e5e:	4b8c      	ldr	r3, [pc, #560]	@ (8002090 <app+0x2d8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d06f      	beq.n	8001f46 <app+0x18e>
 8001e66:	e004      	b.n	8001e72 <app+0xba>
				sNum = 1;
 8001e68:	4b89      	ldr	r3, [pc, #548]	@ (8002090 <app+0x2d8>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
				return;
 8001e6e:	f000 bd0d 	b.w	800288c <app+0xad4>
				if(!APP_GET_USER_BY_SERIAL_NUMBER(sNum, &app_data.user)){
 8001e72:	4b87      	ldr	r3, [pc, #540]	@ (8002090 <app+0x2d8>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	4987      	ldr	r1, [pc, #540]	@ (8002094 <app+0x2dc>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 ff47 	bl	8002d0c <APP_GET_USER_BY_SERIAL_NUMBER>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 84f0 	beq.w	8002866 <app+0xaae>
					return;
				}
				TOGGLE_FIELD(app_data.user, present);
 8001e86:	4b83      	ldr	r3, [pc, #524]	@ (8002094 <app+0x2dc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b7e      	ldr	r3, [pc, #504]	@ (8002094 <app+0x2dc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f883 2020 	strb.w	r2, [r3, #32]
				if(app_data.user->present){
 8001ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8002094 <app+0x2dc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d025      	beq.n	8001ef8 <app+0x140>
					BSP_LCD_SendMessage("Hola", 0, 0, True);
 8001eac:	2301      	movs	r3, #1
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4879      	ldr	r0, [pc, #484]	@ (8002098 <app+0x2e0>)
 8001eb4:	f7fe fd40 	bl	8000938 <BSP_LCD_SendMessage>
					BSP_LCD_SendMessage(app_data.user->name, 0, 1, False);
 8001eb8:	4b76      	ldr	r3, [pc, #472]	@ (8002094 <app+0x2dc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	1c58      	adds	r0, r3, #1
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	f7fe fd38 	bl	8000938 <BSP_LCD_SendMessage>
					APP_SEND_COMMAND_TO_WORK_STATION(app_data.user->work_station, TURN_ON_WS_COMMAND);
 8001ec8:	4b72      	ldr	r3, [pc, #456]	@ (8002094 <app+0x2dc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	7fdb      	ldrb	r3, [r3, #31]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	733a      	strb	r2, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	737a      	strb	r2, [r7, #13]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	73ba      	strb	r2, [r7, #14]
 8001eda:	2200      	movs	r2, #0
 8001edc:	73fa      	strb	r2, [r7, #15]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	743a      	strb	r2, [r7, #16]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	747a      	strb	r2, [r7, #17]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	74ba      	strb	r2, [r7, #18]
 8001eea:	f107 020c 	add.w	r2, r7, #12
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fe5b 	bl	8002bac <APP_SEND_COMMAND_TO_WORK_STATION>
 8001ef6:	e019      	b.n	8001f2c <app+0x174>
				}else{
					BSP_LCD_SendMessage("Chau", 0, 0, True);
 8001ef8:	2301      	movs	r3, #1
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	4867      	ldr	r0, [pc, #412]	@ (800209c <app+0x2e4>)
 8001f00:	f7fe fd1a 	bl	8000938 <BSP_LCD_SendMessage>
					BSP_LCD_SendMessage(app_data.user->name, 0, 1, False);
 8001f04:	4b63      	ldr	r3, [pc, #396]	@ (8002094 <app+0x2dc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	1c58      	adds	r0, r3, #1
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2100      	movs	r1, #0
 8001f10:	f7fe fd12 	bl	8000938 <BSP_LCD_SendMessage>
					APP_SEND_COMMAND_TO_WORK_STATION(app_data.user->work_station, TURN_OFF_WS_COMMAND);
 8001f14:	4b5f      	ldr	r3, [pc, #380]	@ (8002094 <app+0x2dc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	7fd8      	ldrb	r0, [r3, #31]
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f8c3 2003 	str.w	r2, [r3, #3]
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	f000 fe40 	bl	8002bac <APP_SEND_COMMAND_TO_WORK_STATION>
				}
				APP_SETFLAG(IS_CARD_COOLDOWN, True);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f000 fe66 	bl	8002c00 <APP_SETFLAG>
				BSP_StartCardCooldown(True);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f001 f82d 	bl	8002f94 <BSP_StartCardCooldown>
				BSP_LCD_UPDATE_STATUS(rfidSymbol_idx, False);
 8001f3a:	4b59      	ldr	r3, [pc, #356]	@ (80020a0 <app+0x2e8>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fd75 	bl	8000a30 <BSP_LCD_UPDATE_STATUS>
			}
		}

		if(app_flags.update_motion){
 8001f46:	4b50      	ldr	r3, [pc, #320]	@ (8002088 <app+0x2d0>)
 8001f48:	791b      	ldrb	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 848d 	beq.w	800286a <app+0xab2>
			BSP_LCD_UPDATE_STATUS(motionSymbol_idx, app_data.motion_status);
 8001f50:	4b54      	ldr	r3, [pc, #336]	@ (80020a4 <app+0x2ec>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4a4f      	ldr	r2, [pc, #316]	@ (8002094 <app+0x2dc>)
 8001f56:	7e12      	ldrb	r2, [r2, #24]
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fd68 	bl	8000a30 <BSP_LCD_UPDATE_STATUS>
			APP_SETFLAG(UPDATE_MOTION, False);
 8001f60:	2100      	movs	r1, #0
 8001f62:	2004      	movs	r0, #4
 8001f64:	f000 fe4c 	bl	8002c00 <APP_SETFLAG>
		}

		break;
 8001f68:	f000 bc7f 	b.w	800286a <app+0xab2>
	case Config1:
	{


		static int16_t current_showing = -1;
		if(app_flags.show_config_menu){
 8001f6c:	4b46      	ldr	r3, [pc, #280]	@ (8002088 <app+0x2d0>)
 8001f6e:	7a1b      	ldrb	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <app+0x1cc>
			current_showing = -1;
 8001f74:	4b4c      	ldr	r3, [pc, #304]	@ (80020a8 <app+0x2f0>)
 8001f76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f7a:	801a      	strh	r2, [r3, #0]
			APP_SETFLAG(SHOW_CONFIG_MENU, False);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2008      	movs	r0, #8
 8001f80:	f000 fe3e 	bl	8002c00 <APP_SETFLAG>
		}
		if(app_data.encoder_position % CONFIG_MENU_ITEMS != current_showing){
 8001f84:	4b43      	ldr	r3, [pc, #268]	@ (8002094 <app+0x2dc>)
 8001f86:	8b5a      	ldrh	r2, [r3, #26]
 8001f88:	4b48      	ldr	r3, [pc, #288]	@ (80020ac <app+0x2f4>)
 8001f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f8e:	0859      	lsrs	r1, r3, #1
 8001f90:	460b      	mov	r3, r1
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	440b      	add	r3, r1
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b42      	ldr	r3, [pc, #264]	@ (80020a8 <app+0x2f0>)
 8001f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	f000 8463 	beq.w	800286e <app+0xab6>
			current_showing = app_data.encoder_position % CONFIG_MENU_ITEMS;
 8001fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8002094 <app+0x2dc>)
 8001faa:	8b5a      	ldrh	r2, [r3, #26]
 8001fac:	4b3f      	ldr	r3, [pc, #252]	@ (80020ac <app+0x2f4>)
 8001fae:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb2:	0859      	lsrs	r1, r3, #1
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	440b      	add	r3, r1
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	4b39      	ldr	r3, [pc, #228]	@ (80020a8 <app+0x2f0>)
 8001fc2:	801a      	strh	r2, [r3, #0]
			config_menu_display[current_showing]();
 8001fc4:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <app+0x2f0>)
 8001fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b38      	ldr	r3, [pc, #224]	@ (80020b0 <app+0x2f8>)
 8001fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd2:	4798      	blx	r3
		}
		break;
 8001fd4:	f000 bc4b 	b.w	800286e <app+0xab6>
	}
	case Config2:
	{
		static int16_t current_showing = -1;
		if(app_flags.show_config2_menu){
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <app+0x2d0>)
 8001fda:	7a5b      	ldrb	r3, [r3, #9]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <app+0x238>
			current_showing = -1;
 8001fe0:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <app+0x2fc>)
 8001fe2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fe6:	801a      	strh	r2, [r3, #0]
			APP_SETFLAG(SHOW_CONFIG2_MENU, False);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2009      	movs	r0, #9
 8001fec:	f000 fe08 	bl	8002c00 <APP_SETFLAG>
		}
		if(app_data.encoder_position % user_size != current_showing){
 8001ff0:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <app+0x2dc>)
 8001ff2:	8b5b      	ldrh	r3, [r3, #26]
 8001ff4:	4a30      	ldr	r2, [pc, #192]	@ (80020b8 <app+0x300>)
 8001ff6:	7812      	ldrb	r2, [r2, #0]
 8001ff8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ffc:	fb01 f202 	mul.w	r2, r1, r2
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	4a2c      	ldr	r2, [pc, #176]	@ (80020b4 <app+0x2fc>)
 8002004:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002008:	4293      	cmp	r3, r2
 800200a:	f000 8432 	beq.w	8002872 <app+0xaba>
			current_showing = app_data.encoder_position % user_size;
 800200e:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <app+0x2dc>)
 8002010:	8b5b      	ldrh	r3, [r3, #26]
 8002012:	4a29      	ldr	r2, [pc, #164]	@ (80020b8 <app+0x300>)
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	fb93 f1f2 	sdiv	r1, r3, r2
 800201a:	fb01 f202 	mul.w	r2, r1, r2
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	b21a      	sxth	r2, r3
 8002022:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <app+0x2fc>)
 8002024:	801a      	strh	r2, [r3, #0]
			CONFIG_MENU_SHOW_USER(&app_users[current_showing]);
 8002026:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <app+0x2fc>)
 8002028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202c:	461a      	mov	r2, r3
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4a21      	ldr	r2, [pc, #132]	@ (80020bc <app+0x304>)
 8002038:	4413      	add	r3, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 ff74 	bl	8002f28 <CONFIG_MENU_SHOW_USER>
			app_data.selected_user = &app_users[current_showing];
 8002040:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <app+0x2fc>)
 8002042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002046:	461a      	mov	r2, r3
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4a1a      	ldr	r2, [pc, #104]	@ (80020bc <app+0x304>)
 8002052:	4413      	add	r3, r2
 8002054:	4a0f      	ldr	r2, [pc, #60]	@ (8002094 <app+0x2dc>)
 8002056:	6053      	str	r3, [r2, #4]
		}
		break;
 8002058:	f000 bc0b 	b.w	8002872 <app+0xaba>
	{
		static boolean blink = False;
		static char top_row[16];
		static uint8_t new_ws = 1;

		if(blink){
 800205c:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <app+0x308>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d037      	beq.n	80020d4 <app+0x31c>
			sprintf(top_row, "WS: _ P: %s", app_data.selected_user->present == True ? "Si" : "No");
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <app+0x2dc>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <app+0x2bc>
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <app+0x30c>)
 8002072:	e000      	b.n	8002076 <app+0x2be>
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <app+0x310>)
 8002076:	461a      	mov	r2, r3
 8002078:	4914      	ldr	r1, [pc, #80]	@ (80020cc <app+0x314>)
 800207a:	4815      	ldr	r0, [pc, #84]	@ (80020d0 <app+0x318>)
 800207c:	f004 f872 	bl	8006164 <siprintf>
 8002080:	e038      	b.n	80020f4 <app+0x33c>
 8002082:	bf00      	nop
 8002084:	20000374 	.word	0x20000374
 8002088:	2000000c 	.word	0x2000000c
 800208c:	08006b74 	.word	0x08006b74
 8002090:	200000c8 	.word	0x200000c8
 8002094:	20000358 	.word	0x20000358
 8002098:	08006b80 	.word	0x08006b80
 800209c:	08006b88 	.word	0x08006b88
 80020a0:	20000375 	.word	0x20000375
 80020a4:	20000376 	.word	0x20000376
 80020a8:	200000ca 	.word	0x200000ca
 80020ac:	aaaaaaab 	.word	0xaaaaaaab
 80020b0:	200000b0 	.word	0x200000b0
 80020b4:	200000cc 	.word	0x200000cc
 80020b8:	20000094 	.word	0x20000094
 80020bc:	2000001c 	.word	0x2000001c
 80020c0:	20000378 	.word	0x20000378
 80020c4:	08006b90 	.word	0x08006b90
 80020c8:	08006b94 	.word	0x08006b94
 80020cc:	08006b98 	.word	0x08006b98
 80020d0:	2000037c 	.word	0x2000037c
		}
		else{
			sprintf(top_row, "WS: %d P: %s", new_ws, app_data.selected_user->present == True ? "Si" : "No");
 80020d4:	4baa      	ldr	r3, [pc, #680]	@ (8002380 <app+0x5c8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4baa      	ldr	r3, [pc, #680]	@ (8002384 <app+0x5cc>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <app+0x332>
 80020e6:	4ba8      	ldr	r3, [pc, #672]	@ (8002388 <app+0x5d0>)
 80020e8:	e000      	b.n	80020ec <app+0x334>
 80020ea:	4ba8      	ldr	r3, [pc, #672]	@ (800238c <app+0x5d4>)
 80020ec:	49a8      	ldr	r1, [pc, #672]	@ (8002390 <app+0x5d8>)
 80020ee:	48a9      	ldr	r0, [pc, #676]	@ (8002394 <app+0x5dc>)
 80020f0:	f004 f838 	bl	8006164 <siprintf>
		}
		if(BSP_GetBlinkingTime() <= 0){
 80020f4:	f000 ffa4 	bl	8003040 <BSP_GetBlinkingTime>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	dc11      	bgt.n	8002122 <app+0x36a>
			blink = blink == True ? False : True;
 80020fe:	4ba6      	ldr	r3, [pc, #664]	@ (8002398 <app+0x5e0>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	bf14      	ite	ne
 8002106:	2301      	movne	r3, #1
 8002108:	2300      	moveq	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	4ba2      	ldr	r3, [pc, #648]	@ (8002398 <app+0x5e0>)
 8002110:	701a      	strb	r2, [r3, #0]
			BSP_StartBlinking();
 8002112:	f000 ff77 	bl	8003004 <BSP_StartBlinking>
			BSP_LCD_SendMessage(top_row, 0, 0, False);
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	2100      	movs	r1, #0
 800211c:	489d      	ldr	r0, [pc, #628]	@ (8002394 <app+0x5dc>)
 800211e:	f7fe fc0b 	bl	8000938 <BSP_LCD_SendMessage>
		}
		new_ws = (app_data.encoder_position % MAX_WS_AMOUNT) + 1;
 8002122:	4b98      	ldr	r3, [pc, #608]	@ (8002384 <app+0x5cc>)
 8002124:	8b5a      	ldrh	r2, [r3, #26]
 8002126:	4b9d      	ldr	r3, [pc, #628]	@ (800239c <app+0x5e4>)
 8002128:	fba3 1302 	umull	r1, r3, r3, r2
 800212c:	0899      	lsrs	r1, r3, #2
 800212e:	460b      	mov	r3, r1
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	b29b      	uxth	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b90      	ldr	r3, [pc, #576]	@ (8002380 <app+0x5c8>)
 8002140:	701a      	strb	r2, [r3, #0]

		if(app_flags.confirm_config3){
 8002142:	4b97      	ldr	r3, [pc, #604]	@ (80023a0 <app+0x5e8>)
 8002144:	7adb      	ldrb	r3, [r3, #11]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8395 	beq.w	8002876 <app+0xabe>
			APP_SETFLAG(CONFIRM_CONFIG3, False);
 800214c:	2100      	movs	r1, #0
 800214e:	200a      	movs	r0, #10
 8002150:	f000 fd56 	bl	8002c00 <APP_SETFLAG>
			state = Config2;
 8002154:	4b93      	ldr	r3, [pc, #588]	@ (80023a4 <app+0x5ec>)
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
			app_data.selected_user->work_station = new_ws;
 800215a:	4b8a      	ldr	r3, [pc, #552]	@ (8002384 <app+0x5cc>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a88      	ldr	r2, [pc, #544]	@ (8002380 <app+0x5c8>)
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	77da      	strb	r2, [r3, #31]
			sprintf(top_row, "WS: %d P: %s", new_ws, app_data.selected_user->present == True ? "Si" : "No");
 8002164:	4b86      	ldr	r3, [pc, #536]	@ (8002380 <app+0x5c8>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b86      	ldr	r3, [pc, #536]	@ (8002384 <app+0x5cc>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <app+0x3c2>
 8002176:	4b84      	ldr	r3, [pc, #528]	@ (8002388 <app+0x5d0>)
 8002178:	e000      	b.n	800217c <app+0x3c4>
 800217a:	4b84      	ldr	r3, [pc, #528]	@ (800238c <app+0x5d4>)
 800217c:	4984      	ldr	r1, [pc, #528]	@ (8002390 <app+0x5d8>)
 800217e:	4885      	ldr	r0, [pc, #532]	@ (8002394 <app+0x5dc>)
 8002180:	f003 fff0 	bl	8006164 <siprintf>
			BSP_LCD_SendMessage(top_row, 0, 0, False);
 8002184:	2300      	movs	r3, #0
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	4882      	ldr	r0, [pc, #520]	@ (8002394 <app+0x5dc>)
 800218c:	f7fe fbd4 	bl	8000938 <BSP_LCD_SendMessage>
			BSP_ENCODER_ResetEncoder();
 8002190:	f7fe fb72 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}
		break;
 8002194:	e36f      	b.n	8002876 <app+0xabe>
		static uint8_t new_snum;
		static uint8_t current_field=0;
		static APP_USER_Struct user;
		static uint8_t name_length;

		if(app_flags.show_add_user_menu){
 8002196:	4b82      	ldr	r3, [pc, #520]	@ (80023a0 <app+0x5e8>)
 8002198:	7b5b      	ldrb	r3, [r3, #13]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d028      	beq.n	80021f0 <app+0x438>
			current_field = 0;
 800219e:	4b82      	ldr	r3, [pc, #520]	@ (80023a8 <app+0x5f0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
			memset(new_name, 0, sizeof(new_name));
 80021a4:	2210      	movs	r2, #16
 80021a6:	2100      	movs	r1, #0
 80021a8:	4880      	ldr	r0, [pc, #512]	@ (80023ac <app+0x5f4>)
 80021aa:	f003 fffb 	bl	80061a4 <memset>
			new_snum = 0;
 80021ae:	4b80      	ldr	r3, [pc, #512]	@ (80023b0 <app+0x5f8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
			letter = 'A';
 80021b4:	4b7f      	ldr	r3, [pc, #508]	@ (80023b4 <app+0x5fc>)
 80021b6:	2241      	movs	r2, #65	@ 0x41
 80021b8:	701a      	strb	r2, [r3, #0]
			new_ws = 1;
 80021ba:	4b7f      	ldr	r3, [pc, #508]	@ (80023b8 <app+0x600>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
			name_length = 0;
 80021c0:	4b7e      	ldr	r3, [pc, #504]	@ (80023bc <app+0x604>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(SHOW_ADD_USER_MENU, False);
 80021c6:	2100      	movs	r1, #0
 80021c8:	200d      	movs	r0, #13
 80021ca:	f000 fd19 	bl	8002c00 <APP_SETFLAG>
			if(user_size == MAX_USER_AMOUNT){
 80021ce:	4b7c      	ldr	r3, [pc, #496]	@ (80023c0 <app+0x608>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d10c      	bne.n	80021f0 <app+0x438>
				BSP_LCD_SendMessage("Maximo limite", 0, 0, True);
 80021d6:	2301      	movs	r3, #1
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	4879      	ldr	r0, [pc, #484]	@ (80023c4 <app+0x60c>)
 80021de:	f7fe fbab 	bl	8000938 <BSP_LCD_SendMessage>
				BSP_LCD_SendMessage("de usuarios", 0, 1, False);
 80021e2:	2300      	movs	r3, #0
 80021e4:	2201      	movs	r2, #1
 80021e6:	2100      	movs	r1, #0
 80021e8:	4877      	ldr	r0, [pc, #476]	@ (80023c8 <app+0x610>)
 80021ea:	f7fe fba5 	bl	8000938 <BSP_LCD_SendMessage>
				return;
 80021ee:	e34d      	b.n	800288c <app+0xad4>
			}
		}
		if(user_size == MAX_USER_AMOUNT) return;
 80021f0:	4b73      	ldr	r3, [pc, #460]	@ (80023c0 <app+0x608>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	f000 8340 	beq.w	800287a <app+0xac2>


		if(blink){
 80021fa:	4b74      	ldr	r3, [pc, #464]	@ (80023cc <app+0x614>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d05d      	beq.n	80022be <app+0x506>
			switch(current_field){
 8002202:	4b69      	ldr	r3, [pc, #420]	@ (80023a8 <app+0x5f0>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b12      	cmp	r3, #18
 8002208:	d850      	bhi.n	80022ac <app+0x4f4>
 800220a:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <app+0x458>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	0800225d 	.word	0x0800225d
 8002214:	0800226f 	.word	0x0800226f
 8002218:	08002281 	.word	0x08002281
 800221c:	08002281 	.word	0x08002281
 8002220:	08002281 	.word	0x08002281
 8002224:	08002281 	.word	0x08002281
 8002228:	08002281 	.word	0x08002281
 800222c:	08002281 	.word	0x08002281
 8002230:	08002281 	.word	0x08002281
 8002234:	08002281 	.word	0x08002281
 8002238:	08002281 	.word	0x08002281
 800223c:	08002281 	.word	0x08002281
 8002240:	08002281 	.word	0x08002281
 8002244:	08002281 	.word	0x08002281
 8002248:	08002281 	.word	0x08002281
 800224c:	08002281 	.word	0x08002281
 8002250:	08002281 	.word	0x08002281
 8002254:	08002281 	.word	0x08002281
 8002258:	08002295 	.word	0x08002295
			case 0:
				sprintf(top_row, "WS: _");
 800225c:	495c      	ldr	r1, [pc, #368]	@ (80023d0 <app+0x618>)
 800225e:	485d      	ldr	r0, [pc, #372]	@ (80023d4 <app+0x61c>)
 8002260:	f003 ff80 	bl	8006164 <siprintf>
				sprintf(bottom_row, " ");
 8002264:	495c      	ldr	r1, [pc, #368]	@ (80023d8 <app+0x620>)
 8002266:	485d      	ldr	r0, [pc, #372]	@ (80023dc <app+0x624>)
 8002268:	f003 ff7c 	bl	8006164 <siprintf>
				break;
 800226c:	e0d9      	b.n	8002422 <app+0x66a>
			case 1:
				sprintf(top_row, "Largo del");
 800226e:	495c      	ldr	r1, [pc, #368]	@ (80023e0 <app+0x628>)
 8002270:	4858      	ldr	r0, [pc, #352]	@ (80023d4 <app+0x61c>)
 8002272:	f003 ff77 	bl	8006164 <siprintf>
				sprintf(bottom_row, " _    nombre");
 8002276:	495b      	ldr	r1, [pc, #364]	@ (80023e4 <app+0x62c>)
 8002278:	4858      	ldr	r0, [pc, #352]	@ (80023dc <app+0x624>)
 800227a:	f003 ff73 	bl	8006164 <siprintf>
				break;
 800227e:	e0d0      	b.n	8002422 <app+0x66a>
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
				sprintf(top_row, "Nombre: _");
 8002280:	4959      	ldr	r1, [pc, #356]	@ (80023e8 <app+0x630>)
 8002282:	4854      	ldr	r0, [pc, #336]	@ (80023d4 <app+0x61c>)
 8002284:	f003 ff6e 	bl	8006164 <siprintf>
				sprintf(bottom_row, "%s", new_name);
 8002288:	4a48      	ldr	r2, [pc, #288]	@ (80023ac <app+0x5f4>)
 800228a:	4958      	ldr	r1, [pc, #352]	@ (80023ec <app+0x634>)
 800228c:	4853      	ldr	r0, [pc, #332]	@ (80023dc <app+0x624>)
 800228e:	f003 ff69 	bl	8006164 <siprintf>
				break;
 8002292:	e0c6      	b.n	8002422 <app+0x66a>
			case 18:
				sprintf(top_row, "N Serial: _");
 8002294:	4956      	ldr	r1, [pc, #344]	@ (80023f0 <app+0x638>)
 8002296:	484f      	ldr	r0, [pc, #316]	@ (80023d4 <app+0x61c>)
 8002298:	f003 ff64 	bl	8006164 <siprintf>
				sprintf(bottom_row, "%d", new_snum);
 800229c:	4b44      	ldr	r3, [pc, #272]	@ (80023b0 <app+0x5f8>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4954      	ldr	r1, [pc, #336]	@ (80023f4 <app+0x63c>)
 80022a4:	484d      	ldr	r0, [pc, #308]	@ (80023dc <app+0x624>)
 80022a6:	f003 ff5d 	bl	8006164 <siprintf>
				break;
 80022aa:	e0ba      	b.n	8002422 <app+0x66a>
			default:
				sprintf(top_row, "Wrong turn!");
 80022ac:	4952      	ldr	r1, [pc, #328]	@ (80023f8 <app+0x640>)
 80022ae:	4849      	ldr	r0, [pc, #292]	@ (80023d4 <app+0x61c>)
 80022b0:	f003 ff58 	bl	8006164 <siprintf>
				sprintf(bottom_row, "--------------");
 80022b4:	4951      	ldr	r1, [pc, #324]	@ (80023fc <app+0x644>)
 80022b6:	4849      	ldr	r0, [pc, #292]	@ (80023dc <app+0x624>)
 80022b8:	f003 ff54 	bl	8006164 <siprintf>
				break;
 80022bc:	e0b1      	b.n	8002422 <app+0x66a>
		}
		}
		else{
			switch(current_field){
 80022be:	4b3a      	ldr	r3, [pc, #232]	@ (80023a8 <app+0x5f0>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	f200 80a4 	bhi.w	8002410 <app+0x658>
 80022c8:	a201      	add	r2, pc, #4	@ (adr r2, 80022d0 <app+0x518>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	0800231d 	.word	0x0800231d
 80022d4:	08002335 	.word	0x08002335
 80022d8:	0800234d 	.word	0x0800234d
 80022dc:	0800234d 	.word	0x0800234d
 80022e0:	0800234d 	.word	0x0800234d
 80022e4:	0800234d 	.word	0x0800234d
 80022e8:	0800234d 	.word	0x0800234d
 80022ec:	0800234d 	.word	0x0800234d
 80022f0:	0800234d 	.word	0x0800234d
 80022f4:	0800234d 	.word	0x0800234d
 80022f8:	0800234d 	.word	0x0800234d
 80022fc:	0800234d 	.word	0x0800234d
 8002300:	0800234d 	.word	0x0800234d
 8002304:	0800234d 	.word	0x0800234d
 8002308:	0800234d 	.word	0x0800234d
 800230c:	0800234d 	.word	0x0800234d
 8002310:	0800234d 	.word	0x0800234d
 8002314:	0800234d 	.word	0x0800234d
 8002318:	08002367 	.word	0x08002367
			case 0:
				sprintf(top_row, "WS: %d", new_ws);
 800231c:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <app+0x600>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4937      	ldr	r1, [pc, #220]	@ (8002400 <app+0x648>)
 8002324:	482b      	ldr	r0, [pc, #172]	@ (80023d4 <app+0x61c>)
 8002326:	f003 ff1d 	bl	8006164 <siprintf>
				sprintf(bottom_row, " ");
 800232a:	492b      	ldr	r1, [pc, #172]	@ (80023d8 <app+0x620>)
 800232c:	482b      	ldr	r0, [pc, #172]	@ (80023dc <app+0x624>)
 800232e:	f003 ff19 	bl	8006164 <siprintf>
				break;
 8002332:	e076      	b.n	8002422 <app+0x66a>
			case 1:
				sprintf(top_row, "Largo del");
 8002334:	492a      	ldr	r1, [pc, #168]	@ (80023e0 <app+0x628>)
 8002336:	4827      	ldr	r0, [pc, #156]	@ (80023d4 <app+0x61c>)
 8002338:	f003 ff14 	bl	8006164 <siprintf>
				sprintf(bottom_row, " %d    nombre", name_length);
 800233c:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <app+0x604>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4930      	ldr	r1, [pc, #192]	@ (8002404 <app+0x64c>)
 8002344:	4825      	ldr	r0, [pc, #148]	@ (80023dc <app+0x624>)
 8002346:	f003 ff0d 	bl	8006164 <siprintf>
				break;
 800234a:	e06a      	b.n	8002422 <app+0x66a>
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
				sprintf(top_row, "Nombre: %c", letter);
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <app+0x5fc>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	492d      	ldr	r1, [pc, #180]	@ (8002408 <app+0x650>)
 8002354:	481f      	ldr	r0, [pc, #124]	@ (80023d4 <app+0x61c>)
 8002356:	f003 ff05 	bl	8006164 <siprintf>
				sprintf(bottom_row, "%s", new_name);
 800235a:	4a14      	ldr	r2, [pc, #80]	@ (80023ac <app+0x5f4>)
 800235c:	4923      	ldr	r1, [pc, #140]	@ (80023ec <app+0x634>)
 800235e:	481f      	ldr	r0, [pc, #124]	@ (80023dc <app+0x624>)
 8002360:	f003 ff00 	bl	8006164 <siprintf>
				break;
 8002364:	e05d      	b.n	8002422 <app+0x66a>
			case 18:
				sprintf(top_row, "N Serial:");
 8002366:	4929      	ldr	r1, [pc, #164]	@ (800240c <app+0x654>)
 8002368:	481a      	ldr	r0, [pc, #104]	@ (80023d4 <app+0x61c>)
 800236a:	f003 fefb 	bl	8006164 <siprintf>
				sprintf(bottom_row, "%d", new_snum);
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <app+0x5f8>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	491f      	ldr	r1, [pc, #124]	@ (80023f4 <app+0x63c>)
 8002376:	4819      	ldr	r0, [pc, #100]	@ (80023dc <app+0x624>)
 8002378:	f003 fef4 	bl	8006164 <siprintf>
				break;
 800237c:	e051      	b.n	8002422 <app+0x66a>
 800237e:	bf00      	nop
 8002380:	200000ce 	.word	0x200000ce
 8002384:	20000358 	.word	0x20000358
 8002388:	08006b90 	.word	0x08006b90
 800238c:	08006b94 	.word	0x08006b94
 8002390:	08006ba4 	.word	0x08006ba4
 8002394:	2000037c 	.word	0x2000037c
 8002398:	20000378 	.word	0x20000378
 800239c:	cccccccd 	.word	0xcccccccd
 80023a0:	2000000c 	.word	0x2000000c
 80023a4:	20000374 	.word	0x20000374
 80023a8:	2000038c 	.word	0x2000038c
 80023ac:	20000390 	.word	0x20000390
 80023b0:	200003a0 	.word	0x200003a0
 80023b4:	200003a1 	.word	0x200003a1
 80023b8:	200000cf 	.word	0x200000cf
 80023bc:	200003a2 	.word	0x200003a2
 80023c0:	20000094 	.word	0x20000094
 80023c4:	08006bb4 	.word	0x08006bb4
 80023c8:	08006bc4 	.word	0x08006bc4
 80023cc:	200003a3 	.word	0x200003a3
 80023d0:	08006bd0 	.word	0x08006bd0
 80023d4:	200003a4 	.word	0x200003a4
 80023d8:	08006bd8 	.word	0x08006bd8
 80023dc:	200003b4 	.word	0x200003b4
 80023e0:	08006bdc 	.word	0x08006bdc
 80023e4:	08006be8 	.word	0x08006be8
 80023e8:	08006bf8 	.word	0x08006bf8
 80023ec:	08006c04 	.word	0x08006c04
 80023f0:	08006c08 	.word	0x08006c08
 80023f4:	08006c14 	.word	0x08006c14
 80023f8:	08006c18 	.word	0x08006c18
 80023fc:	08006c24 	.word	0x08006c24
 8002400:	08006c34 	.word	0x08006c34
 8002404:	08006c3c 	.word	0x08006c3c
 8002408:	08006c4c 	.word	0x08006c4c
 800240c:	08006c58 	.word	0x08006c58
			default:
				sprintf(top_row, "Wrong turn!");
 8002410:	49a2      	ldr	r1, [pc, #648]	@ (800269c <app+0x8e4>)
 8002412:	48a3      	ldr	r0, [pc, #652]	@ (80026a0 <app+0x8e8>)
 8002414:	f003 fea6 	bl	8006164 <siprintf>
				sprintf(bottom_row, "--------------");
 8002418:	49a2      	ldr	r1, [pc, #648]	@ (80026a4 <app+0x8ec>)
 800241a:	48a3      	ldr	r0, [pc, #652]	@ (80026a8 <app+0x8f0>)
 800241c:	f003 fea2 	bl	8006164 <siprintf>
				break;
 8002420:	bf00      	nop
		}
		}
		if(BSP_GetBlinkingTime() <= 0){
 8002422:	f000 fe0d 	bl	8003040 <BSP_GetBlinkingTime>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	dc17      	bgt.n	800245c <app+0x6a4>
			blink = blink == True ? False : True;
 800242c:	4b9f      	ldr	r3, [pc, #636]	@ (80026ac <app+0x8f4>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	4b9b      	ldr	r3, [pc, #620]	@ (80026ac <app+0x8f4>)
 800243e:	701a      	strb	r2, [r3, #0]
			BSP_StartBlinking();
 8002440:	f000 fde0 	bl	8003004 <BSP_StartBlinking>
			BSP_LCD_SendMessage(top_row, 0, 0, True);
 8002444:	2301      	movs	r3, #1
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	4895      	ldr	r0, [pc, #596]	@ (80026a0 <app+0x8e8>)
 800244c:	f7fe fa74 	bl	8000938 <BSP_LCD_SendMessage>
			BSP_LCD_SendMessage(bottom_row, 0, 1, False);
 8002450:	2300      	movs	r3, #0
 8002452:	2201      	movs	r2, #1
 8002454:	2100      	movs	r1, #0
 8002456:	4894      	ldr	r0, [pc, #592]	@ (80026a8 <app+0x8f0>)
 8002458:	f7fe fa6e 	bl	8000938 <BSP_LCD_SendMessage>
		}

		switch(current_field){
 800245c:	4b94      	ldr	r3, [pc, #592]	@ (80026b0 <app+0x8f8>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b12      	cmp	r3, #18
 8002462:	f200 8098 	bhi.w	8002596 <app+0x7de>
 8002466:	a201      	add	r2, pc, #4	@ (adr r2, 800246c <app+0x6b4>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	080024b9 	.word	0x080024b9
 8002470:	080024db 	.word	0x080024db
 8002474:	08002501 	.word	0x08002501
 8002478:	0800252b 	.word	0x0800252b
 800247c:	0800252b 	.word	0x0800252b
 8002480:	0800252b 	.word	0x0800252b
 8002484:	0800252b 	.word	0x0800252b
 8002488:	0800252b 	.word	0x0800252b
 800248c:	0800252b 	.word	0x0800252b
 8002490:	0800252b 	.word	0x0800252b
 8002494:	0800252b 	.word	0x0800252b
 8002498:	0800252b 	.word	0x0800252b
 800249c:	0800252b 	.word	0x0800252b
 80024a0:	0800252b 	.word	0x0800252b
 80024a4:	0800252b 	.word	0x0800252b
 80024a8:	0800252b 	.word	0x0800252b
 80024ac:	0800252b 	.word	0x0800252b
 80024b0:	0800252b 	.word	0x0800252b
 80024b4:	0800255b 	.word	0x0800255b
		case 0:
			if(app_data.encoder_position < 0){
				new_ws = ((MAX_WS_AMOUNT-1 + app_data.encoder_position) % MAX_WS_AMOUNT) + 1;
			}else{
				new_ws = (app_data.encoder_position % MAX_WS_AMOUNT) + 1;
 80024b8:	4b7e      	ldr	r3, [pc, #504]	@ (80026b4 <app+0x8fc>)
 80024ba:	8b5a      	ldrh	r2, [r3, #26]
 80024bc:	4b7e      	ldr	r3, [pc, #504]	@ (80026b8 <app+0x900>)
 80024be:	fba3 1302 	umull	r1, r3, r3, r2
 80024c2:	0899      	lsrs	r1, r3, #2
 80024c4:	460b      	mov	r3, r1
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b79      	ldr	r3, [pc, #484]	@ (80026bc <app+0x904>)
 80024d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80024d8:	e075      	b.n	80025c6 <app+0x80e>
		case 1:
			if(app_data.encoder_position < 0){
				name_length = ((12 + app_data.encoder_position) % 13) + 4;
			}
			else{
				name_length = (app_data.encoder_position % 13) + 4;
 80024da:	4b76      	ldr	r3, [pc, #472]	@ (80026b4 <app+0x8fc>)
 80024dc:	8b59      	ldrh	r1, [r3, #26]
 80024de:	4b78      	ldr	r3, [pc, #480]	@ (80026c0 <app+0x908>)
 80024e0:	fba3 2301 	umull	r2, r3, r3, r1
 80024e4:	089a      	lsrs	r2, r3, #2
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	1acb      	subs	r3, r1, r3
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3304      	adds	r3, #4
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b72      	ldr	r3, [pc, #456]	@ (80026c4 <app+0x90c>)
 80024fc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80024fe:	e062      	b.n	80025c6 <app+0x80e>
		case 2:
			if(app_data.encoder_position < 0){
				letter = (char)((LETTERS_ALPHABET-1 + app_data.encoder_position) % LETTERS_ALPHABET) + UPPERCASE_OFFSET;
			}
			else{
				letter = (char)(app_data.encoder_position % LETTERS_ALPHABET) + UPPERCASE_OFFSET;
 8002500:	4b6c      	ldr	r3, [pc, #432]	@ (80026b4 <app+0x8fc>)
 8002502:	8b5b      	ldrh	r3, [r3, #26]
 8002504:	4a6e      	ldr	r2, [pc, #440]	@ (80026c0 <app+0x908>)
 8002506:	fba2 1203 	umull	r1, r2, r2, r3
 800250a:	08d2      	lsrs	r2, r2, #3
 800250c:	211a      	movs	r1, #26
 800250e:	fb01 f202 	mul.w	r2, r1, r2
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3341      	adds	r3, #65	@ 0x41
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <app+0x910>)
 800251e:	701a      	strb	r2, [r3, #0]
			}
			new_name[0] = (char) letter;
 8002520:	4b69      	ldr	r3, [pc, #420]	@ (80026c8 <app+0x910>)
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	4b69      	ldr	r3, [pc, #420]	@ (80026cc <app+0x914>)
 8002526:	701a      	strb	r2, [r3, #0]
			break;
 8002528:	e04d      	b.n	80025c6 <app+0x80e>
		case 17:
			if(app_data.encoder_position < 0){
				letter = (char)((LETTERS_ALPHABET + app_data.encoder_position) % LETTERS_ALPHABET) + LOWERCASE_OFFSET;
			}
			else{
				letter = (char)(app_data.encoder_position % LETTERS_ALPHABET) + LOWERCASE_OFFSET;
 800252a:	4b62      	ldr	r3, [pc, #392]	@ (80026b4 <app+0x8fc>)
 800252c:	8b5b      	ldrh	r3, [r3, #26]
 800252e:	4a64      	ldr	r2, [pc, #400]	@ (80026c0 <app+0x908>)
 8002530:	fba2 1203 	umull	r1, r2, r2, r3
 8002534:	08d2      	lsrs	r2, r2, #3
 8002536:	211a      	movs	r1, #26
 8002538:	fb01 f202 	mul.w	r2, r1, r2
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	b29b      	uxth	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3361      	adds	r3, #97	@ 0x61
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b60      	ldr	r3, [pc, #384]	@ (80026c8 <app+0x910>)
 8002548:	701a      	strb	r2, [r3, #0]
			}

			new_name[current_field - 2] = letter;
 800254a:	4b59      	ldr	r3, [pc, #356]	@ (80026b0 <app+0x8f8>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	3b02      	subs	r3, #2
 8002550:	4a5d      	ldr	r2, [pc, #372]	@ (80026c8 <app+0x910>)
 8002552:	7811      	ldrb	r1, [r2, #0]
 8002554:	4a5d      	ldr	r2, [pc, #372]	@ (80026cc <app+0x914>)
 8002556:	54d1      	strb	r1, [r2, r3]

			break;
 8002558:	e035      	b.n	80025c6 <app+0x80e>
		case 18:
			if(!app_flags.is_card_cooldown){
 800255a:	4b5d      	ldr	r3, [pc, #372]	@ (80026d0 <app+0x918>)
 800255c:	789b      	ldrb	r3, [r3, #2]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d130      	bne.n	80025c4 <app+0x80c>
				static uint8_t status = -1;
				if(status != MI_OK){
 8002562:	4b5c      	ldr	r3, [pc, #368]	@ (80026d4 <app+0x91c>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <app+0x7c2>
					status = BSP_RC522_GetSerialNumber(&new_snum);
 800256a:	485b      	ldr	r0, [pc, #364]	@ (80026d8 <app+0x920>)
 800256c:	f7fe faba 	bl	8000ae4 <BSP_RC522_GetSerialNumber>
 8002570:	4603      	mov	r3, r0
 8002572:	461a      	mov	r2, r3
 8002574:	4b57      	ldr	r3, [pc, #348]	@ (80026d4 <app+0x91c>)
 8002576:	701a      	strb	r2, [r3, #0]
					BSP_StartCardCooldown(False);
					BSP_LCD_UPDATE_STATUS(rfidSymbol_idx, False);
				}

			}
			break;
 8002578:	e024      	b.n	80025c4 <app+0x80c>
					APP_SETFLAG(IS_CARD_COOLDOWN, True);
 800257a:	2101      	movs	r1, #1
 800257c:	2003      	movs	r0, #3
 800257e:	f000 fb3f 	bl	8002c00 <APP_SETFLAG>
					BSP_StartCardCooldown(False);
 8002582:	2000      	movs	r0, #0
 8002584:	f000 fd06 	bl	8002f94 <BSP_StartCardCooldown>
					BSP_LCD_UPDATE_STATUS(rfidSymbol_idx, False);
 8002588:	4b54      	ldr	r3, [pc, #336]	@ (80026dc <app+0x924>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fa4e 	bl	8000a30 <BSP_LCD_UPDATE_STATUS>
			break;
 8002594:	e016      	b.n	80025c4 <app+0x80c>
		default:
			state = ConfirmAdd;
 8002596:	4b52      	ldr	r3, [pc, #328]	@ (80026e0 <app+0x928>)
 8002598:	2205      	movs	r2, #5
 800259a:	701a      	strb	r2, [r3, #0]
			strcpy(user.name, new_name);
 800259c:	494b      	ldr	r1, [pc, #300]	@ (80026cc <app+0x914>)
 800259e:	4851      	ldr	r0, [pc, #324]	@ (80026e4 <app+0x92c>)
 80025a0:	f003 fe34 	bl	800620c <strcpy>
			user.serial_number = new_snum;
 80025a4:	4b4c      	ldr	r3, [pc, #304]	@ (80026d8 <app+0x920>)
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	4b4f      	ldr	r3, [pc, #316]	@ (80026e8 <app+0x930>)
 80025aa:	701a      	strb	r2, [r3, #0]
			user.work_station = new_ws;
 80025ac:	4b43      	ldr	r3, [pc, #268]	@ (80026bc <app+0x904>)
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	4b4d      	ldr	r3, [pc, #308]	@ (80026e8 <app+0x930>)
 80025b2:	77da      	strb	r2, [r3, #31]
			app_data.selected_user = &user;
 80025b4:	4b3f      	ldr	r3, [pc, #252]	@ (80026b4 <app+0x8fc>)
 80025b6:	4a4c      	ldr	r2, [pc, #304]	@ (80026e8 <app+0x930>)
 80025b8:	605a      	str	r2, [r3, #4]
			APP_SETFLAG(SHOW_ADD_USER_MENU, True);
 80025ba:	2101      	movs	r1, #1
 80025bc:	200d      	movs	r0, #13
 80025be:	f000 fb1f 	bl	8002c00 <APP_SETFLAG>
			break;
 80025c2:	e000      	b.n	80025c6 <app+0x80e>
			break;
 80025c4:	bf00      	nop
		}

		if(app_flags.confirm_action){
 80025c6:	4b42      	ldr	r3, [pc, #264]	@ (80026d0 <app+0x918>)
 80025c8:	7b9b      	ldrb	r3, [r3, #14]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8157 	beq.w	800287e <app+0xac6>
			APP_SETFLAG(CONFIRM_ACTION, False);
 80025d0:	2100      	movs	r1, #0
 80025d2:	200e      	movs	r0, #14
 80025d4:	f000 fb14 	bl	8002c00 <APP_SETFLAG>
			if(current_field == name_length + 1){
 80025d8:	4b35      	ldr	r3, [pc, #212]	@ (80026b0 <app+0x8f8>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b39      	ldr	r3, [pc, #228]	@ (80026c4 <app+0x90c>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d103      	bne.n	80025f0 <app+0x838>
				current_field = 18;
 80025e8:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <app+0x8f8>)
 80025ea:	2212      	movs	r2, #18
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	e005      	b.n	80025fc <app+0x844>
			}else
			{
				current_field++;
 80025f0:	4b2f      	ldr	r3, [pc, #188]	@ (80026b0 <app+0x8f8>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b2d      	ldr	r3, [pc, #180]	@ (80026b0 <app+0x8f8>)
 80025fa:	701a      	strb	r2, [r3, #0]
			}
			BSP_ENCODER_ResetEncoder();
 80025fc:	f7fe f93c 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}


		break;
 8002600:	e13d      	b.n	800287e <app+0xac6>
	}
	case ConfirmAdd:
	{
		if(app_flags.show_add_user_menu){
 8002602:	4b33      	ldr	r3, [pc, #204]	@ (80026d0 <app+0x918>)
 8002604:	7b5b      	ldrb	r3, [r3, #13]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00f      	beq.n	800262a <app+0x872>
			APP_SETFLAG(SHOW_ADD_USER_MENU, False);
 800260a:	2100      	movs	r1, #0
 800260c:	200d      	movs	r0, #13
 800260e:	f000 faf7 	bl	8002c00 <APP_SETFLAG>
			BSP_LCD_SendMessage("Confirmar", 0, 0, True);
 8002612:	2301      	movs	r3, #1
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	4834      	ldr	r0, [pc, #208]	@ (80026ec <app+0x934>)
 800261a:	f7fe f98d 	bl	8000938 <BSP_LCD_SendMessage>
			BSP_LCD_SendMessage("Denegar: Hold", 0, 1, False);
 800261e:	2300      	movs	r3, #0
 8002620:	2201      	movs	r2, #1
 8002622:	2100      	movs	r1, #0
 8002624:	4832      	ldr	r0, [pc, #200]	@ (80026f0 <app+0x938>)
 8002626:	f7fe f987 	bl	8000938 <BSP_LCD_SendMessage>
		}

		if(app_flags.confirm_action){
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <app+0x918>)
 800262c:	7b9b      	ldrb	r3, [r3, #14]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8127 	beq.w	8002882 <app+0xaca>
			app_users[user_size] = *app_data.selected_user;
 8002634:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <app+0x8fc>)
 8002636:	6858      	ldr	r0, [r3, #4]
 8002638:	4b2e      	ldr	r3, [pc, #184]	@ (80026f4 <app+0x93c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	4a2e      	ldr	r2, [pc, #184]	@ (80026f8 <app+0x940>)
 8002640:	460b      	mov	r3, r1
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	4604      	mov	r4, r0
 800264c:	461e      	mov	r6, r3
 800264e:	f104 0c20 	add.w	ip, r4, #32
 8002652:	4635      	mov	r5, r6
 8002654:	4623      	mov	r3, r4
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002660:	3410      	adds	r4, #16
 8002662:	3610      	adds	r6, #16
 8002664:	4564      	cmp	r4, ip
 8002666:	d1f4      	bne.n	8002652 <app+0x89a>
 8002668:	4633      	mov	r3, r6
 800266a:	4622      	mov	r2, r4
 800266c:	6810      	ldr	r0, [r2, #0]
 800266e:	6851      	ldr	r1, [r2, #4]
 8002670:	c303      	stmia	r3!, {r0, r1}
			user_size++;
 8002672:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <app+0x93c>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <app+0x93c>)
 800267c:	701a      	strb	r2, [r3, #0]
			state = Idle;
 800267e:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <app+0x928>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_HELD, False);
 8002684:	2100      	movs	r1, #0
 8002686:	2006      	movs	r0, #6
 8002688:	f000 faba 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_IDLE, True);
 800268c:	2101      	movs	r1, #1
 800268e:	200b      	movs	r0, #11
 8002690:	f000 fab6 	bl	8002c00 <APP_SETFLAG>
			BSP_ENCODER_ResetEncoder();
 8002694:	f7fe f8f0 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}
		break;
 8002698:	e0f3      	b.n	8002882 <app+0xaca>
 800269a:	bf00      	nop
 800269c:	08006c18 	.word	0x08006c18
 80026a0:	200003a4 	.word	0x200003a4
 80026a4:	08006c24 	.word	0x08006c24
 80026a8:	200003b4 	.word	0x200003b4
 80026ac:	200003a3 	.word	0x200003a3
 80026b0:	2000038c 	.word	0x2000038c
 80026b4:	20000358 	.word	0x20000358
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	200000cf 	.word	0x200000cf
 80026c0:	4ec4ec4f 	.word	0x4ec4ec4f
 80026c4:	200003a2 	.word	0x200003a2
 80026c8:	200003a1 	.word	0x200003a1
 80026cc:	20000390 	.word	0x20000390
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	200000d0 	.word	0x200000d0
 80026d8:	200003a0 	.word	0x200003a0
 80026dc:	20000375 	.word	0x20000375
 80026e0:	20000374 	.word	0x20000374
 80026e4:	200003c5 	.word	0x200003c5
 80026e8:	200003c4 	.word	0x200003c4
 80026ec:	08006c64 	.word	0x08006c64
 80026f0:	08006c70 	.word	0x08006c70
 80026f4:	20000094 	.word	0x20000094
 80026f8:	2000001c 	.word	0x2000001c
	}
	case EraseUser:
	{
		static int16_t current_showing = -1;
		if(app_flags.show_erase_user_menu){
 80026fc:	4b65      	ldr	r3, [pc, #404]	@ (8002894 <app+0xadc>)
 80026fe:	7b1b      	ldrb	r3, [r3, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <app+0x95c>
			current_showing = -1;
 8002704:	4b64      	ldr	r3, [pc, #400]	@ (8002898 <app+0xae0>)
 8002706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800270a:	801a      	strh	r2, [r3, #0]
			APP_SETFLAG(SHOW_ERASE_USER_MENU, False);
 800270c:	2100      	movs	r1, #0
 800270e:	200c      	movs	r0, #12
 8002710:	f000 fa76 	bl	8002c00 <APP_SETFLAG>
		}
		if(app_data.encoder_position % user_size != current_showing){
 8002714:	4b61      	ldr	r3, [pc, #388]	@ (800289c <app+0xae4>)
 8002716:	8b5b      	ldrh	r3, [r3, #26]
 8002718:	4a61      	ldr	r2, [pc, #388]	@ (80028a0 <app+0xae8>)
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002720:	fb01 f202 	mul.w	r2, r1, r2
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	4a5c      	ldr	r2, [pc, #368]	@ (8002898 <app+0xae0>)
 8002728:	f9b2 2000 	ldrsh.w	r2, [r2]
 800272c:	4293      	cmp	r3, r2
 800272e:	f000 80aa 	beq.w	8002886 <app+0xace>
			current_showing = app_data.encoder_position % user_size;
 8002732:	4b5a      	ldr	r3, [pc, #360]	@ (800289c <app+0xae4>)
 8002734:	8b5b      	ldrh	r3, [r3, #26]
 8002736:	4a5a      	ldr	r2, [pc, #360]	@ (80028a0 <app+0xae8>)
 8002738:	7812      	ldrb	r2, [r2, #0]
 800273a:	fb93 f1f2 	sdiv	r1, r3, r2
 800273e:	fb01 f202 	mul.w	r2, r1, r2
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	b21a      	sxth	r2, r3
 8002746:	4b54      	ldr	r3, [pc, #336]	@ (8002898 <app+0xae0>)
 8002748:	801a      	strh	r2, [r3, #0]
			CONFIG_MENU_SHOW_USER(&app_users[current_showing]);
 800274a:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <app+0xae0>)
 800274c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002750:	461a      	mov	r2, r3
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4a52      	ldr	r2, [pc, #328]	@ (80028a4 <app+0xaec>)
 800275c:	4413      	add	r3, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fbe2 	bl	8002f28 <CONFIG_MENU_SHOW_USER>
			app_data.selected_user = &app_users[current_showing];
 8002764:	4b4c      	ldr	r3, [pc, #304]	@ (8002898 <app+0xae0>)
 8002766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276a:	461a      	mov	r2, r3
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4a4b      	ldr	r2, [pc, #300]	@ (80028a4 <app+0xaec>)
 8002776:	4413      	add	r3, r2
 8002778:	4a48      	ldr	r2, [pc, #288]	@ (800289c <app+0xae4>)
 800277a:	6053      	str	r3, [r2, #4]
		}
		break;
 800277c:	e083      	b.n	8002886 <app+0xace>
	}
	case ConfirmErase:
	{
		if(app_flags.show_erase_user_menu){
 800277e:	4b45      	ldr	r3, [pc, #276]	@ (8002894 <app+0xadc>)
 8002780:	7b1b      	ldrb	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00f      	beq.n	80027a6 <app+0x9ee>
			APP_SETFLAG(SHOW_ERASE_USER_MENU, False);
 8002786:	2100      	movs	r1, #0
 8002788:	200c      	movs	r0, #12
 800278a:	f000 fa39 	bl	8002c00 <APP_SETFLAG>
			BSP_LCD_SendMessage("Confirmar", 0, 0, True);
 800278e:	2301      	movs	r3, #1
 8002790:	2200      	movs	r2, #0
 8002792:	2100      	movs	r1, #0
 8002794:	4844      	ldr	r0, [pc, #272]	@ (80028a8 <app+0xaf0>)
 8002796:	f7fe f8cf 	bl	8000938 <BSP_LCD_SendMessage>
			BSP_LCD_SendMessage("Denegar: Hold", 0, 1, False);
 800279a:	2300      	movs	r3, #0
 800279c:	2201      	movs	r2, #1
 800279e:	2100      	movs	r1, #0
 80027a0:	4842      	ldr	r0, [pc, #264]	@ (80028ac <app+0xaf4>)
 80027a2:	f7fe f8c9 	bl	8000938 <BSP_LCD_SendMessage>
		}

		if (app_flags.confirm_action) {
 80027a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002894 <app+0xadc>)
 80027a8:	7b9b      	ldrb	r3, [r3, #14]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d06d      	beq.n	800288a <app+0xad2>
		    // Find the index of the user to delete
		    int index_to_delete = -1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	61fb      	str	r3, [r7, #28]
		    for (int i = 0; i < user_size; i++) {
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	e010      	b.n	80027dc <app+0xa24>
		        if (&app_users[i] == app_data.selected_user) {
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4a37      	ldr	r2, [pc, #220]	@ (80028a4 <app+0xaec>)
 80027c6:	441a      	add	r2, r3
 80027c8:	4b34      	ldr	r3, [pc, #208]	@ (800289c <app+0xae4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d102      	bne.n	80027d6 <app+0xa1e>
		            index_to_delete = i;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	61fb      	str	r3, [r7, #28]
		            break;
 80027d4:	e008      	b.n	80027e8 <app+0xa30>
		    for (int i = 0; i < user_size; i++) {
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	3301      	adds	r3, #1
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	4b30      	ldr	r3, [pc, #192]	@ (80028a0 <app+0xae8>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4293      	cmp	r3, r2
 80027e6:	dbe8      	blt.n	80027ba <app+0xa02>
		        }
		    }

		    // Proceed only if user is found in the array
		    if (index_to_delete != -1) {
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ee:	d02a      	beq.n	8002846 <app+0xa8e>
		        // Shift elements to the left, overwriting the user to delete
		        for (int i = index_to_delete; i < user_size - 1; i++) {
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e01b      	b.n	800282e <app+0xa76>
		            app_users[i] = app_users[i + 1];
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	482a      	ldr	r0, [pc, #168]	@ (80028a4 <app+0xaec>)
 80027fc:	6979      	ldr	r1, [r7, #20]
 80027fe:	460b      	mov	r3, r1
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4418      	add	r0, r3
 8002808:	4926      	ldr	r1, [pc, #152]	@ (80028a4 <app+0xaec>)
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	4604      	mov	r4, r0
 8002816:	461d      	mov	r5, r3
 8002818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800281a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800281c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800281e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002820:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002824:	e884 0003 	stmia.w	r4, {r0, r1}
		        for (int i = index_to_delete; i < user_size - 1; i++) {
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <app+0xae8>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3b01      	subs	r3, #1
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	429a      	cmp	r2, r3
 8002838:	dbdd      	blt.n	80027f6 <app+0xa3e>
		        }

		        // Decrement the size of the array
		        user_size--;
 800283a:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <app+0xae8>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	3b01      	subs	r3, #1
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <app+0xae8>)
 8002844:	701a      	strb	r2, [r3, #0]
		    }

		    // Reset flags and return to Idle state
		    state = Idle;
 8002846:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <app+0xaf8>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
		    APP_SETFLAG(BUTTON_HELD, False);
 800284c:	2100      	movs	r1, #0
 800284e:	2006      	movs	r0, #6
 8002850:	f000 f9d6 	bl	8002c00 <APP_SETFLAG>
		    APP_SETFLAG(SHOW_IDLE, True);
 8002854:	2101      	movs	r1, #1
 8002856:	200b      	movs	r0, #11
 8002858:	f000 f9d2 	bl	8002c00 <APP_SETFLAG>
		    BSP_ENCODER_ResetEncoder();
 800285c:	f7fe f80c 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}

		break;
 8002860:	e013      	b.n	800288a <app+0xad2>
	}
	default:
		return;
 8002862:	bf00      	nop
 8002864:	e012      	b.n	800288c <app+0xad4>
					return;
 8002866:	bf00      	nop
 8002868:	e010      	b.n	800288c <app+0xad4>
		break;
 800286a:	bf00      	nop
 800286c:	e00e      	b.n	800288c <app+0xad4>
		break;
 800286e:	bf00      	nop
 8002870:	e00c      	b.n	800288c <app+0xad4>
		break;
 8002872:	bf00      	nop
 8002874:	e00a      	b.n	800288c <app+0xad4>
		break;
 8002876:	bf00      	nop
 8002878:	e008      	b.n	800288c <app+0xad4>
		if(user_size == MAX_USER_AMOUNT) return;
 800287a:	bf00      	nop
 800287c:	e006      	b.n	800288c <app+0xad4>
		break;
 800287e:	bf00      	nop
 8002880:	e004      	b.n	800288c <app+0xad4>
		break;
 8002882:	bf00      	nop
 8002884:	e002      	b.n	800288c <app+0xad4>
		break;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <app+0xad4>
		break;
 800288a:	bf00      	nop
	}
}
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002892:	bf00      	nop
 8002894:	2000000c 	.word	0x2000000c
 8002898:	200000d2 	.word	0x200000d2
 800289c:	20000358 	.word	0x20000358
 80028a0:	20000094 	.word	0x20000094
 80028a4:	2000001c 	.word	0x2000001c
 80028a8:	08006c64 	.word	0x08006c64
 80028ac:	08006c70 	.word	0x08006c70
 80028b0:	20000374 	.word	0x20000374

080028b4 <APP_HANDLE_INPUT>:

void APP_HANDLE_INPUT(){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	app_data.encoder_position = BSP_ENCODER_GetCount();
 80028b8:	f7fd ffba 	bl	8000830 <BSP_ENCODER_GetCount>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	4b9c      	ldr	r3, [pc, #624]	@ (8002b34 <APP_HANDLE_INPUT+0x280>)
 80028c2:	835a      	strh	r2, [r3, #26]

	switch(state){
 80028c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b07      	cmp	r3, #7
 80028ca:	f200 811f 	bhi.w	8002b0c <APP_HANDLE_INPUT+0x258>
 80028ce:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <APP_HANDLE_INPUT+0x20>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	080028f5 	.word	0x080028f5
 80028d8:	08002927 	.word	0x08002927
 80028dc:	0800298d 	.word	0x0800298d
 80028e0:	080029d9 	.word	0x080029d9
 80028e4:	08002a17 	.word	0x08002a17
 80028e8:	08002a53 	.word	0x08002a53
 80028ec:	08002a8f 	.word	0x08002a8f
 80028f0:	08002ad1 	.word	0x08002ad1
	case Idle:
	{
		if(app_flags.button_held){
 80028f4:	4b91      	ldr	r3, [pc, #580]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 80028f6:	799b      	ldrb	r3, [r3, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 8109 	beq.w	8002b10 <APP_HANDLE_INPUT+0x25c>
			state = Config1;
 80028fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_HELD, False);
 8002904:	2100      	movs	r1, #0
 8002906:	2006      	movs	r0, #6
 8002908:	f000 f97a 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_CONFIG_MENU, True);
 800290c:	2101      	movs	r1, #1
 800290e:	2008      	movs	r0, #8
 8002910:	f000 f976 	bl	8002c00 <APP_SETFLAG>
			BSP_LCD_UPDATE_STATUS(configSymbol_idx, True);
 8002914:	4b8a      	ldr	r3, [pc, #552]	@ (8002b40 <APP_HANDLE_INPUT+0x28c>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f888 	bl	8000a30 <BSP_LCD_UPDATE_STATUS>
			BSP_ENCODER_ResetEncoder();
 8002920:	f7fd ffaa 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}
		break;
 8002924:	e0f4      	b.n	8002b10 <APP_HANDLE_INPUT+0x25c>
	}
	case Config1:
	{

		if(app_flags.button_held){
 8002926:	4b85      	ldr	r3, [pc, #532]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002928:	799b      	ldrb	r3, [r3, #6]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <APP_HANDLE_INPUT+0xa0>
			state = Idle;
 800292e:	4b82      	ldr	r3, [pc, #520]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_HELD, False);
 8002934:	2100      	movs	r1, #0
 8002936:	2006      	movs	r0, #6
 8002938:	f000 f962 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_IDLE, True);
 800293c:	2101      	movs	r1, #1
 800293e:	200b      	movs	r0, #11
 8002940:	f000 f95e 	bl	8002c00 <APP_SETFLAG>
			BSP_LCD_UPDATE_STATUS(configSymbol_idx, False);
 8002944:	4b7e      	ldr	r3, [pc, #504]	@ (8002b40 <APP_HANDLE_INPUT+0x28c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe f870 	bl	8000a30 <BSP_LCD_UPDATE_STATUS>
			BSP_ENCODER_ResetEncoder();
 8002950:	f7fd ff92 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}

		if(app_flags.button_only_pressed){
 8002954:	4b79      	ldr	r3, [pc, #484]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002956:	79db      	ldrb	r3, [r3, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80db 	beq.w	8002b14 <APP_HANDLE_INPUT+0x260>
			config1_callbacks[app_data.encoder_position % CONFIG_MENU_ITEMS]();
 800295e:	4b75      	ldr	r3, [pc, #468]	@ (8002b34 <APP_HANDLE_INPUT+0x280>)
 8002960:	8b5a      	ldrh	r2, [r3, #26]
 8002962:	4b78      	ldr	r3, [pc, #480]	@ (8002b44 <APP_HANDLE_INPUT+0x290>)
 8002964:	fba3 1302 	umull	r1, r3, r3, r2
 8002968:	0859      	lsrs	r1, r3, #1
 800296a:	460b      	mov	r3, r1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	440b      	add	r3, r1
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	4b74      	ldr	r3, [pc, #464]	@ (8002b48 <APP_HANDLE_INPUT+0x294>)
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	4798      	blx	r3
			APP_SETFLAG(BUTTON_ONLY_PRESSED, False);
 800297e:	2100      	movs	r1, #0
 8002980:	2007      	movs	r0, #7
 8002982:	f000 f93d 	bl	8002c00 <APP_SETFLAG>
			BSP_ENCODER_ResetEncoder();
 8002986:	f7fd ff77 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}
		break;
 800298a:	e0c3      	b.n	8002b14 <APP_HANDLE_INPUT+0x260>
	}
	case Config2:
	{

		if(app_flags.button_held){
 800298c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 800298e:	799b      	ldrb	r3, [r3, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d012      	beq.n	80029ba <APP_HANDLE_INPUT+0x106>
			state = Idle;
 8002994:	4b68      	ldr	r3, [pc, #416]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_HELD, False);
 800299a:	2100      	movs	r1, #0
 800299c:	2006      	movs	r0, #6
 800299e:	f000 f92f 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_IDLE, True);
 80029a2:	2101      	movs	r1, #1
 80029a4:	200b      	movs	r0, #11
 80029a6:	f000 f92b 	bl	8002c00 <APP_SETFLAG>
			BSP_LCD_UPDATE_STATUS(configSymbol_idx, False);
 80029aa:	4b65      	ldr	r3, [pc, #404]	@ (8002b40 <APP_HANDLE_INPUT+0x28c>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe f83d 	bl	8000a30 <BSP_LCD_UPDATE_STATUS>
			BSP_ENCODER_ResetEncoder();
 80029b6:	f7fd ff5f 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}

		if(app_flags.button_only_pressed){
 80029ba:	4b60      	ldr	r3, [pc, #384]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 80029bc:	79db      	ldrb	r3, [r3, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80aa 	beq.w	8002b18 <APP_HANDLE_INPUT+0x264>
			state = Config3;
 80029c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 80029c6:	2203      	movs	r2, #3
 80029c8:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_ONLY_PRESSED, False);
 80029ca:	2100      	movs	r1, #0
 80029cc:	2007      	movs	r0, #7
 80029ce:	f000 f917 	bl	8002c00 <APP_SETFLAG>
			BSP_ENCODER_ResetEncoder();
 80029d2:	f7fd ff51 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}

		break;
 80029d6:	e09f      	b.n	8002b18 <APP_HANDLE_INPUT+0x264>
	}
	case Config3:
	{
		if(app_flags.button_held){
 80029d8:	4b58      	ldr	r3, [pc, #352]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 80029da:	799b      	ldrb	r3, [r3, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00c      	beq.n	80029fa <APP_HANDLE_INPUT+0x146>
			state = Config2;
 80029e0:	4b55      	ldr	r3, [pc, #340]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 80029e2:	2202      	movs	r2, #2
 80029e4:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_HELD, False);
 80029e6:	2100      	movs	r1, #0
 80029e8:	2006      	movs	r0, #6
 80029ea:	f000 f909 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_CONFIG2_MENU, True);
 80029ee:	2101      	movs	r1, #1
 80029f0:	2009      	movs	r0, #9
 80029f2:	f000 f905 	bl	8002c00 <APP_SETFLAG>
			BSP_ENCODER_ResetEncoder();
 80029f6:	f7fd ff3f 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}

		if(app_flags.button_only_pressed){
 80029fa:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 80029fc:	79db      	ldrb	r3, [r3, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 808c 	beq.w	8002b1c <APP_HANDLE_INPUT+0x268>
			APP_SETFLAG(BUTTON_ONLY_PRESSED, False);
 8002a04:	2100      	movs	r1, #0
 8002a06:	2007      	movs	r0, #7
 8002a08:	f000 f8fa 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(CONFIRM_CONFIG3, True);
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	200a      	movs	r0, #10
 8002a10:	f000 f8f6 	bl	8002c00 <APP_SETFLAG>
		}

		break;
 8002a14:	e082      	b.n	8002b1c <APP_HANDLE_INPUT+0x268>
	}
	case AddUser:
	{
		if(app_flags.button_held){
 8002a16:	4b49      	ldr	r3, [pc, #292]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002a18:	799b      	ldrb	r3, [r3, #6]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <APP_HANDLE_INPUT+0x184>
			state = Idle;
 8002a1e:	4b46      	ldr	r3, [pc, #280]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_HELD, False);
 8002a24:	2100      	movs	r1, #0
 8002a26:	2006      	movs	r0, #6
 8002a28:	f000 f8ea 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_IDLE, True);
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	200b      	movs	r0, #11
 8002a30:	f000 f8e6 	bl	8002c00 <APP_SETFLAG>
			BSP_ENCODER_ResetEncoder();
 8002a34:	f7fd ff20 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}

		if(app_flags.button_only_pressed){
 8002a38:	4b40      	ldr	r3, [pc, #256]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002a3a:	79db      	ldrb	r3, [r3, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d06f      	beq.n	8002b20 <APP_HANDLE_INPUT+0x26c>
			APP_SETFLAG(BUTTON_ONLY_PRESSED, False);
 8002a40:	2100      	movs	r1, #0
 8002a42:	2007      	movs	r0, #7
 8002a44:	f000 f8dc 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(CONFIRM_ACTION, True);
 8002a48:	2101      	movs	r1, #1
 8002a4a:	200e      	movs	r0, #14
 8002a4c:	f000 f8d8 	bl	8002c00 <APP_SETFLAG>
		}
		break;
 8002a50:	e066      	b.n	8002b20 <APP_HANDLE_INPUT+0x26c>
	}

	case ConfirmAdd:
	{
		if(app_flags.button_held){
 8002a52:	4b3a      	ldr	r3, [pc, #232]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002a54:	799b      	ldrb	r3, [r3, #6]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00c      	beq.n	8002a74 <APP_HANDLE_INPUT+0x1c0>
			state = Idle;
 8002a5a:	4b37      	ldr	r3, [pc, #220]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_HELD, False);
 8002a60:	2100      	movs	r1, #0
 8002a62:	2006      	movs	r0, #6
 8002a64:	f000 f8cc 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_IDLE, True);
 8002a68:	2101      	movs	r1, #1
 8002a6a:	200b      	movs	r0, #11
 8002a6c:	f000 f8c8 	bl	8002c00 <APP_SETFLAG>
			BSP_ENCODER_ResetEncoder();
 8002a70:	f7fd ff02 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}

		if(app_flags.button_only_pressed){
 8002a74:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002a76:	79db      	ldrb	r3, [r3, #7]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d053      	beq.n	8002b24 <APP_HANDLE_INPUT+0x270>
			APP_SETFLAG(BUTTON_ONLY_PRESSED, False);
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2007      	movs	r0, #7
 8002a80:	f000 f8be 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(CONFIRM_ACTION, True);
 8002a84:	2101      	movs	r1, #1
 8002a86:	200e      	movs	r0, #14
 8002a88:	f000 f8ba 	bl	8002c00 <APP_SETFLAG>
		}
		break;
 8002a8c:	e04a      	b.n	8002b24 <APP_HANDLE_INPUT+0x270>
	}
	case EraseUser:
	{
		if(app_flags.button_held){
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002a90:	799b      	ldrb	r3, [r3, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <APP_HANDLE_INPUT+0x1fc>
			state = Idle;
 8002a96:	4b28      	ldr	r3, [pc, #160]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_HELD, False);
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2006      	movs	r0, #6
 8002aa0:	f000 f8ae 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_IDLE, True);
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	200b      	movs	r0, #11
 8002aa8:	f000 f8aa 	bl	8002c00 <APP_SETFLAG>
			BSP_ENCODER_ResetEncoder();
 8002aac:	f7fd fee4 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}

		if(app_flags.button_only_pressed){
 8002ab0:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002ab2:	79db      	ldrb	r3, [r3, #7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d037      	beq.n	8002b28 <APP_HANDLE_INPUT+0x274>
			APP_SETFLAG(BUTTON_ONLY_PRESSED, False);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2007      	movs	r0, #7
 8002abc:	f000 f8a0 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_ERASE_USER_MENU, True);
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	200c      	movs	r0, #12
 8002ac4:	f000 f89c 	bl	8002c00 <APP_SETFLAG>
			state = ConfirmErase;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 8002aca:	2207      	movs	r2, #7
 8002acc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002ace:	e02b      	b.n	8002b28 <APP_HANDLE_INPUT+0x274>
	}
	case ConfirmErase:
	{
		if(app_flags.button_held){
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002ad2:	799b      	ldrb	r3, [r3, #6]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00c      	beq.n	8002af2 <APP_HANDLE_INPUT+0x23e>
			state = Idle;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <APP_HANDLE_INPUT+0x284>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
			APP_SETFLAG(BUTTON_HELD, False);
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2006      	movs	r0, #6
 8002ae2:	f000 f88d 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(SHOW_IDLE, True);
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	200b      	movs	r0, #11
 8002aea:	f000 f889 	bl	8002c00 <APP_SETFLAG>
			BSP_ENCODER_ResetEncoder();
 8002aee:	f7fd fec3 	bl	8000878 <BSP_ENCODER_ResetEncoder>
		}

		if(app_flags.button_only_pressed){
 8002af2:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <APP_HANDLE_INPUT+0x288>)
 8002af4:	79db      	ldrb	r3, [r3, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d018      	beq.n	8002b2c <APP_HANDLE_INPUT+0x278>
			APP_SETFLAG(BUTTON_ONLY_PRESSED, False);
 8002afa:	2100      	movs	r1, #0
 8002afc:	2007      	movs	r0, #7
 8002afe:	f000 f87f 	bl	8002c00 <APP_SETFLAG>
			APP_SETFLAG(CONFIRM_ACTION, True);
 8002b02:	2101      	movs	r1, #1
 8002b04:	200e      	movs	r0, #14
 8002b06:	f000 f87b 	bl	8002c00 <APP_SETFLAG>
		}
		break;
 8002b0a:	e00f      	b.n	8002b2c <APP_HANDLE_INPUT+0x278>
	}
	default:
		break;
 8002b0c:	bf00      	nop
 8002b0e:	e00e      	b.n	8002b2e <APP_HANDLE_INPUT+0x27a>
		break;
 8002b10:	bf00      	nop
 8002b12:	e00c      	b.n	8002b2e <APP_HANDLE_INPUT+0x27a>
		break;
 8002b14:	bf00      	nop
 8002b16:	e00a      	b.n	8002b2e <APP_HANDLE_INPUT+0x27a>
		break;
 8002b18:	bf00      	nop
 8002b1a:	e008      	b.n	8002b2e <APP_HANDLE_INPUT+0x27a>
		break;
 8002b1c:	bf00      	nop
 8002b1e:	e006      	b.n	8002b2e <APP_HANDLE_INPUT+0x27a>
		break;
 8002b20:	bf00      	nop
 8002b22:	e004      	b.n	8002b2e <APP_HANDLE_INPUT+0x27a>
		break;
 8002b24:	bf00      	nop
 8002b26:	e002      	b.n	8002b2e <APP_HANDLE_INPUT+0x27a>
		break;
 8002b28:	bf00      	nop
 8002b2a:	e000      	b.n	8002b2e <APP_HANDLE_INPUT+0x27a>
		break;
 8002b2c:	bf00      	nop
	}
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000358 	.word	0x20000358
 8002b38:	20000374 	.word	0x20000374
 8002b3c:	2000000c 	.word	0x2000000c
 8002b40:	20000377 	.word	0x20000377
 8002b44:	aaaaaaab 	.word	0xaaaaaaab
 8002b48:	200000bc 	.word	0x200000bc

08002b4c <APP_MESSAGE_RECEIVED>:

void APP_MESSAGE_RECEIVED(){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	BSP_RF_ReadData(app_data.rx_data);
 8002b50:	4804      	ldr	r0, [pc, #16]	@ (8002b64 <APP_MESSAGE_RECEIVED+0x18>)
 8002b52:	f002 ff35 	bl	80059c0 <BSP_RF_ReadData>
	APP_SETFLAG(MESSAGE_RECEIVED, False);
 8002b56:	2100      	movs	r1, #0
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f000 f851 	bl	8002c00 <APP_SETFLAG>
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000360 	.word	0x20000360

08002b68 <APP_SEND_MESSAGE>:

void APP_SEND_MESSAGE(){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	BSP_RF_Sending();
 8002b6c:	f002 fe92 	bl	8005894 <BSP_RF_Sending>
	BSP_RF_SendMessage(app_data.tx_data);
 8002b70:	4804      	ldr	r0, [pc, #16]	@ (8002b84 <APP_SEND_MESSAGE+0x1c>)
 8002b72:	f002 fea7 	bl	80058c4 <BSP_RF_SendMessage>
	APP_SETFLAG(MESSAGE_TO_SEND, False);
 8002b76:	2100      	movs	r1, #0
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f000 f841 	bl	8002c00 <APP_SETFLAG>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000368 	.word	0x20000368

08002b88 <APP_SET_MESSAGE_TO_SEND>:

void APP_SET_MESSAGE_TO_SEND(uint8_t message[NRF24L01P_PAYLOAD_LENGTH]){
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	memcpy(app_data.tx_data, message, NRF24L01P_PAYLOAD_LENGTH);
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <APP_SET_MESSAGE_TO_SEND+0x20>)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	3310      	adds	r3, #16
 8002b96:	6810      	ldr	r0, [r2, #0]
 8002b98:	6851      	ldr	r1, [r2, #4]
 8002b9a:	c303      	stmia	r3!, {r0, r1}
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000358 	.word	0x20000358

08002bac <APP_SEND_COMMAND_TO_WORK_STATION>:

void APP_SEND_COMMAND_TO_WORK_STATION(uint8_t ws, uint8_t command[NRF24L01P_PAYLOAD_LENGTH-1]){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
	uint8_t message[NRF24L01P_PAYLOAD_LENGTH];
	message[0] = ws;
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	733b      	strb	r3, [r7, #12]
	for(int i = 1; i < NRF24L01P_PAYLOAD_LENGTH; i++){
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e00d      	b.n	8002bde <APP_SEND_COMMAND_TO_WORK_STATION+0x32>
		message[i] = command[i-1];
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	7819      	ldrb	r1, [r3, #0]
 8002bcc:	f107 020c 	add.w	r2, r7, #12
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	460a      	mov	r2, r1
 8002bd6:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < NRF24L01P_PAYLOAD_LENGTH; i++){
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b07      	cmp	r3, #7
 8002be2:	ddee      	ble.n	8002bc2 <APP_SEND_COMMAND_TO_WORK_STATION+0x16>
	}
	APP_SET_MESSAGE_TO_SEND(message);
 8002be4:	f107 030c 	add.w	r3, r7, #12
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ffcd 	bl	8002b88 <APP_SET_MESSAGE_TO_SEND>
	APP_SETFLAG(MESSAGE_TO_SEND, True);
 8002bee:	2101      	movs	r1, #1
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f000 f805 	bl	8002c00 <APP_SETFLAG>
}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <APP_SETFLAG>:

void APP_SETFLAG(APP_FLAGS_Enum flag, boolean value){
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	460a      	mov	r2, r1
 8002c0a:	71fb      	strb	r3, [r7, #7]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	71bb      	strb	r3, [r7, #6]
    boolean* targetFlag = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]

    switch(flag){
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b0e      	cmp	r3, #14
 8002c18:	d854      	bhi.n	8002cc4 <APP_SETFLAG+0xc4>
 8002c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c20 <APP_SETFLAG+0x20>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c5d 	.word	0x08002c5d
 8002c24:	08002c63 	.word	0x08002c63
 8002c28:	08002c69 	.word	0x08002c69
 8002c2c:	08002c6f 	.word	0x08002c6f
 8002c30:	08002c75 	.word	0x08002c75
 8002c34:	08002c7b 	.word	0x08002c7b
 8002c38:	08002c87 	.word	0x08002c87
 8002c3c:	08002c8d 	.word	0x08002c8d
 8002c40:	08002c81 	.word	0x08002c81
 8002c44:	08002c99 	.word	0x08002c99
 8002c48:	08002cb1 	.word	0x08002cb1
 8002c4c:	08002c93 	.word	0x08002c93
 8002c50:	08002ca5 	.word	0x08002ca5
 8002c54:	08002c9f 	.word	0x08002c9f
 8002c58:	08002cab 	.word	0x08002cab
        case MESSAGE_RECEIVED:   targetFlag = &app_flags.message_received; break;
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd0 <APP_SETFLAG+0xd0>)
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e029      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case MESSAGE_TO_SEND:    targetFlag = &app_flags.message_to_send; break;
 8002c62:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd4 <APP_SETFLAG+0xd4>)
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e026      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case WAITING_FOR_USER:   targetFlag = &app_flags.waiting_for_user; break;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <APP_SETFLAG+0xd8>)
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e023      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case IS_CARD_COOLDOWN:   targetFlag = &app_flags.is_card_cooldown; break;
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <APP_SETFLAG+0xdc>)
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e020      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case UPDATE_MOTION:      targetFlag = &app_flags.update_motion; break;
 8002c74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce0 <APP_SETFLAG+0xe0>)
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e01d      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case BUTTON_PRESSED:     targetFlag = &app_flags.button_pressed; break;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce4 <APP_SETFLAG+0xe4>)
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e01a      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case SHOW_CONFIG_MENU: 	 targetFlag = &app_flags.show_config_menu; break;
 8002c80:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <APP_SETFLAG+0xe8>)
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e017      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case BUTTON_HELD:		 targetFlag = &app_flags.button_held; break;
 8002c86:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <APP_SETFLAG+0xec>)
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e014      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case BUTTON_ONLY_PRESSED:targetFlag = &app_flags.button_only_pressed; break;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <APP_SETFLAG+0xf0>)
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e011      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case SHOW_IDLE:		 	 targetFlag = &app_flags.show_idle; break;
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <APP_SETFLAG+0xf4>)
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e00e      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case SHOW_CONFIG2_MENU:	 targetFlag = &app_flags.show_config2_menu; break;
 8002c98:	4b17      	ldr	r3, [pc, #92]	@ (8002cf8 <APP_SETFLAG+0xf8>)
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e00b      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case SHOW_ADD_USER_MENU: targetFlag = &app_flags.show_add_user_menu; break;
 8002c9e:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <APP_SETFLAG+0xfc>)
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e008      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case SHOW_ERASE_USER_MENU: targetFlag = &app_flags.show_erase_user_menu; break;
 8002ca4:	4b16      	ldr	r3, [pc, #88]	@ (8002d00 <APP_SETFLAG+0x100>)
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e005      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case CONFIRM_ACTION:	 targetFlag = &app_flags.confirm_action; break;
 8002caa:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <APP_SETFLAG+0x104>)
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e002      	b.n	8002cb6 <APP_SETFLAG+0xb6>
        case CONFIRM_CONFIG3:	 targetFlag = &app_flags.confirm_config3; break;
 8002cb0:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <APP_SETFLAG+0x108>)
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	bf00      	nop

        default: return; // Return early if flag is invalid
    }

    if (targetFlag) {
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <APP_SETFLAG+0xc6>
        *targetFlag = value;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	79ba      	ldrb	r2, [r7, #6]
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e000      	b.n	8002cc6 <APP_SETFLAG+0xc6>
        default: return; // Return early if flag is invalid
 8002cc4:	bf00      	nop
    }
}
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	2000000c 	.word	0x2000000c
 8002cd4:	2000000d 	.word	0x2000000d
 8002cd8:	2000000f 	.word	0x2000000f
 8002cdc:	2000000e 	.word	0x2000000e
 8002ce0:	20000010 	.word	0x20000010
 8002ce4:	20000011 	.word	0x20000011
 8002ce8:	20000014 	.word	0x20000014
 8002cec:	20000012 	.word	0x20000012
 8002cf0:	20000013 	.word	0x20000013
 8002cf4:	20000016 	.word	0x20000016
 8002cf8:	20000015 	.word	0x20000015
 8002cfc:	20000019 	.word	0x20000019
 8002d00:	20000018 	.word	0x20000018
 8002d04:	2000001a 	.word	0x2000001a
 8002d08:	20000017 	.word	0x20000017

08002d0c <APP_GET_USER_BY_SERIAL_NUMBER>:


boolean APP_GET_USER_BY_SERIAL_NUMBER(uint8_t sNum, APP_USER_Struct **user){
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < MAX_USER_AMOUNT; i++){
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e018      	b.n	8002d50 <APP_GET_USER_BY_SERIAL_NUMBER+0x44>
		if(app_users[i].serial_number == sNum){
 8002d1e:	4911      	ldr	r1, [pc, #68]	@ (8002d64 <APP_GET_USER_BY_SERIAL_NUMBER+0x58>)
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	79fa      	ldrb	r2, [r7, #7]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d10a      	bne.n	8002d4a <APP_GET_USER_BY_SERIAL_NUMBER+0x3e>
			*user = &app_users[i];
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4a09      	ldr	r2, [pc, #36]	@ (8002d64 <APP_GET_USER_BY_SERIAL_NUMBER+0x58>)
 8002d40:	441a      	add	r2, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	601a      	str	r2, [r3, #0]
			return True;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e006      	b.n	8002d58 <APP_GET_USER_BY_SERIAL_NUMBER+0x4c>
	for(int i = 0; i < MAX_USER_AMOUNT; i++){
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	dde3      	ble.n	8002d1e <APP_GET_USER_BY_SERIAL_NUMBER+0x12>
		}
	}
	return False;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	2000001c 	.word	0x2000001c

08002d68 <APP_GET_USER_BY_WORKSTATION>:

boolean APP_GET_USER_BY_WORKSTATION(uint8_t ws, APP_USER_Struct **user){
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < MAX_USER_AMOUNT; i++){
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e019      	b.n	8002dae <APP_GET_USER_BY_WORKSTATION+0x46>
		if(app_users[i].work_station == ws){
 8002d7a:	4911      	ldr	r1, [pc, #68]	@ (8002dc0 <APP_GET_USER_BY_WORKSTATION+0x58>)
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	331f      	adds	r3, #31
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d10a      	bne.n	8002da8 <APP_GET_USER_BY_WORKSTATION+0x40>
			*user = &app_users[i];
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4a08      	ldr	r2, [pc, #32]	@ (8002dc0 <APP_GET_USER_BY_WORKSTATION+0x58>)
 8002d9e:	441a      	add	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	601a      	str	r2, [r3, #0]
			return True;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e006      	b.n	8002db6 <APP_GET_USER_BY_WORKSTATION+0x4e>
	for(int i = 0; i < MAX_USER_AMOUNT; i++){
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	dde2      	ble.n	8002d7a <APP_GET_USER_BY_WORKSTATION+0x12>
		}
	}
	return False;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	2000001c 	.word	0x2000001c

08002dc4 <APP_UPDATE_WORKSTATION>:

void APP_UPDATE_WORKSTATION(boolean Display){
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
	uint8_t ws = app_data.rx_data[0];
 8002dce:	4b2f      	ldr	r3, [pc, #188]	@ (8002e8c <APP_UPDATE_WORKSTATION+0xc8>)
 8002dd0:	7a1b      	ldrb	r3, [r3, #8]
 8002dd2:	73fb      	strb	r3, [r7, #15]
	if(!APP_GET_USER_BY_WORKSTATION(ws, &app_data.user)){
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	492d      	ldr	r1, [pc, #180]	@ (8002e8c <APP_UPDATE_WORKSTATION+0xc8>)
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ffc5 	bl	8002d68 <APP_GET_USER_BY_WORKSTATION>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d04e      	beq.n	8002e82 <APP_UPDATE_WORKSTATION+0xbe>
		return;
	}
	static uint16_t current_time_inactive = 0;
	current_time_inactive = app_data.rx_data[1] << 8 | app_data.rx_data[2];
 8002de4:	4b29      	ldr	r3, [pc, #164]	@ (8002e8c <APP_UPDATE_WORKSTATION+0xc8>)
 8002de6:	7a5b      	ldrb	r3, [r3, #9]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	4b27      	ldr	r3, [pc, #156]	@ (8002e8c <APP_UPDATE_WORKSTATION+0xc8>)
 8002dee:	7a9b      	ldrb	r3, [r3, #10]
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b21b      	sxth	r3, r3
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b25      	ldr	r3, [pc, #148]	@ (8002e90 <APP_UPDATE_WORKSTATION+0xcc>)
 8002dfa:	801a      	strh	r2, [r3, #0]
	app_data.user->total_time_inactive += current_time_inactive;
 8002dfc:	4b23      	ldr	r3, [pc, #140]	@ (8002e8c <APP_UPDATE_WORKSTATION+0xc8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8002e02:	4b23      	ldr	r3, [pc, #140]	@ (8002e90 <APP_UPDATE_WORKSTATION+0xcc>)
 8002e04:	881a      	ldrh	r2, [r3, #0]
 8002e06:	4b21      	ldr	r3, [pc, #132]	@ (8002e8c <APP_UPDATE_WORKSTATION+0xc8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	845a      	strh	r2, [r3, #34]	@ 0x22

	if(Display){
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d019      	beq.n	8002e4a <APP_UPDATE_WORKSTATION+0x86>
		static char puesto[16];  // Adjust size based on your expected message length
		static char inactividad[16];
		sprintf(puesto, "Puesto %d", ws);
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	491e      	ldr	r1, [pc, #120]	@ (8002e94 <APP_UPDATE_WORKSTATION+0xd0>)
 8002e1c:	481e      	ldr	r0, [pc, #120]	@ (8002e98 <APP_UPDATE_WORKSTATION+0xd4>)
 8002e1e:	f003 f9a1 	bl	8006164 <siprintf>
		sprintf(inactividad, "Inactividad:%d m", (uint8_t)current_time_inactive);
 8002e22:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <APP_UPDATE_WORKSTATION+0xcc>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	491c      	ldr	r1, [pc, #112]	@ (8002e9c <APP_UPDATE_WORKSTATION+0xd8>)
 8002e2c:	481c      	ldr	r0, [pc, #112]	@ (8002ea0 <APP_UPDATE_WORKSTATION+0xdc>)
 8002e2e:	f003 f999 	bl	8006164 <siprintf>
		BSP_LCD_SendMessage(puesto, 0, 0, True);
 8002e32:	2301      	movs	r3, #1
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	4817      	ldr	r0, [pc, #92]	@ (8002e98 <APP_UPDATE_WORKSTATION+0xd4>)
 8002e3a:	f7fd fd7d 	bl	8000938 <BSP_LCD_SendMessage>
		BSP_LCD_SendMessage(inactividad, 0, 1, False);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2201      	movs	r2, #1
 8002e42:	2100      	movs	r1, #0
 8002e44:	4816      	ldr	r0, [pc, #88]	@ (8002ea0 <APP_UPDATE_WORKSTATION+0xdc>)
 8002e46:	f7fd fd77 	bl	8000938 <BSP_LCD_SendMessage>
	}

	if((current_time_inactive) >= INACTIVITY_MAX_MINUTES){
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <APP_UPDATE_WORKSTATION+0xcc>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8002e52:	d317      	bcc.n	8002e84 <APP_UPDATE_WORKSTATION+0xc0>
		APP_SEND_COMMAND_TO_WORK_STATION(app_data.user->work_station, TURN_OFF_WS_COMMAND);
 8002e54:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <APP_UPDATE_WORKSTATION+0xc8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	7fd8      	ldrb	r0, [r3, #31]
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f8c3 2003 	str.w	r2, [r3, #3]
 8002e66:	f107 0308 	add.w	r3, r7, #8
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f7ff fe9e 	bl	8002bac <APP_SEND_COMMAND_TO_WORK_STATION>
		SET_FIELD(app_data.user, present, False);
 8002e70:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <APP_UPDATE_WORKSTATION+0xc8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2020 	strb.w	r2, [r3, #32]
		app_data.rx_data[0] = 0;
 8002e7a:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <APP_UPDATE_WORKSTATION+0xc8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	721a      	strb	r2, [r3, #8]
 8002e80:	e000      	b.n	8002e84 <APP_UPDATE_WORKSTATION+0xc0>
		return;
 8002e82:	bf00      	nop
	}
}
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000358 	.word	0x20000358
 8002e90:	200003ec 	.word	0x200003ec
 8002e94:	08006c80 	.word	0x08006c80
 8002e98:	200003f0 	.word	0x200003f0
 8002e9c:	08006c8c 	.word	0x08006c8c
 8002ea0:	20000400 	.word	0x20000400

08002ea4 <GET_APP_DATA>:


inline APP_DATA_Struct* GET_APP_DATA(){
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
	return &app_data;
 8002ea8:	4b02      	ldr	r3, [pc, #8]	@ (8002eb4 <GET_APP_DATA+0x10>)
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000358 	.word	0x20000358

08002eb8 <GET_APP_FLAGS>:

inline APP_FLAGS_Struct* GET_APP_FLAGS(){
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
	return &app_flags;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	@ (8002ec8 <GET_APP_FLAGS+0x10>)
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	2000000c 	.word	0x2000000c

08002ecc <GET_APP_STATE>:

inline APP_STATES_Enum* GET_APP_STATE(){
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
	return &state;
 8002ed0:	4b02      	ldr	r3, [pc, #8]	@ (8002edc <GET_APP_STATE+0x10>)
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000374 	.word	0x20000374

08002ee0 <CONFIG_MENU_SHOW_CONFIG>:

void CONFIG_MENU_SHOW_CONFIG(){
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
	BSP_LCD_SendMessage("<--Configurar-->", 0, 1, True);
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4802      	ldr	r0, [pc, #8]	@ (8002ef4 <CONFIG_MENU_SHOW_CONFIG+0x14>)
 8002eec:	f7fd fd24 	bl	8000938 <BSP_LCD_SendMessage>
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	08006ca0 	.word	0x08006ca0

08002ef8 <CONFIG_MENU_SHOW_ANADIR>:

void CONFIG_MENU_SHOW_ANADIR(){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
	BSP_LCD_SendMessage("<--  Anadir  -->", 0, 1, True);
 8002efc:	2301      	movs	r3, #1
 8002efe:	2201      	movs	r2, #1
 8002f00:	2100      	movs	r1, #0
 8002f02:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <CONFIG_MENU_SHOW_ANADIR+0x14>)
 8002f04:	f7fd fd18 	bl	8000938 <BSP_LCD_SendMessage>
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	08006cb4 	.word	0x08006cb4

08002f10 <CONFIG_MENU_SHOW_BORRAR>:

void CONFIG_MENU_SHOW_BORRAR(){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	BSP_LCD_SendMessage("<--  Borrar  -->", 0, 1, True);
 8002f14:	2301      	movs	r3, #1
 8002f16:	2201      	movs	r2, #1
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4802      	ldr	r0, [pc, #8]	@ (8002f24 <CONFIG_MENU_SHOW_BORRAR+0x14>)
 8002f1c:	f7fd fd0c 	bl	8000938 <BSP_LCD_SendMessage>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	08006cc8 	.word	0x08006cc8

08002f28 <CONFIG_MENU_SHOW_USER>:


void CONFIG_MENU_SHOW_USER(APP_USER_Struct* user){
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	static char print_message_row1[16], print_message_row2[16];
	sprintf(print_message_row1, "WS: %d P: %s", user->work_station, user->present == True ? "Si" : "No");
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7fdb      	ldrb	r3, [r3, #31]
 8002f34:	461a      	mov	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <CONFIG_MENU_SHOW_USER+0x1c>
 8002f40:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <CONFIG_MENU_SHOW_USER+0x54>)
 8002f42:	e000      	b.n	8002f46 <CONFIG_MENU_SHOW_USER+0x1e>
 8002f44:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <CONFIG_MENU_SHOW_USER+0x58>)
 8002f46:	490f      	ldr	r1, [pc, #60]	@ (8002f84 <CONFIG_MENU_SHOW_USER+0x5c>)
 8002f48:	480f      	ldr	r0, [pc, #60]	@ (8002f88 <CONFIG_MENU_SHOW_USER+0x60>)
 8002f4a:	f003 f90b 	bl	8006164 <siprintf>
	sprintf(print_message_row2, "%s", user->name);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3301      	adds	r3, #1
 8002f52:	461a      	mov	r2, r3
 8002f54:	490d      	ldr	r1, [pc, #52]	@ (8002f8c <CONFIG_MENU_SHOW_USER+0x64>)
 8002f56:	480e      	ldr	r0, [pc, #56]	@ (8002f90 <CONFIG_MENU_SHOW_USER+0x68>)
 8002f58:	f003 f904 	bl	8006164 <siprintf>
	BSP_LCD_SendMessage(print_message_row1, 0, 0, True);
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	4809      	ldr	r0, [pc, #36]	@ (8002f88 <CONFIG_MENU_SHOW_USER+0x60>)
 8002f64:	f7fd fce8 	bl	8000938 <BSP_LCD_SendMessage>
	BSP_LCD_SendMessage(print_message_row2, 0, 1, False);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4808      	ldr	r0, [pc, #32]	@ (8002f90 <CONFIG_MENU_SHOW_USER+0x68>)
 8002f70:	f7fd fce2 	bl	8000938 <BSP_LCD_SendMessage>
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	08006b90 	.word	0x08006b90
 8002f80:	08006b94 	.word	0x08006b94
 8002f84:	08006ba4 	.word	0x08006ba4
 8002f88:	20000410 	.word	0x20000410
 8002f8c:	08006c04 	.word	0x08006c04
 8002f90:	20000420 	.word	0x20000420

08002f94 <BSP_StartCardCooldown>:
static volatile uint32_t cooldown_counter = 0;
static volatile int16_t blinking_time = 0;
static boolean display = False;

// Starts the cooldown timer
void BSP_StartCardCooldown(boolean _display) {
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
    cooldown_counter = CARD_COOLDOWN * 1000; // Convert seconds to milliseconds
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <BSP_StartCardCooldown+0x24>)
 8002fa0:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002fa4:	601a      	str	r2, [r3, #0]
    display = _display;
 8002fa6:	4a05      	ldr	r2, [pc, #20]	@ (8002fbc <BSP_StartCardCooldown+0x28>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	7013      	strb	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000430 	.word	0x20000430
 8002fbc:	20000436 	.word	0x20000436

08002fc0 <BSP_GetDisplay>:

inline boolean BSP_GetDisplay(){
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
	return display;
 8002fc4:	4b02      	ldr	r3, [pc, #8]	@ (8002fd0 <BSP_GetDisplay+0x10>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	20000436 	.word	0x20000436

08002fd4 <BSP_Countdown>:

inline void BSP_Countdown(void){
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
	cooldown_counter--;
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <BSP_Countdown+0x18>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	4a03      	ldr	r2, [pc, #12]	@ (8002fec <BSP_Countdown+0x18>)
 8002fe0:	6013      	str	r3, [r2, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000430 	.word	0x20000430

08002ff0 <BSP_GetCounter>:

inline uint32_t BSP_GetCounter(){
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
	return cooldown_counter;
 8002ff4:	4b02      	ldr	r3, [pc, #8]	@ (8003000 <BSP_GetCounter+0x10>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	20000430 	.word	0x20000430

08003004 <BSP_StartBlinking>:


void BSP_StartBlinking(void){
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
	blinking_time = BLINK_TIME;
 8003008:	4b03      	ldr	r3, [pc, #12]	@ (8003018 <BSP_StartBlinking+0x14>)
 800300a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800300e:	801a      	strh	r2, [r3, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	20000434 	.word	0x20000434

0800301c <BSP_Blink>:

inline void BSP_Blink(void){
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	blinking_time--;
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <BSP_Blink+0x20>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b21b      	sxth	r3, r3
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29b      	uxth	r3, r3
 800302c:	b21a      	sxth	r2, r3
 800302e:	4b03      	ldr	r3, [pc, #12]	@ (800303c <BSP_Blink+0x20>)
 8003030:	801a      	strh	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000434 	.word	0x20000434

08003040 <BSP_GetBlinkingTime>:

inline int16_t BSP_GetBlinkingTime(){
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
	return blinking_time;
 8003044:	4b03      	ldr	r3, [pc, #12]	@ (8003054 <BSP_GetBlinkingTime+0x14>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	b21b      	sxth	r3, r3
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000434 	.word	0x20000434

08003058 <CONFIG_MENU_CONFIGURAR>:
#include "config_menu.h"


void CONFIG_MENU_CONFIGURAR(){
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
	*GET_APP_STATE() = Config2;
 800305c:	f7ff ff36 	bl	8002ecc <GET_APP_STATE>
 8003060:	4603      	mov	r3, r0
 8003062:	2202      	movs	r2, #2
 8003064:	701a      	strb	r2, [r3, #0]
	APP_SETFLAG(SHOW_CONFIG2_MENU, True);
 8003066:	2101      	movs	r1, #1
 8003068:	2009      	movs	r0, #9
 800306a:	f7ff fdc9 	bl	8002c00 <APP_SETFLAG>

}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}

08003072 <CONFIG_MENU_ANADIR>:
void CONFIG_MENU_ANADIR(){
 8003072:	b580      	push	{r7, lr}
 8003074:	af00      	add	r7, sp, #0
	*GET_APP_STATE() = AddUser;
 8003076:	f7ff ff29 	bl	8002ecc <GET_APP_STATE>
 800307a:	4603      	mov	r3, r0
 800307c:	2204      	movs	r2, #4
 800307e:	701a      	strb	r2, [r3, #0]
	APP_SETFLAG(SHOW_ADD_USER_MENU, True);
 8003080:	2101      	movs	r1, #1
 8003082:	200d      	movs	r0, #13
 8003084:	f7ff fdbc 	bl	8002c00 <APP_SETFLAG>
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <CONFIG_MENU_BORRAR>:
void CONFIG_MENU_BORRAR(){
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
	*GET_APP_STATE() = EraseUser;
 8003090:	f7ff ff1c 	bl	8002ecc <GET_APP_STATE>
 8003094:	4603      	mov	r3, r0
 8003096:	2206      	movs	r2, #6
 8003098:	701a      	strb	r2, [r3, #0]
	APP_SETFLAG(SHOW_ERASE_USER_MENU, True);
 800309a:	2101      	movs	r1, #1
 800309c:	200c      	movs	r0, #12
 800309e:	f7ff fdaf 	bl	8002c00 <APP_SETFLAG>
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ac:	4b08      	ldr	r3, [pc, #32]	@ (80030d0 <HAL_Init+0x28>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <HAL_Init+0x28>)
 80030b2:	f043 0310 	orr.w	r3, r3, #16
 80030b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b8:	2003      	movs	r0, #3
 80030ba:	f000 f947 	bl	800334c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030be:	200f      	movs	r0, #15
 80030c0:	f000 f808 	bl	80030d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c4:	f7fe fbca 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40022000 	.word	0x40022000

080030d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030dc:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_InitTick+0x54>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b12      	ldr	r3, [pc, #72]	@ (800312c <HAL_InitTick+0x58>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	4619      	mov	r1, r3
 80030e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f95f 	bl	80033b6 <HAL_SYSTICK_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e00e      	b.n	8003120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b0f      	cmp	r3, #15
 8003106:	d80a      	bhi.n	800311e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003108:	2200      	movs	r2, #0
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	f000 f927 	bl	8003362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003114:	4a06      	ldr	r2, [pc, #24]	@ (8003130 <HAL_InitTick+0x5c>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000008 	.word	0x20000008
 800312c:	200000d8 	.word	0x200000d8
 8003130:	200000d4 	.word	0x200000d4

08003134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_IncTick+0x1c>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <HAL_IncTick+0x20>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4413      	add	r3, r2
 8003144:	4a03      	ldr	r2, [pc, #12]	@ (8003154 <HAL_IncTick+0x20>)
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	200000d8 	.word	0x200000d8
 8003154:	20000438 	.word	0x20000438

08003158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return uwTick;
 800315c:	4b02      	ldr	r3, [pc, #8]	@ (8003168 <HAL_GetTick+0x10>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	20000438 	.word	0x20000438

0800316c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff fff0 	bl	8003158 <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d005      	beq.n	8003192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <HAL_Delay+0x44>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003192:	bf00      	nop
 8003194:	f7ff ffe0 	bl	8003158 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d8f7      	bhi.n	8003194 <HAL_Delay+0x28>
  {
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200000d8 	.word	0x200000d8

080031b4 <__NVIC_SetPriorityGrouping>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c4:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	@ (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_GetPriorityGrouping>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003200:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <__NVIC_GetPriorityGrouping+0x18>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0307 	and.w	r3, r3, #7
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_EnableIRQ>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db0b      	blt.n	8003242 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4906      	ldr	r1, [pc, #24]	@ (800324c <__NVIC_EnableIRQ+0x34>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	@ (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	@ (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	@ 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003318:	d301      	bcc.n	800331e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331e:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <SysTick_Config+0x40>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003326:	210f      	movs	r1, #15
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f7ff ff90 	bl	8003250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <SysTick_Config+0x40>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003336:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <SysTick_Config+0x40>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff2d 	bl	80031b4 <__NVIC_SetPriorityGrouping>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003374:	f7ff ff42 	bl	80031fc <__NVIC_GetPriorityGrouping>
 8003378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	6978      	ldr	r0, [r7, #20]
 8003380:	f7ff ff90 	bl	80032a4 <NVIC_EncodePriority>
 8003384:	4602      	mov	r2, r0
 8003386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff5f 	bl	8003250 <__NVIC_SetPriority>
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff35 	bl	8003218 <__NVIC_EnableIRQ>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ffa2 	bl	8003308 <SysTick_Config>
 80033c4:	4603      	mov	r3, r0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b08b      	sub	sp, #44	@ 0x2c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e2:	e169      	b.n	80036b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033e4:	2201      	movs	r2, #1
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	f040 8158 	bne.w	80036b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a9a      	ldr	r2, [pc, #616]	@ (8003670 <HAL_GPIO_Init+0x2a0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d05e      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 800340c:	4a98      	ldr	r2, [pc, #608]	@ (8003670 <HAL_GPIO_Init+0x2a0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d875      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 8003412:	4a98      	ldr	r2, [pc, #608]	@ (8003674 <HAL_GPIO_Init+0x2a4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d058      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 8003418:	4a96      	ldr	r2, [pc, #600]	@ (8003674 <HAL_GPIO_Init+0x2a4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d86f      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 800341e:	4a96      	ldr	r2, [pc, #600]	@ (8003678 <HAL_GPIO_Init+0x2a8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d052      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 8003424:	4a94      	ldr	r2, [pc, #592]	@ (8003678 <HAL_GPIO_Init+0x2a8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d869      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 800342a:	4a94      	ldr	r2, [pc, #592]	@ (800367c <HAL_GPIO_Init+0x2ac>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d04c      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 8003430:	4a92      	ldr	r2, [pc, #584]	@ (800367c <HAL_GPIO_Init+0x2ac>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d863      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 8003436:	4a92      	ldr	r2, [pc, #584]	@ (8003680 <HAL_GPIO_Init+0x2b0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d046      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 800343c:	4a90      	ldr	r2, [pc, #576]	@ (8003680 <HAL_GPIO_Init+0x2b0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d85d      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 8003442:	2b12      	cmp	r3, #18
 8003444:	d82a      	bhi.n	800349c <HAL_GPIO_Init+0xcc>
 8003446:	2b12      	cmp	r3, #18
 8003448:	d859      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 800344a:	a201      	add	r2, pc, #4	@ (adr r2, 8003450 <HAL_GPIO_Init+0x80>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	080034cb 	.word	0x080034cb
 8003454:	080034a5 	.word	0x080034a5
 8003458:	080034b7 	.word	0x080034b7
 800345c:	080034f9 	.word	0x080034f9
 8003460:	080034ff 	.word	0x080034ff
 8003464:	080034ff 	.word	0x080034ff
 8003468:	080034ff 	.word	0x080034ff
 800346c:	080034ff 	.word	0x080034ff
 8003470:	080034ff 	.word	0x080034ff
 8003474:	080034ff 	.word	0x080034ff
 8003478:	080034ff 	.word	0x080034ff
 800347c:	080034ff 	.word	0x080034ff
 8003480:	080034ff 	.word	0x080034ff
 8003484:	080034ff 	.word	0x080034ff
 8003488:	080034ff 	.word	0x080034ff
 800348c:	080034ff 	.word	0x080034ff
 8003490:	080034ff 	.word	0x080034ff
 8003494:	080034ad 	.word	0x080034ad
 8003498:	080034c1 	.word	0x080034c1
 800349c:	4a79      	ldr	r2, [pc, #484]	@ (8003684 <HAL_GPIO_Init+0x2b4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034a2:	e02c      	b.n	80034fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	623b      	str	r3, [r7, #32]
          break;
 80034aa:	e029      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	3304      	adds	r3, #4
 80034b2:	623b      	str	r3, [r7, #32]
          break;
 80034b4:	e024      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	3308      	adds	r3, #8
 80034bc:	623b      	str	r3, [r7, #32]
          break;
 80034be:	e01f      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	330c      	adds	r3, #12
 80034c6:	623b      	str	r3, [r7, #32]
          break;
 80034c8:	e01a      	b.n	8003500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034d2:	2304      	movs	r3, #4
 80034d4:	623b      	str	r3, [r7, #32]
          break;
 80034d6:	e013      	b.n	8003500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034e0:	2308      	movs	r3, #8
 80034e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	611a      	str	r2, [r3, #16]
          break;
 80034ea:	e009      	b.n	8003500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034ec:	2308      	movs	r3, #8
 80034ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	615a      	str	r2, [r3, #20]
          break;
 80034f6:	e003      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
          break;
 80034fc:	e000      	b.n	8003500 <HAL_GPIO_Init+0x130>
          break;
 80034fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2bff      	cmp	r3, #255	@ 0xff
 8003504:	d801      	bhi.n	800350a <HAL_GPIO_Init+0x13a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	e001      	b.n	800350e <HAL_GPIO_Init+0x13e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2bff      	cmp	r3, #255	@ 0xff
 8003514:	d802      	bhi.n	800351c <HAL_GPIO_Init+0x14c>
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	e002      	b.n	8003522 <HAL_GPIO_Init+0x152>
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	3b08      	subs	r3, #8
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	210f      	movs	r1, #15
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	401a      	ands	r2, r3
 8003534:	6a39      	ldr	r1, [r7, #32]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	431a      	orrs	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80b1 	beq.w	80036b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003550:	4b4d      	ldr	r3, [pc, #308]	@ (8003688 <HAL_GPIO_Init+0x2b8>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	4a4c      	ldr	r2, [pc, #304]	@ (8003688 <HAL_GPIO_Init+0x2b8>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6193      	str	r3, [r2, #24]
 800355c:	4b4a      	ldr	r3, [pc, #296]	@ (8003688 <HAL_GPIO_Init+0x2b8>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003568:	4a48      	ldr	r2, [pc, #288]	@ (800368c <HAL_GPIO_Init+0x2bc>)
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4013      	ands	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a40      	ldr	r2, [pc, #256]	@ (8003690 <HAL_GPIO_Init+0x2c0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_GPIO_Init+0x1ec>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3f      	ldr	r2, [pc, #252]	@ (8003694 <HAL_GPIO_Init+0x2c4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00d      	beq.n	80035b8 <HAL_GPIO_Init+0x1e8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3e      	ldr	r2, [pc, #248]	@ (8003698 <HAL_GPIO_Init+0x2c8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <HAL_GPIO_Init+0x1e4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3d      	ldr	r2, [pc, #244]	@ (800369c <HAL_GPIO_Init+0x2cc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_GPIO_Init+0x1e0>
 80035ac:	2303      	movs	r3, #3
 80035ae:	e006      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035b0:	2304      	movs	r3, #4
 80035b2:	e004      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e002      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035bc:	2300      	movs	r3, #0
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	f002 0203 	and.w	r2, r2, #3
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	4093      	lsls	r3, r2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035ce:	492f      	ldr	r1, [pc, #188]	@ (800368c <HAL_GPIO_Init+0x2bc>)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	3302      	adds	r3, #2
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035e8:	4b2d      	ldr	r3, [pc, #180]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	492c      	ldr	r1, [pc, #176]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	608b      	str	r3, [r1, #8]
 80035f4:	e006      	b.n	8003604 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035f6:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	4928      	ldr	r1, [pc, #160]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003600:	4013      	ands	r3, r2
 8003602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003610:	4b23      	ldr	r3, [pc, #140]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4922      	ldr	r1, [pc, #136]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800361e:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	43db      	mvns	r3, r3
 8003626:	491e      	ldr	r1, [pc, #120]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003628:	4013      	ands	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003638:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4918      	ldr	r1, [pc, #96]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
 8003644:	e006      	b.n	8003654 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003646:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	43db      	mvns	r3, r3
 800364e:	4914      	ldr	r1, [pc, #80]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003650:	4013      	ands	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	490e      	ldr	r1, [pc, #56]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	600b      	str	r3, [r1, #0]
 800366c:	e021      	b.n	80036b2 <HAL_GPIO_Init+0x2e2>
 800366e:	bf00      	nop
 8003670:	10320000 	.word	0x10320000
 8003674:	10310000 	.word	0x10310000
 8003678:	10220000 	.word	0x10220000
 800367c:	10210000 	.word	0x10210000
 8003680:	10120000 	.word	0x10120000
 8003684:	10110000 	.word	0x10110000
 8003688:	40021000 	.word	0x40021000
 800368c:	40010000 	.word	0x40010000
 8003690:	40010800 	.word	0x40010800
 8003694:	40010c00 	.word	0x40010c00
 8003698:	40011000 	.word	0x40011000
 800369c:	40011400 	.word	0x40011400
 80036a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_GPIO_Init+0x304>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	4909      	ldr	r1, [pc, #36]	@ (80036d4 <HAL_GPIO_Init+0x304>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	3301      	adds	r3, #1
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	fa22 f303 	lsr.w	r3, r2, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f47f ae8e 	bne.w	80033e4 <HAL_GPIO_Init+0x14>
  }
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	372c      	adds	r7, #44	@ 0x2c
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40010400 	.word	0x40010400

080036d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e001      	b.n	80036fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	807b      	strh	r3, [r7, #2]
 8003712:	4613      	mov	r3, r2
 8003714:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003716:	787b      	ldrb	r3, [r7, #1]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800371c:	887a      	ldrh	r2, [r7, #2]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003722:	e003      	b.n	800372c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003724:	887b      	ldrh	r3, [r7, #2]
 8003726:	041a      	lsls	r2, r3, #16
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	611a      	str	r2, [r3, #16]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003748:	887a      	ldrh	r2, [r7, #2]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4013      	ands	r3, r2
 800374e:	041a      	lsls	r2, r3, #16
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43d9      	mvns	r1, r3
 8003754:	887b      	ldrh	r3, [r7, #2]
 8003756:	400b      	ands	r3, r1
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	611a      	str	r2, [r3, #16]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003772:	4b08      	ldr	r3, [pc, #32]	@ (8003794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d006      	beq.n	800378c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800377e:	4a05      	ldr	r2, [pc, #20]	@ (8003794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fbe6 	bl	8000f58 <HAL_GPIO_EXTI_Callback>
  }
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40010400 	.word	0x40010400

08003798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e12b      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fac0 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	@ 0x24
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037fc:	f000 fcda 	bl	80041b4 <HAL_RCC_GetPCLK1Freq>
 8003800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4a81      	ldr	r2, [pc, #516]	@ (8003a0c <HAL_I2C_Init+0x274>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d807      	bhi.n	800381c <HAL_I2C_Init+0x84>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a80      	ldr	r2, [pc, #512]	@ (8003a10 <HAL_I2C_Init+0x278>)
 8003810:	4293      	cmp	r3, r2
 8003812:	bf94      	ite	ls
 8003814:	2301      	movls	r3, #1
 8003816:	2300      	movhi	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e006      	b.n	800382a <HAL_I2C_Init+0x92>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a14 <HAL_I2C_Init+0x27c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	bf94      	ite	ls
 8003824:	2301      	movls	r3, #1
 8003826:	2300      	movhi	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0e7      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a78      	ldr	r2, [pc, #480]	@ (8003a18 <HAL_I2C_Init+0x280>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0c9b      	lsrs	r3, r3, #18
 800383c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a6a      	ldr	r2, [pc, #424]	@ (8003a0c <HAL_I2C_Init+0x274>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d802      	bhi.n	800386c <HAL_I2C_Init+0xd4>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3301      	adds	r3, #1
 800386a:	e009      	b.n	8003880 <HAL_I2C_Init+0xe8>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	4a69      	ldr	r2, [pc, #420]	@ (8003a1c <HAL_I2C_Init+0x284>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	3301      	adds	r3, #1
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	430b      	orrs	r3, r1
 8003886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003892:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	495c      	ldr	r1, [pc, #368]	@ (8003a0c <HAL_I2C_Init+0x274>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d819      	bhi.n	80038d4 <HAL_I2C_Init+0x13c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e59      	subs	r1, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038b4:	400b      	ands	r3, r1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_I2C_Init+0x138>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e59      	subs	r1, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ce:	e051      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d0:	2304      	movs	r3, #4
 80038d2:	e04f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d111      	bne.n	8003900 <HAL_I2C_Init+0x168>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e012      	b.n	8003926 <HAL_I2C_Init+0x18e>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Init+0x196>
 800392a:	2301      	movs	r3, #1
 800392c:	e022      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10e      	bne.n	8003954 <HAL_I2C_Init+0x1bc>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e58      	subs	r0, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	440b      	add	r3, r1
 8003944:	fbb0 f3f3 	udiv	r3, r0, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003952:	e00f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e58      	subs	r0, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	0099      	lsls	r1, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	6809      	ldr	r1, [r1, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6911      	ldr	r1, [r2, #16]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	000186a0 	.word	0x000186a0
 8003a10:	001e847f 	.word	0x001e847f
 8003a14:	003d08ff 	.word	0x003d08ff
 8003a18:	431bde83 	.word	0x431bde83
 8003a1c:	10624dd3 	.word	0x10624dd3

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e272      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8087 	beq.w	8003b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a40:	4b92      	ldr	r3, [pc, #584]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 030c 	and.w	r3, r3, #12
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d00c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a4c:	4b8f      	ldr	r3, [pc, #572]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d112      	bne.n	8003a7e <HAL_RCC_OscConfig+0x5e>
 8003a58:	4b8c      	ldr	r3, [pc, #560]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a64:	d10b      	bne.n	8003a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a66:	4b89      	ldr	r3, [pc, #548]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d06c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x12c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d168      	bne.n	8003b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e24c      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x76>
 8003a88:	4b80      	ldr	r3, [pc, #512]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a7f      	ldr	r2, [pc, #508]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e02e      	b.n	8003af4 <HAL_RCC_OscConfig+0xd4>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x98>
 8003a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7a      	ldr	r2, [pc, #488]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b78      	ldr	r3, [pc, #480]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a77      	ldr	r2, [pc, #476]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xd4>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0xbc>
 8003ac2:	4b72      	ldr	r3, [pc, #456]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a71      	ldr	r2, [pc, #452]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b6f      	ldr	r3, [pc, #444]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xd4>
 8003adc:	4b6b      	ldr	r3, [pc, #428]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b68      	ldr	r3, [pc, #416]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a67      	ldr	r2, [pc, #412]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7ff fb2c 	bl	8003158 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7ff fb28 	bl	8003158 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e200      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b5d      	ldr	r3, [pc, #372]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xe4>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7ff fb18 	bl	8003158 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7ff fb14 	bl	8003158 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	@ 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1ec      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	4b53      	ldr	r3, [pc, #332]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x10c>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d063      	beq.n	8003c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b66:	4b49      	ldr	r3, [pc, #292]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x18c>
 8003b72:	4b46      	ldr	r3, [pc, #280]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	4b43      	ldr	r3, [pc, #268]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x176>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1c0      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b3d      	ldr	r3, [pc, #244]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4939      	ldr	r1, [pc, #228]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	e03a      	b.n	8003c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb4:	4b36      	ldr	r3, [pc, #216]	@ (8003c90 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7ff facd 	bl	8003158 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7ff fac9 	bl	8003158 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e1a1      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4927      	ldr	r1, [pc, #156]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	4b26      	ldr	r3, [pc, #152]	@ (8003c90 <HAL_RCC_OscConfig+0x270>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7ff faac 	bl	8003158 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c04:	f7ff faa8 	bl	8003158 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e180      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d03a      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d019      	beq.n	8003c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <HAL_RCC_OscConfig+0x274>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3c:	f7ff fa8c 	bl	8003158 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c44:	f7ff fa88 	bl	8003158 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e160      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <HAL_RCC_OscConfig+0x26c>)
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c62:	2001      	movs	r0, #1
 8003c64:	f000 faba 	bl	80041dc <RCC_Delay>
 8003c68:	e01c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c94 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c70:	f7ff fa72 	bl	8003158 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c76:	e00f      	b.n	8003c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c78:	f7ff fa6e 	bl	8003158 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d908      	bls.n	8003c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e146      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	42420000 	.word	0x42420000
 8003c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c98:	4b92      	ldr	r3, [pc, #584]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e9      	bne.n	8003c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a6 	beq.w	8003dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10d      	bne.n	8003cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	4b88      	ldr	r3, [pc, #544]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	4a87      	ldr	r2, [pc, #540]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ccc:	61d3      	str	r3, [r2, #28]
 8003cce:	4b85      	ldr	r3, [pc, #532]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	4b82      	ldr	r3, [pc, #520]	@ (8003ee8 <HAL_RCC_OscConfig+0x4c8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d118      	bne.n	8003d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cea:	4b7f      	ldr	r3, [pc, #508]	@ (8003ee8 <HAL_RCC_OscConfig+0x4c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a7e      	ldr	r2, [pc, #504]	@ (8003ee8 <HAL_RCC_OscConfig+0x4c8>)
 8003cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf6:	f7ff fa2f 	bl	8003158 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfe:	f7ff fa2b 	bl	8003158 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b64      	cmp	r3, #100	@ 0x64
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e103      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d10:	4b75      	ldr	r3, [pc, #468]	@ (8003ee8 <HAL_RCC_OscConfig+0x4c8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x312>
 8003d24:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6213      	str	r3, [r2, #32]
 8003d30:	e02d      	b.n	8003d8e <HAL_RCC_OscConfig+0x36e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x334>
 8003d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	4a69      	ldr	r2, [pc, #420]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	6213      	str	r3, [r2, #32]
 8003d46:	4b67      	ldr	r3, [pc, #412]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4a66      	ldr	r2, [pc, #408]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	f023 0304 	bic.w	r3, r3, #4
 8003d50:	6213      	str	r3, [r2, #32]
 8003d52:	e01c      	b.n	8003d8e <HAL_RCC_OscConfig+0x36e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d10c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x356>
 8003d5c:	4b61      	ldr	r3, [pc, #388]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	4a60      	ldr	r2, [pc, #384]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	6213      	str	r3, [r2, #32]
 8003d68:	4b5e      	ldr	r3, [pc, #376]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6213      	str	r3, [r2, #32]
 8003d74:	e00b      	b.n	8003d8e <HAL_RCC_OscConfig+0x36e>
 8003d76:	4b5b      	ldr	r3, [pc, #364]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	6213      	str	r3, [r2, #32]
 8003d82:	4b58      	ldr	r3, [pc, #352]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	4a57      	ldr	r2, [pc, #348]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d015      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d96:	f7ff f9df 	bl	8003158 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7ff f9db 	bl	8003158 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0b1      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ee      	beq.n	8003d9e <HAL_RCC_OscConfig+0x37e>
 8003dc0:	e014      	b.n	8003dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc2:	f7ff f9c9 	bl	8003158 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7ff f9c5 	bl	8003158 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e09b      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de0:	4b40      	ldr	r3, [pc, #256]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ee      	bne.n	8003dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d105      	bne.n	8003dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8087 	beq.w	8003f16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e08:	4b36      	ldr	r3, [pc, #216]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d061      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d146      	bne.n	8003eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1c:	4b33      	ldr	r3, [pc, #204]	@ (8003eec <HAL_RCC_OscConfig+0x4cc>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e22:	f7ff f999 	bl	8003158 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2a:	f7ff f995 	bl	8003158 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e06d      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e50:	d108      	bne.n	8003e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e52:	4b24      	ldr	r3, [pc, #144]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	4921      	ldr	r1, [pc, #132]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e64:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a19      	ldr	r1, [r3, #32]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	430b      	orrs	r3, r1
 8003e76:	491b      	ldr	r1, [pc, #108]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eec <HAL_RCC_OscConfig+0x4cc>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7ff f969 	bl	8003158 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7ff f965 	bl	8003158 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e03d      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x46a>
 8003ea8:	e035      	b.n	8003f16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b10      	ldr	r3, [pc, #64]	@ (8003eec <HAL_RCC_OscConfig+0x4cc>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7ff f952 	bl	8003158 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7ff f94e 	bl	8003158 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e026      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eca:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x498>
 8003ed6:	e01e      	b.n	8003f16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e019      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_RCC_OscConfig+0x500>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000

08003f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0d0      	b.n	80040da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f38:	4b6a      	ldr	r3, [pc, #424]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d910      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b67      	ldr	r3, [pc, #412]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 0207 	bic.w	r2, r3, #7
 8003f4e:	4965      	ldr	r1, [pc, #404]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b63      	ldr	r3, [pc, #396]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0b8      	b.n	80040da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f80:	4b59      	ldr	r3, [pc, #356]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a58      	ldr	r2, [pc, #352]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f98:	4b53      	ldr	r3, [pc, #332]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa4:	4b50      	ldr	r3, [pc, #320]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	494d      	ldr	r1, [pc, #308]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d040      	beq.n	8004044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	4b47      	ldr	r3, [pc, #284]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d115      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e07f      	b.n	80040da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	4b41      	ldr	r3, [pc, #260]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e073      	b.n	80040da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e06b      	b.n	80040da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004002:	4b39      	ldr	r3, [pc, #228]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4936      	ldr	r1, [pc, #216]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004014:	f7ff f8a0 	bl	8003158 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	e00a      	b.n	8004032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401c:	f7ff f89c 	bl	8003158 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e053      	b.n	80040da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	4b2d      	ldr	r3, [pc, #180]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 020c 	and.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	429a      	cmp	r2, r3
 8004042:	d1eb      	bne.n	800401c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004044:	4b27      	ldr	r3, [pc, #156]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d210      	bcs.n	8004074 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b24      	ldr	r3, [pc, #144]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 0207 	bic.w	r2, r3, #7
 800405a:	4922      	ldr	r1, [pc, #136]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b20      	ldr	r3, [pc, #128]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e032      	b.n	80040da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004080:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4916      	ldr	r1, [pc, #88]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800409e:	4b12      	ldr	r3, [pc, #72]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	490e      	ldr	r1, [pc, #56]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040b2:	f000 f821 	bl	80040f8 <HAL_RCC_GetSysClockFreq>
 80040b6:	4602      	mov	r2, r0
 80040b8:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	490a      	ldr	r1, [pc, #40]	@ (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	5ccb      	ldrb	r3, [r1, r3]
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	4a09      	ldr	r2, [pc, #36]	@ (80040f0 <HAL_RCC_ClockConfig+0x1cc>)
 80040cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <HAL_RCC_ClockConfig+0x1d0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe fffe 	bl	80030d4 <HAL_InitTick>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40022000 	.word	0x40022000
 80040e8:	40021000 	.word	0x40021000
 80040ec:	08008028 	.word	0x08008028
 80040f0:	20000008 	.word	0x20000008
 80040f4:	200000d4 	.word	0x200000d4

080040f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004112:	4b1e      	ldr	r3, [pc, #120]	@ (800418c <HAL_RCC_GetSysClockFreq+0x94>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b04      	cmp	r3, #4
 8004120:	d002      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x30>
 8004122:	2b08      	cmp	r3, #8
 8004124:	d003      	beq.n	800412e <HAL_RCC_GetSysClockFreq+0x36>
 8004126:	e027      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004128:	4b19      	ldr	r3, [pc, #100]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x98>)
 800412a:	613b      	str	r3, [r7, #16]
      break;
 800412c:	e027      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	0c9b      	lsrs	r3, r3, #18
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	4a17      	ldr	r2, [pc, #92]	@ (8004194 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004138:	5cd3      	ldrb	r3, [r2, r3]
 800413a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d010      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004146:	4b11      	ldr	r3, [pc, #68]	@ (800418c <HAL_RCC_GetSysClockFreq+0x94>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	0c5b      	lsrs	r3, r3, #17
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	4a11      	ldr	r2, [pc, #68]	@ (8004198 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004152:	5cd3      	ldrb	r3, [r2, r3]
 8004154:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a0d      	ldr	r2, [pc, #52]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x98>)
 800415a:	fb03 f202 	mul.w	r2, r3, r2
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e004      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a0c      	ldr	r2, [pc, #48]	@ (800419c <HAL_RCC_GetSysClockFreq+0xa4>)
 800416c:	fb02 f303 	mul.w	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	613b      	str	r3, [r7, #16]
      break;
 8004176:	e002      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x98>)
 800417a:	613b      	str	r3, [r7, #16]
      break;
 800417c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800417e:	693b      	ldr	r3, [r7, #16]
}
 8004180:	4618      	mov	r0, r3
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	007a1200 	.word	0x007a1200
 8004194:	08008040 	.word	0x08008040
 8004198:	08008050 	.word	0x08008050
 800419c:	003d0900 	.word	0x003d0900

080041a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a4:	4b02      	ldr	r3, [pc, #8]	@ (80041b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr
 80041b0:	20000008 	.word	0x20000008

080041b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b8:	f7ff fff2 	bl	80041a0 <HAL_RCC_GetHCLKFreq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	4903      	ldr	r1, [pc, #12]	@ (80041d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ca:	5ccb      	ldrb	r3, [r1, r3]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40021000 	.word	0x40021000
 80041d8:	08008038 	.word	0x08008038

080041dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004210 <RCC_Delay+0x34>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <RCC_Delay+0x38>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	0a5b      	lsrs	r3, r3, #9
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041f8:	bf00      	nop
  }
  while (Delay --);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1e5a      	subs	r2, r3, #1
 80041fe:	60fa      	str	r2, [r7, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f9      	bne.n	80041f8 <RCC_Delay+0x1c>
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	20000008 	.word	0x20000008
 8004214:	10624dd3 	.word	0x10624dd3

08004218 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e076      	b.n	8004318 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	2b00      	cmp	r3, #0
 8004230:	d108      	bne.n	8004244 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800423a:	d009      	beq.n	8004250 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	61da      	str	r2, [r3, #28]
 8004242:	e005      	b.n	8004250 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd fa70 	bl	8001750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004286:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d4:	ea42 0103 	orr.w	r1, r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	0c1a      	lsrs	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f002 0204 	and.w	r2, r2, #4
 80042f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004306:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	4613      	mov	r3, r2
 800432e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004330:	f7fe ff12 	bl	8003158 <HAL_GetTick>
 8004334:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	d001      	beq.n	800434a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004346:	2302      	movs	r3, #2
 8004348:	e12a      	b.n	80045a0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_SPI_Transmit+0x36>
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e122      	b.n	80045a0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_SPI_Transmit+0x48>
 8004364:	2302      	movs	r3, #2
 8004366:	e11b      	b.n	80045a0 <HAL_SPI_Transmit+0x280>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2203      	movs	r2, #3
 8004374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	88fa      	ldrh	r2, [r7, #6]
 800438e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b6:	d10f      	bne.n	80043d8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e2:	2b40      	cmp	r3, #64	@ 0x40
 80043e4:	d007      	beq.n	80043f6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043fe:	d152      	bne.n	80044a6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_SPI_Transmit+0xee>
 8004408:	8b7b      	ldrh	r3, [r7, #26]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d145      	bne.n	800449a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441e:	1c9a      	adds	r2, r3, #2
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004432:	e032      	b.n	800449a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d112      	bne.n	8004468 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004466:	e018      	b.n	800449a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004468:	f7fe fe76 	bl	8003158 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d803      	bhi.n	8004480 <HAL_SPI_Transmit+0x160>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d102      	bne.n	8004486 <HAL_SPI_Transmit+0x166>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e082      	b.n	80045a0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1c7      	bne.n	8004434 <HAL_SPI_Transmit+0x114>
 80044a4:	e053      	b.n	800454e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_SPI_Transmit+0x194>
 80044ae:	8b7b      	ldrh	r3, [r7, #26]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d147      	bne.n	8004544 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	7812      	ldrb	r2, [r2, #0]
 80044c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044da:	e033      	b.n	8004544 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d113      	bne.n	8004512 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	7812      	ldrb	r2, [r2, #0]
 80044f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004510:	e018      	b.n	8004544 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004512:	f7fe fe21 	bl	8003158 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d803      	bhi.n	800452a <HAL_SPI_Transmit+0x20a>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d102      	bne.n	8004530 <HAL_SPI_Transmit+0x210>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e02d      	b.n	80045a0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1c6      	bne.n	80044dc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fbc4 	bl	8004ce0 <SPI_EndRxTxTransaction>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800459e:	2300      	movs	r3, #0
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
 80045c6:	e104      	b.n	80047d2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045d0:	d112      	bne.n	80045f8 <HAL_SPI_Receive+0x50>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10e      	bne.n	80045f8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2204      	movs	r2, #4
 80045de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045e2:	88fa      	ldrh	r2, [r7, #6]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f8f3 	bl	80047da <HAL_SPI_TransmitReceive>
 80045f4:	4603      	mov	r3, r0
 80045f6:	e0ec      	b.n	80047d2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045f8:	f7fe fdae 	bl	8003158 <HAL_GetTick>
 80045fc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_Receive+0x62>
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0e1      	b.n	80047d2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_SPI_Receive+0x74>
 8004618:	2302      	movs	r3, #2
 800461a:	e0da      	b.n	80047d2 <HAL_SPI_Receive+0x22a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2204      	movs	r2, #4
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800466a:	d10f      	bne.n	800468c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800467a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800468a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004696:	2b40      	cmp	r3, #64	@ 0x40
 8004698:	d007      	beq.n	80046aa <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d170      	bne.n	8004794 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046b2:	e035      	b.n	8004720 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d115      	bne.n	80046ee <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f103 020c 	add.w	r2, r3, #12
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ce:	7812      	ldrb	r2, [r2, #0]
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046ec:	e018      	b.n	8004720 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ee:	f7fe fd33 	bl	8003158 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d803      	bhi.n	8004706 <HAL_SPI_Receive+0x15e>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d102      	bne.n	800470c <HAL_SPI_Receive+0x164>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e058      	b.n	80047d2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1c4      	bne.n	80046b4 <HAL_SPI_Receive+0x10c>
 800472a:	e038      	b.n	800479e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d113      	bne.n	8004762 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004744:	b292      	uxth	r2, r2
 8004746:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	1c9a      	adds	r2, r3, #2
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004760:	e018      	b.n	8004794 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004762:	f7fe fcf9 	bl	8003158 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d803      	bhi.n	800477a <HAL_SPI_Receive+0x1d2>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d102      	bne.n	8004780 <HAL_SPI_Receive+0x1d8>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e01e      	b.n	80047d2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1c6      	bne.n	800472c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fa4a 	bl	8004c3c <SPI_EndRxTransaction>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80047d0:	2300      	movs	r3, #0
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b08a      	sub	sp, #40	@ 0x28
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047e8:	2301      	movs	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ec:	f7fe fcb4 	bl	8003158 <HAL_GetTick>
 80047f0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047f8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004804:	7ffb      	ldrb	r3, [r7, #31]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d00c      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x4a>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004810:	d106      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x46>
 800481a:	7ffb      	ldrb	r3, [r7, #31]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d001      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
 8004822:	e17f      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x5c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x5c>
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e174      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x6e>
 8004844:	2302      	movs	r3, #2
 8004846:	e16d      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x34a>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b04      	cmp	r3, #4
 800485a:	d003      	beq.n	8004864 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2205      	movs	r2, #5
 8004860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	887a      	ldrh	r2, [r7, #2]
 800487a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	887a      	ldrh	r2, [r7, #2]
 8004886:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a4:	2b40      	cmp	r3, #64	@ 0x40
 80048a6:	d007      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c0:	d17e      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0xf6>
 80048ca:	8afb      	ldrh	r3, [r7, #22]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d16c      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e0:	1c9a      	adds	r2, r3, #2
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048f4:	e059      	b.n	80049aa <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d11b      	bne.n	800493c <HAL_SPI_TransmitReceive+0x162>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_SPI_TransmitReceive+0x162>
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	2b01      	cmp	r3, #1
 8004912:	d113      	bne.n	800493c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	881a      	ldrh	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	1c9a      	adds	r2, r3, #2
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b01      	cmp	r3, #1
 8004948:	d119      	bne.n	800497e <HAL_SPI_TransmitReceive+0x1a4>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d014      	beq.n	800497e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	b292      	uxth	r2, r2
 8004960:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004966:	1c9a      	adds	r2, r3, #2
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800497a:	2301      	movs	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800497e:	f7fe fbeb 	bl	8003158 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800498a:	429a      	cmp	r2, r3
 800498c:	d80d      	bhi.n	80049aa <HAL_SPI_TransmitReceive+0x1d0>
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d009      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e0bc      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1a0      	bne.n	80048f6 <HAL_SPI_TransmitReceive+0x11c>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d19b      	bne.n	80048f6 <HAL_SPI_TransmitReceive+0x11c>
 80049be:	e082      	b.n	8004ac6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_SPI_TransmitReceive+0x1f4>
 80049c8:	8afb      	ldrh	r3, [r7, #22]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d171      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049f4:	e05d      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d11c      	bne.n	8004a3e <HAL_SPI_TransmitReceive+0x264>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d017      	beq.n	8004a3e <HAL_SPI_TransmitReceive+0x264>
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d114      	bne.n	8004a3e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d119      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x2a6>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d014      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a80:	f7fe fb6a 	bl	8003158 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d803      	bhi.n	8004a98 <HAL_SPI_TransmitReceive+0x2be>
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d102      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x2c4>
 8004a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e038      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d19c      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x21c>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d197      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f908 	bl	8004ce0 <SPI_EndRxTxTransaction>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e01d      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b22:	2300      	movs	r3, #0
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3728      	adds	r7, #40	@ 0x28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b3c:	f7fe fb0c 	bl	8003158 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	4413      	add	r3, r2
 8004b4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b4c:	f7fe fb04 	bl	8003158 <HAL_GetTick>
 8004b50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b52:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	015b      	lsls	r3, r3, #5
 8004b58:	0d1b      	lsrs	r3, r3, #20
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b62:	e054      	b.n	8004c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d050      	beq.n	8004c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b6c:	f7fe faf4 	bl	8003158 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d902      	bls.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d13d      	bne.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b9a:	d111      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba4:	d004      	beq.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bae:	d107      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc8:	d10f      	bne.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e017      	b.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d19b      	bne.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000008 	.word	0x20000008

08004c3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c50:	d111      	bne.n	8004c76 <SPI_EndRxTransaction+0x3a>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c5a:	d004      	beq.n	8004c66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c64:	d107      	bne.n	8004c76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c74:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c7e:	d117      	bne.n	8004cb0 <SPI_EndRxTransaction+0x74>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c88:	d112      	bne.n	8004cb0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2101      	movs	r1, #1
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff ff49 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01a      	beq.n	8004cd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e013      	b.n	8004cd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2180      	movs	r1, #128	@ 0x80
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff ff36 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e000      	b.n	8004cd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff ff18 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e013      	b.n	8004d3a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2180      	movs	r1, #128	@ 0x80
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff ff05 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2c:	f043 0220 	orr.w	r2, r3, #32
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e000      	b.n	8004d3a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e041      	b.n	8004dd8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fc ff93 	bl	8001c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 fbcf 	bl	8005524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d001      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e03a      	b.n	8004e6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a18      	ldr	r2, [pc, #96]	@ (8004e78 <HAL_TIM_Base_Start_IT+0x98>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x58>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e22:	d009      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x58>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a14      	ldr	r2, [pc, #80]	@ (8004e7c <HAL_TIM_Base_Start_IT+0x9c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x58>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a13      	ldr	r2, [pc, #76]	@ (8004e80 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d111      	bne.n	8004e5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d010      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5a:	e007      	b.n	8004e6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800

08004e84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6a1a      	ldr	r2, [r3, #32]
 8004ea2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10f      	bne.n	8004ecc <HAL_TIM_Base_Stop_IT+0x48>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d107      	bne.n	8004ecc <HAL_TIM_Base_Stop_IT+0x48>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e093      	b.n	800501c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fc fe7f 	bl	8001c0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f24:	f023 0307 	bic.w	r3, r3, #7
 8004f28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f000 faf5 	bl	8005524 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	4313      	orrs	r3, r2
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004f80:	f023 030c 	bic.w	r3, r3, #12
 8004f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	011a      	lsls	r2, r3, #4
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	031b      	lsls	r3, r3, #12
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005034:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800503c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005044:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800504c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d110      	bne.n	8005076 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d102      	bne.n	8005060 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800505a:	7b7b      	ldrb	r3, [r7, #13]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d001      	beq.n	8005064 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e089      	b.n	8005178 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005074:	e031      	b.n	80050da <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d110      	bne.n	800509e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800507c:	7bbb      	ldrb	r3, [r7, #14]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d102      	bne.n	8005088 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005082:	7b3b      	ldrb	r3, [r7, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e075      	b.n	8005178 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800509c:	e01d      	b.n	80050da <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d108      	bne.n	80050b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a4:	7bbb      	ldrb	r3, [r7, #14]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d105      	bne.n	80050b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050aa:	7b7b      	ldrb	r3, [r7, #13]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d102      	bne.n	80050b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b0:	7b3b      	ldrb	r3, [r7, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e05e      	b.n	8005178 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d010      	beq.n	8005108 <HAL_TIM_Encoder_Start_IT+0xe4>
 80050e6:	e01f      	b.n	8005128 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2201      	movs	r2, #1
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fb1b 	bl	800572c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0202 	orr.w	r2, r2, #2
 8005104:	60da      	str	r2, [r3, #12]
      break;
 8005106:	e02e      	b.n	8005166 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2201      	movs	r2, #1
 800510e:	2104      	movs	r1, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fb0b 	bl	800572c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0204 	orr.w	r2, r2, #4
 8005124:	60da      	str	r2, [r3, #12]
      break;
 8005126:	e01e      	b.n	8005166 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2201      	movs	r2, #1
 800512e:	2100      	movs	r1, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fafb 	bl	800572c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2201      	movs	r2, #1
 800513c:	2104      	movs	r1, #4
 800513e:	4618      	mov	r0, r3
 8005140:	f000 faf4 	bl	800572c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0202 	orr.w	r2, r2, #2
 8005152:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0204 	orr.w	r2, r2, #4
 8005162:	60da      	str	r2, [r3, #12]
      break;
 8005164:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d020      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0202 	mvn.w	r2, #2
 80051b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fb fae0 	bl	8000790 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f98b 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f991 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0204 	mvn.w	r2, #4
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fb faba 	bl	8000790 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f965 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f96b 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d020      	beq.n	800527c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0208 	mvn.w	r2, #8
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2204      	movs	r2, #4
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fb fa94 	bl	8000790 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f93f 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f945 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d020      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0210 	mvn.w	r2, #16
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2208      	movs	r2, #8
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fb fa6e 	bl	8000790 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f919 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f91f 	bl	8005500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0201 	mvn.w	r2, #1
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fb fe7e 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa99 	bl	8005842 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800532c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f8ef 	bl	8005512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0220 	mvn.w	r2, #32
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa6c 	bl	8005830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIM_ConfigClockSource+0x1c>
 8005378:	2302      	movs	r3, #2
 800537a:	e0b4      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x186>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800539a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b4:	d03e      	beq.n	8005434 <HAL_TIM_ConfigClockSource+0xd4>
 80053b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ba:	f200 8087 	bhi.w	80054cc <HAL_TIM_ConfigClockSource+0x16c>
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c2:	f000 8086 	beq.w	80054d2 <HAL_TIM_ConfigClockSource+0x172>
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ca:	d87f      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b70      	cmp	r3, #112	@ 0x70
 80053ce:	d01a      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0xa6>
 80053d0:	2b70      	cmp	r3, #112	@ 0x70
 80053d2:	d87b      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b60      	cmp	r3, #96	@ 0x60
 80053d6:	d050      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x11a>
 80053d8:	2b60      	cmp	r3, #96	@ 0x60
 80053da:	d877      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b50      	cmp	r3, #80	@ 0x50
 80053de:	d03c      	beq.n	800545a <HAL_TIM_ConfigClockSource+0xfa>
 80053e0:	2b50      	cmp	r3, #80	@ 0x50
 80053e2:	d873      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b40      	cmp	r3, #64	@ 0x40
 80053e6:	d058      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x13a>
 80053e8:	2b40      	cmp	r3, #64	@ 0x40
 80053ea:	d86f      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b30      	cmp	r3, #48	@ 0x30
 80053ee:	d064      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x15a>
 80053f0:	2b30      	cmp	r3, #48	@ 0x30
 80053f2:	d86b      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d060      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x15a>
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d867      	bhi.n	80054cc <HAL_TIM_ConfigClockSource+0x16c>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d05c      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x15a>
 8005400:	2b10      	cmp	r3, #16
 8005402:	d05a      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x15a>
 8005404:	e062      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005416:	f000 f96a 	bl	80056ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	609a      	str	r2, [r3, #8]
      break;
 8005432:	e04f      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005444:	f000 f953 	bl	80056ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005456:	609a      	str	r2, [r3, #8]
      break;
 8005458:	e03c      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005466:	461a      	mov	r2, r3
 8005468:	f000 f8ca 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2150      	movs	r1, #80	@ 0x50
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f921 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 8005478:	e02c      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005486:	461a      	mov	r2, r3
 8005488:	f000 f8e8 	bl	800565c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2160      	movs	r1, #96	@ 0x60
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f911 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 8005498:	e01c      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a6:	461a      	mov	r2, r3
 80054a8:	f000 f8aa 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2140      	movs	r1, #64	@ 0x40
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f901 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80054b8:	e00c      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f000 f8f8 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80054ca:	e003      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
      break;
 80054d0:	e000      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr

08005512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a2f      	ldr	r2, [pc, #188]	@ (80055f4 <TIM_Base_SetConfig+0xd0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00b      	beq.n	8005554 <TIM_Base_SetConfig+0x30>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005542:	d007      	beq.n	8005554 <TIM_Base_SetConfig+0x30>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a2c      	ldr	r2, [pc, #176]	@ (80055f8 <TIM_Base_SetConfig+0xd4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_Base_SetConfig+0x30>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a2b      	ldr	r2, [pc, #172]	@ (80055fc <TIM_Base_SetConfig+0xd8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d108      	bne.n	8005566 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a22      	ldr	r2, [pc, #136]	@ (80055f4 <TIM_Base_SetConfig+0xd0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x62>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x62>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1f      	ldr	r2, [pc, #124]	@ (80055f8 <TIM_Base_SetConfig+0xd4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x62>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1e      	ldr	r2, [pc, #120]	@ (80055fc <TIM_Base_SetConfig+0xd8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a0d      	ldr	r2, [pc, #52]	@ (80055f4 <TIM_Base_SetConfig+0xd0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d103      	bne.n	80055cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	611a      	str	r2, [r3, #16]
  }
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800

08005600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800562a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 030a 	bic.w	r3, r3, #10
 800563c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	031b      	lsls	r3, r3, #12
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f043 0307 	orr.w	r3, r3, #7
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr

080056ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b087      	sub	sp, #28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	021a      	lsls	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	431a      	orrs	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4313      	orrs	r3, r2
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	609a      	str	r2, [r3, #8]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2201      	movs	r2, #1
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	43db      	mvns	r3, r3
 800574e:	401a      	ands	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1a      	ldr	r2, [r3, #32]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	fa01 f303 	lsl.w	r3, r1, r3
 8005764:	431a      	orrs	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005788:	2302      	movs	r3, #2
 800578a:	e046      	b.n	800581a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a16      	ldr	r2, [pc, #88]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d8:	d009      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a12      	ldr	r2, [pc, #72]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a10      	ldr	r2, [pc, #64]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d10c      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800

08005830 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <BSP_RF_Init>:
#include "bsp_rf.h"
static BSP_RF_Params_TypeDef *params;
static BSP_RF_MODE_TypeDef mode = NONE;
static uint8_t rx_data[NRF24L01P_PAYLOAD_LENGTH];
void BSP_RF_Init(BSP_RF_Params_TypeDef* _params)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
    params = _params;
 800585c:	4a0b      	ldr	r2, [pc, #44]	@ (800588c <BSP_RF_Init+0x38>)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6013      	str	r3, [r2, #0]
    nrf24l01p_init(_params->rate, _params->channel, _params->retransmit_count);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	885b      	ldrh	r3, [r3, #2]
 800586c:	b2d9      	uxtb	r1, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	791b      	ldrb	r3, [r3, #4]
 8005872:	461a      	mov	r2, r3
 8005874:	f000 f9b8 	bl	8005be8 <nrf24l01p_init>
    nrf24l01p_standby();
 8005878:	f000 fa04 	bl	8005c84 <nrf24l01p_standby>
    mode = STANDBY;
 800587c:	4b04      	ldr	r3, [pc, #16]	@ (8005890 <BSP_RF_Init+0x3c>)
 800587e:	2203      	movs	r2, #3
 8005880:	701a      	strb	r2, [r3, #0]
}
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	2000043c 	.word	0x2000043c
 8005890:	20000440 	.word	0x20000440

08005894 <BSP_RF_Sending>:

void BSP_RF_Sending(){
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
	if(mode == STANDBY){
 8005898:	4b09      	ldr	r3, [pc, #36]	@ (80058c0 <BSP_RF_Sending+0x2c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d102      	bne.n	80058a6 <BSP_RF_Sending+0x12>
		nrf24l01p_tx_init();
 80058a0:	f000 f954 	bl	8005b4c <nrf24l01p_tx_init>
 80058a4:	e007      	b.n	80058b6 <BSP_RF_Sending+0x22>
	}else if(mode == RX){
 80058a6:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <BSP_RF_Sending+0x2c>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d103      	bne.n	80058b6 <BSP_RF_Sending+0x22>
		nrf24l01p_standby();
 80058ae:	f000 f9e9 	bl	8005c84 <nrf24l01p_standby>
		nrf24l01p_tx_init();
 80058b2:	f000 f94b 	bl	8005b4c <nrf24l01p_tx_init>
	}
	mode = TX;
 80058b6:	4b02      	ldr	r3, [pc, #8]	@ (80058c0 <BSP_RF_Sending+0x2c>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
}
 80058bc:	bf00      	nop
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000440 	.word	0x20000440

080058c4 <BSP_RF_SendMessage>:

void BSP_RF_SendMessage(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH])
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	nrf24l01p_tx_transmit(payload);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f97f 	bl	8005bd0 <nrf24l01p_tx_transmit>
	DELAY_US(20);
 80058d2:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <BSP_RF_SendMessage+0x54>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	4b10      	ldr	r3, [pc, #64]	@ (800591c <BSP_RF_SendMessage+0x58>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a10      	ldr	r2, [pc, #64]	@ (8005920 <BSP_RF_SendMessage+0x5c>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	0c9a      	lsrs	r2, r3, #18
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4619      	mov	r1, r3
 80058ee:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <BSP_RF_SendMessage+0x58>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005920 <BSP_RF_SendMessage+0x5c>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	0c9b      	lsrs	r3, r3, #18
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	1acb      	subs	r3, r1, r3
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <BSP_RF_SendMessage+0x54>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	429a      	cmp	r2, r3
 800590c:	d8f8      	bhi.n	8005900 <BSP_RF_SendMessage+0x3c>
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	e000e010 	.word	0xe000e010
 800591c:	20000008 	.word	0x20000008
 8005920:	431bde83 	.word	0x431bde83

08005924 <BSP_RF_Listening>:

void BSP_RF_Listening()
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
	if(mode == STANDBY){
 8005928:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <BSP_RF_Listening+0x2c>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d102      	bne.n	8005936 <BSP_RF_Listening+0x12>
		nrf24l01p_rx_init();
 8005930:	f000 f8dc 	bl	8005aec <nrf24l01p_rx_init>
 8005934:	e007      	b.n	8005946 <BSP_RF_Listening+0x22>
	}
	else if(mode == TX){
 8005936:	4b06      	ldr	r3, [pc, #24]	@ (8005950 <BSP_RF_Listening+0x2c>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d103      	bne.n	8005946 <BSP_RF_Listening+0x22>
		nrf24l01p_standby();
 800593e:	f000 f9a1 	bl	8005c84 <nrf24l01p_standby>
		nrf24l01p_rx_init();
 8005942:	f000 f8d3 	bl	8005aec <nrf24l01p_rx_init>
	}
	mode = RX;
 8005946:	4b02      	ldr	r3, [pc, #8]	@ (8005950 <BSP_RF_Listening+0x2c>)
 8005948:	2202      	movs	r2, #2
 800594a:	701a      	strb	r2, [r3, #0]
}
 800594c:	bf00      	nop
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000440 	.word	0x20000440

08005954 <_BSP_RF_ReceiveMessage>:

void _BSP_RF_ReceiveMessage(){
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
	nrf24l01p_rx_receive(rx_data);
 8005958:	4803      	ldr	r0, [pc, #12]	@ (8005968 <_BSP_RF_ReceiveMessage+0x14>)
 800595a:	f000 f925 	bl	8005ba8 <nrf24l01p_rx_receive>
	nrf24l01p_clear_rx_dr();
 800595e:	f000 fadf 	bl	8005f20 <nrf24l01p_clear_rx_dr>
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000444 	.word	0x20000444

0800596c <BSP_RF_IrqHandler>:

uint8_t BSP_RF_IrqHandler(){
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24l01p_get_status();
 8005976:	f000 faab 	bl	8005ed0 <nrf24l01p_get_status>
 800597a:	4603      	mov	r3, r0
 800597c:	71bb      	strb	r3, [r7, #6]
	if(status >> 4 == 1){
 800597e:	79bb      	ldrb	r3, [r7, #6]
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	d102      	bne.n	800598e <BSP_RF_IrqHandler+0x22>
		nrf24l01p_clear_max_rt();
 8005988:	f000 faf2 	bl	8005f70 <nrf24l01p_clear_max_rt>
 800598c:	e010      	b.n	80059b0 <BSP_RF_IrqHandler+0x44>
	}
	else if(status >> 5 == 1){
 800598e:	79bb      	ldrb	r3, [r7, #6]
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	d102      	bne.n	800599e <BSP_RF_IrqHandler+0x32>
		nrf24l01p_clear_tx_ds();
 8005998:	f000 fad6 	bl	8005f48 <nrf24l01p_clear_tx_ds>
 800599c:	e008      	b.n	80059b0 <BSP_RF_IrqHandler+0x44>
	}
	else if(status >> 6 == 1){
 800599e:	79bb      	ldrb	r3, [r7, #6]
 80059a0:	099b      	lsrs	r3, r3, #6
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d103      	bne.n	80059b0 <BSP_RF_IrqHandler+0x44>
		_BSP_RF_ReceiveMessage();
 80059a8:	f7ff ffd4 	bl	8005954 <_BSP_RF_ReceiveMessage>
		ret = 1;
 80059ac:	2301      	movs	r3, #1
 80059ae:	71fb      	strb	r3, [r7, #7]
	}

	BSP_RF_Listening();
 80059b0:	f7ff ffb8 	bl	8005924 <BSP_RF_Listening>
	return ret;
 80059b4:	79fb      	ldrb	r3, [r7, #7]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <BSP_RF_ReadData>:

void BSP_RF_ReadData(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH]){
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	memcpy(payload, rx_data, NRF24L01P_PAYLOAD_LENGTH);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4905      	ldr	r1, [pc, #20]	@ (80059e0 <BSP_RF_ReadData+0x20>)
 80059cc:	461a      	mov	r2, r3
 80059ce:	460b      	mov	r3, r1
 80059d0:	cb03      	ldmia	r3!, {r0, r1}
 80059d2:	6010      	str	r0, [r2, #0]
 80059d4:	6051      	str	r1, [r2, #4]
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr
 80059e0:	20000444 	.word	0x20000444

080059e4 <cs_high>:

#include "nrf24.h"


static void cs_high()
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80059e8:	2201      	movs	r2, #1
 80059ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059ee:	4802      	ldr	r0, [pc, #8]	@ (80059f8 <cs_high+0x14>)
 80059f0:	f7fd fe89 	bl	8003706 <HAL_GPIO_WritePin>
}
 80059f4:	bf00      	nop
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40010800 	.word	0x40010800

080059fc <cs_low>:

static void cs_low()
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8005a00:	2200      	movs	r2, #0
 8005a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a06:	4802      	ldr	r0, [pc, #8]	@ (8005a10 <cs_low+0x14>)
 8005a08:	f7fd fe7d 	bl	8003706 <HAL_GPIO_WritePin>
}
 8005a0c:	bf00      	nop
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40010800 	.word	0x40010800

08005a14 <ce_high>:

static void ce_high()
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a1e:	4802      	ldr	r0, [pc, #8]	@ (8005a28 <ce_high+0x14>)
 8005a20:	f7fd fe71 	bl	8003706 <HAL_GPIO_WritePin>
}
 8005a24:	bf00      	nop
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40010c00 	.word	0x40010c00

08005a2c <ce_low>:

static void ce_low()
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8005a30:	2200      	movs	r2, #0
 8005a32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a36:	4802      	ldr	r0, [pc, #8]	@ (8005a40 <ce_low+0x14>)
 8005a38:	f7fd fe65 	bl	8003706 <HAL_GPIO_WritePin>
}
 8005a3c:	bf00      	nop
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40010c00 	.word	0x40010c00

08005a44 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8005a52:	f7ff ffd3 	bl	80059fc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005a56:	f107 020e 	add.w	r2, r7, #14
 8005a5a:	f107 010f 	add.w	r1, r7, #15
 8005a5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	2301      	movs	r3, #1
 8005a66:	4809      	ldr	r0, [pc, #36]	@ (8005a8c <read_register+0x48>)
 8005a68:	f7fe feb7 	bl	80047da <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8005a6c:	f107 010d 	add.w	r1, r7, #13
 8005a70:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005a74:	2201      	movs	r2, #1
 8005a76:	4805      	ldr	r0, [pc, #20]	@ (8005a8c <read_register+0x48>)
 8005a78:	f7fe fd96 	bl	80045a8 <HAL_SPI_Receive>
    cs_high();
 8005a7c:	f7ff ffb2 	bl	80059e4 <cs_high>

    return read_val;
 8005a80:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000224 	.word	0x20000224

08005a90 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	4603      	mov	r3, r0
 8005a98:	460a      	mov	r2, r1
 8005a9a:	71fb      	strb	r3, [r7, #7]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	f043 0320 	orr.w	r3, r3, #32
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8005aaa:	79bb      	ldrb	r3, [r7, #6]
 8005aac:	737b      	strb	r3, [r7, #13]

    cs_low();
 8005aae:	f7ff ffa5 	bl	80059fc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005ab2:	f107 020e 	add.w	r2, r7, #14
 8005ab6:	f107 010f 	add.w	r1, r7, #15
 8005aba:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4809      	ldr	r0, [pc, #36]	@ (8005ae8 <write_register+0x58>)
 8005ac4:	f7fe fe89 	bl	80047da <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8005ac8:	f107 010d 	add.w	r1, r7, #13
 8005acc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	4805      	ldr	r0, [pc, #20]	@ (8005ae8 <write_register+0x58>)
 8005ad4:	f7fe fc24 	bl	8004320 <HAL_SPI_Transmit>
    cs_high();
 8005ad8:	f7ff ff84 	bl	80059e4 <cs_high>

    return write_val;
 8005adc:	7b7b      	ldrb	r3, [r7, #13]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000224 	.word	0x20000224

08005aec <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init()
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
	nrf24l01p_flush_rx_fifo();
 8005af2:	f000 f9bd 	bl	8005e70 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_prx_mode();
 8005af6:	f000 f949 	bl	8005d8c <nrf24l01p_prx_mode>
    ce_high();
 8005afa:	f7ff ff8b 	bl	8005a14 <ce_high>
    DELAY_US(150);
 8005afe:	4b10      	ldr	r3, [pc, #64]	@ (8005b40 <nrf24l01p_rx_init+0x54>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	607b      	str	r3, [r7, #4]
 8005b04:	4b0f      	ldr	r3, [pc, #60]	@ (8005b44 <nrf24l01p_rx_init+0x58>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0f      	ldr	r2, [pc, #60]	@ (8005b48 <nrf24l01p_rx_init+0x5c>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	0c9b      	lsrs	r3, r3, #18
 8005b10:	2296      	movs	r2, #150	@ 0x96
 8005b12:	fb03 f202 	mul.w	r2, r3, r2
 8005b16:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <nrf24l01p_rx_init+0x58>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	490b      	ldr	r1, [pc, #44]	@ (8005b48 <nrf24l01p_rx_init+0x5c>)
 8005b1c:	fba1 1303 	umull	r1, r3, r1, r3
 8005b20:	0c9b      	lsrs	r3, r3, #18
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <nrf24l01p_rx_init+0x54>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d8f8      	bhi.n	8005b28 <nrf24l01p_rx_init+0x3c>
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	e000e010 	.word	0xe000e010
 8005b44:	20000008 	.word	0x20000008
 8005b48:	431bde83 	.word	0x431bde83

08005b4c <nrf24l01p_tx_init>:

void nrf24l01p_tx_init()
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0

    nrf24l01p_ptx_mode();
 8005b52:	f000 f930 	bl	8005db6 <nrf24l01p_ptx_mode>
    ce_high();
 8005b56:	f7ff ff5d 	bl	8005a14 <ce_high>
    DELAY_US(150);
 8005b5a:	4b10      	ldr	r3, [pc, #64]	@ (8005b9c <nrf24l01p_tx_init+0x50>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba0 <nrf24l01p_tx_init+0x54>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a0f      	ldr	r2, [pc, #60]	@ (8005ba4 <nrf24l01p_tx_init+0x58>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	0c9b      	lsrs	r3, r3, #18
 8005b6c:	2296      	movs	r2, #150	@ 0x96
 8005b6e:	fb03 f202 	mul.w	r2, r3, r2
 8005b72:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <nrf24l01p_tx_init+0x54>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	490b      	ldr	r1, [pc, #44]	@ (8005ba4 <nrf24l01p_tx_init+0x58>)
 8005b78:	fba1 1303 	umull	r1, r3, r1, r3
 8005b7c:	0c9b      	lsrs	r3, r3, #18
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4b05      	ldr	r3, [pc, #20]	@ (8005b9c <nrf24l01p_tx_init+0x50>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d8f8      	bhi.n	8005b84 <nrf24l01p_tx_init+0x38>
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	e000e010 	.word	0xe000e010
 8005ba0:	20000008 	.word	0x20000008
 8005ba4:	431bde83 	.word	0x431bde83

08005ba8 <nrf24l01p_rx_receive>:

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f915 	bl	8005de0 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8005bb6:	f000 f9b3 	bl	8005f20 <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005bba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005bbe:	4803      	ldr	r0, [pc, #12]	@ (8005bcc <nrf24l01p_rx_receive+0x24>)
 8005bc0:	f7fd fdb9 	bl	8003736 <HAL_GPIO_TogglePin>
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40011000 	.word	0x40011000

08005bd0 <nrf24l01p_tx_transmit>:

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f925 	bl	8005e28 <nrf24l01p_write_tx_fifo>
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <nrf24l01p_init>:
    }
}

/* nRF24L01+ Sub Functions */

void nrf24l01p_init(channel MHz, air_data_rate bps, uint8_t retransmit_count){
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	80fb      	strh	r3, [r7, #6]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	717b      	strb	r3, [r7, #5]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	713b      	strb	r3, [r7, #4]
	nrf24l01p_reset();
 8005bfa:	f000 f873 	bl	8005ce4 <nrf24l01p_reset>
    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8005bfe:	2008      	movs	r0, #8
 8005c00:	f000 f980 	bl	8005f04 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fa52 	bl	80060b0 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8005c0c:	797b      	ldrb	r3, [r7, #5]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fa7e 	bl	8006110 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8005c14:	2003      	movs	r0, #3
 8005c16:	f000 fa5e 	bl	80060d6 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	f000 f9d1 	bl	8005fc2 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8005c20:	2005      	movs	r0, #5
 8005c22:	f000 f9f1 	bl	8006008 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(retransmit_count);
 8005c26:	793b      	ldrb	r3, [r7, #4]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 f9fd 	bl	8006028 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8005c2e:	20fa      	movs	r0, #250	@ 0xfa
 8005c30:	f000 fa16 	bl	8006060 <nrf24l01p_auto_retransmit_delay>
    DELAY_US(100);
 8005c34:	4b10      	ldr	r3, [pc, #64]	@ (8005c78 <nrf24l01p_init+0x90>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	4b10      	ldr	r3, [pc, #64]	@ (8005c7c <nrf24l01p_init+0x94>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a10      	ldr	r2, [pc, #64]	@ (8005c80 <nrf24l01p_init+0x98>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	0c9b      	lsrs	r3, r3, #18
 8005c46:	2264      	movs	r2, #100	@ 0x64
 8005c48:	fb03 f202 	mul.w	r2, r3, r2
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <nrf24l01p_init+0x94>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	490b      	ldr	r1, [pc, #44]	@ (8005c80 <nrf24l01p_init+0x98>)
 8005c52:	fba1 1303 	umull	r1, r3, r1, r3
 8005c56:	0c9b      	lsrs	r3, r3, #18
 8005c58:	085b      	lsrs	r3, r3, #1
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <nrf24l01p_init+0x90>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d8f8      	bhi.n	8005c5e <nrf24l01p_init+0x76>
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	e000e010 	.word	0xe000e010
 8005c7c:	20000008 	.word	0x20000008
 8005c80:	431bde83 	.word	0x431bde83

08005c84 <nrf24l01p_standby>:

void nrf24l01p_standby()
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
	nrf24l01p_power_up();
 8005c8a:	f000 f985 	bl	8005f98 <nrf24l01p_power_up>
	ce_low();
 8005c8e:	f7ff fecd 	bl	8005a2c <ce_low>
	DELAY_US(40);
 8005c92:	4b11      	ldr	r3, [pc, #68]	@ (8005cd8 <nrf24l01p_standby+0x54>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	607b      	str	r3, [r7, #4]
 8005c98:	4b10      	ldr	r3, [pc, #64]	@ (8005cdc <nrf24l01p_standby+0x58>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a10      	ldr	r2, [pc, #64]	@ (8005ce0 <nrf24l01p_standby+0x5c>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	0c9a      	lsrs	r2, r3, #18
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4619      	mov	r1, r3
 8005cae:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <nrf24l01p_standby+0x58>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8005ce0 <nrf24l01p_standby+0x5c>)
 8005cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb8:	0c9b      	lsrs	r3, r3, #18
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	1acb      	subs	r3, r1, r3
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <nrf24l01p_standby+0x54>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d8f8      	bhi.n	8005cc0 <nrf24l01p_standby+0x3c>
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	e000e010 	.word	0xe000e010
 8005cdc:	20000008 	.word	0x20000008
 8005ce0:	431bde83 	.word	0x431bde83

08005ce4 <nrf24l01p_reset>:

void nrf24l01p_reset()
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8005ce8:	f7ff fe7c 	bl	80059e4 <cs_high>
    ce_low();
 8005cec:	f7ff fe9e 	bl	8005a2c <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8005cf0:	2108      	movs	r1, #8
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	f7ff fecc 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8005cf8:	213f      	movs	r1, #63	@ 0x3f
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	f7ff fec8 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8005d00:	2103      	movs	r1, #3
 8005d02:	2002      	movs	r0, #2
 8005d04:	f7ff fec4 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8005d08:	2103      	movs	r1, #3
 8005d0a:	2003      	movs	r0, #3
 8005d0c:	f7ff fec0 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8005d10:	2103      	movs	r1, #3
 8005d12:	2004      	movs	r0, #4
 8005d14:	f7ff febc 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8005d18:	2102      	movs	r1, #2
 8005d1a:	2005      	movs	r0, #5
 8005d1c:	f7ff feb8 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8005d20:	2107      	movs	r1, #7
 8005d22:	2006      	movs	r0, #6
 8005d24:	f7ff feb4 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8005d28:	217e      	movs	r1, #126	@ 0x7e
 8005d2a:	2007      	movs	r0, #7
 8005d2c:	f7ff feb0 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8005d30:	2100      	movs	r1, #0
 8005d32:	2011      	movs	r0, #17
 8005d34:	f7ff feac 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8005d38:	2100      	movs	r1, #0
 8005d3a:	2011      	movs	r0, #17
 8005d3c:	f7ff fea8 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8005d40:	2100      	movs	r1, #0
 8005d42:	2012      	movs	r0, #18
 8005d44:	f7ff fea4 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8005d48:	2100      	movs	r1, #0
 8005d4a:	2013      	movs	r0, #19
 8005d4c:	f7ff fea0 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8005d50:	2100      	movs	r1, #0
 8005d52:	2014      	movs	r0, #20
 8005d54:	f7ff fe9c 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8005d58:	2100      	movs	r1, #0
 8005d5a:	2015      	movs	r0, #21
 8005d5c:	f7ff fe98 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8005d60:	2100      	movs	r1, #0
 8005d62:	2016      	movs	r0, #22
 8005d64:	f7ff fe94 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8005d68:	2111      	movs	r1, #17
 8005d6a:	2017      	movs	r0, #23
 8005d6c:	f7ff fe90 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8005d70:	2100      	movs	r1, #0
 8005d72:	201c      	movs	r0, #28
 8005d74:	f7ff fe8c 	bl	8005a90 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8005d78:	2100      	movs	r1, #0
 8005d7a:	201d      	movs	r0, #29
 8005d7c:	f7ff fe88 	bl	8005a90 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8005d80:	f000 f876 	bl	8005e70 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8005d84:	f000 f88c 	bl	8005ea0 <nrf24l01p_flush_tx_fifo>
}
 8005d88:	bf00      	nop
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005d92:	2000      	movs	r0, #0
 8005d94:	f7ff fe56 	bl	8005a44 <read_register>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	4619      	mov	r1, r3
 8005da8:	2000      	movs	r0, #0
 8005daa:	f7ff fe71 	bl	8005a90 <write_register>
}
 8005dae:	bf00      	nop
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <nrf24l01p_ptx_mode>:

void nrf24l01p_ptx_mode()
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f7ff fe41 	bl	8005a44 <read_register>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	f7ff fe5c 	bl	8005a90 <write_register>
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <nrf24l01p_read_rx_fifo>:

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8005de8:	2361      	movs	r3, #97	@ 0x61
 8005dea:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8005dec:	f7ff fe06 	bl	80059fc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005df0:	f107 020e 	add.w	r2, r7, #14
 8005df4:	f107 010f 	add.w	r1, r7, #15
 8005df8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4808      	ldr	r0, [pc, #32]	@ (8005e24 <nrf24l01p_read_rx_fifo+0x44>)
 8005e02:	f7fe fcea 	bl	80047da <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8005e06:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4805      	ldr	r0, [pc, #20]	@ (8005e24 <nrf24l01p_read_rx_fifo+0x44>)
 8005e10:	f7fe fbca 	bl	80045a8 <HAL_SPI_Receive>
    cs_high();
 8005e14:	f7ff fde6 	bl	80059e4 <cs_high>

    return status;
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000224 	.word	0x20000224

08005e28 <nrf24l01p_write_tx_fifo>:

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8005e30:	23a0      	movs	r3, #160	@ 0xa0
 8005e32:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8005e34:	f7ff fde2 	bl	80059fc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005e38:	f107 020e 	add.w	r2, r7, #14
 8005e3c:	f107 010f 	add.w	r1, r7, #15
 8005e40:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2301      	movs	r3, #1
 8005e48:	4808      	ldr	r0, [pc, #32]	@ (8005e6c <nrf24l01p_write_tx_fifo+0x44>)
 8005e4a:	f7fe fcc6 	bl	80047da <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8005e4e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005e52:	2208      	movs	r2, #8
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4805      	ldr	r0, [pc, #20]	@ (8005e6c <nrf24l01p_write_tx_fifo+0x44>)
 8005e58:	f7fe fa62 	bl	8004320 <HAL_SPI_Transmit>
    cs_high();
 8005e5c:	f7ff fdc2 	bl	80059e4 <cs_high>

    return status;
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000224 	.word	0x20000224

08005e70 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8005e76:	23e2      	movs	r3, #226	@ 0xe2
 8005e78:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8005e7a:	f7ff fdbf 	bl	80059fc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005e7e:	1dba      	adds	r2, r7, #6
 8005e80:	1df9      	adds	r1, r7, #7
 8005e82:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	2301      	movs	r3, #1
 8005e8a:	4804      	ldr	r0, [pc, #16]	@ (8005e9c <nrf24l01p_flush_rx_fifo+0x2c>)
 8005e8c:	f7fe fca5 	bl	80047da <HAL_SPI_TransmitReceive>
    cs_high();
 8005e90:	f7ff fda8 	bl	80059e4 <cs_high>
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000224 	.word	0x20000224

08005ea0 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8005ea6:	23e1      	movs	r3, #225	@ 0xe1
 8005ea8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8005eaa:	f7ff fda7 	bl	80059fc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005eae:	1dba      	adds	r2, r7, #6
 8005eb0:	1df9      	adds	r1, r7, #7
 8005eb2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4804      	ldr	r0, [pc, #16]	@ (8005ecc <nrf24l01p_flush_tx_fifo+0x2c>)
 8005ebc:	f7fe fc8d 	bl	80047da <HAL_SPI_TransmitReceive>
    cs_high();
 8005ec0:	f7ff fd90 	bl	80059e4 <cs_high>
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000224 	.word	0x20000224

08005ed0 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8005ed6:	23ff      	movs	r3, #255	@ 0xff
 8005ed8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8005eda:	f7ff fd8f 	bl	80059fc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005ede:	1dba      	adds	r2, r7, #6
 8005ee0:	1df9      	adds	r1, r7, #7
 8005ee2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4805      	ldr	r0, [pc, #20]	@ (8005f00 <nrf24l01p_get_status+0x30>)
 8005eec:	f7fe fc75 	bl	80047da <HAL_SPI_TransmitReceive>
    cs_high();
 8005ef0:	f7ff fd78 	bl	80059e4 <cs_high>

    return status;
 8005ef4:	79bb      	ldrb	r3, [r7, #6]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000224 	.word	0x20000224

08005f04 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	4619      	mov	r1, r3
 8005f12:	2011      	movs	r0, #17
 8005f14:	f7ff fdbc 	bl	8005a90 <write_register>
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8005f26:	f7ff ffd3 	bl	8005ed0 <nrf24l01p_get_status>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f34:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	2007      	movs	r0, #7
 8005f3c:	f7ff fda8 	bl	8005a90 <write_register>
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <nrf24l01p_clear_tx_ds>:

void nrf24l01p_clear_tx_ds()
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8005f4e:	f7ff ffbf 	bl	8005ed0 <nrf24l01p_get_status>
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	f043 0320 	orr.w	r3, r3, #32
 8005f5c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	4619      	mov	r1, r3
 8005f62:	2007      	movs	r0, #7
 8005f64:	f7ff fd94 	bl	8005a90 <write_register>
}
 8005f68:	bf00      	nop
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8005f76:	f7ff ffab 	bl	8005ed0 <nrf24l01p_get_status>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	f043 0310 	orr.w	r3, r3, #16
 8005f84:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	2007      	movs	r0, #7
 8005f8c:	f7ff fd80 	bl	8005a90 <write_register>
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	f7ff fd50 	bl	8005a44 <read_register>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	f043 0302 	orr.w	r3, r3, #2
 8005fae:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f7ff fd6b 	bl	8005a90 <write_register>
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	4603      	mov	r3, r0
 8005fca:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005fcc:	2000      	movs	r0, #0
 8005fce:	f7ff fd39 	bl	8005a44 <read_register>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d002      	beq.n	8005fe2 <nrf24l01p_set_crc_length+0x20>
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d005      	beq.n	8005fec <nrf24l01p_set_crc_length+0x2a>
 8005fe0:	e009      	b.n	8005ff6 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	f023 0304 	bic.w	r3, r3, #4
 8005fe8:	73fb      	strb	r3, [r7, #15]
            break;
 8005fea:	e004      	b.n	8005ff6 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	f043 0304 	orr.w	r3, r3, #4
 8005ff2:	73fb      	strb	r3, [r7, #15]
            break;
 8005ff4:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	f7ff fd48 	bl	8005a90 <write_register>
}
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	3b02      	subs	r3, #2
 8006016:	b2db      	uxtb	r3, r3
 8006018:	4619      	mov	r1, r3
 800601a:	2003      	movs	r0, #3
 800601c:	f7ff fd38 	bl	8005a90 <write_register>
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	4603      	mov	r3, r0
 8006030:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8006032:	2004      	movs	r0, #4
 8006034:	f7ff fd06 	bl	8005a44 <read_register>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	f063 030f 	orn	r3, r3, #15
 8006042:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8006044:	7bfa      	ldrb	r2, [r7, #15]
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	4313      	orrs	r3, r2
 800604a:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	4619      	mov	r1, r3
 8006050:	2004      	movs	r0, #4
 8006052:	f7ff fd1d 	bl	8005a90 <write_register>
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	4603      	mov	r3, r0
 8006068:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800606a:	2004      	movs	r0, #4
 800606c:	f7ff fcea 	bl	8005a44 <read_register>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	f043 030f 	orr.w	r3, r3, #15
 800607a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	4a0b      	ldr	r2, [pc, #44]	@ (80060ac <nrf24l01p_auto_retransmit_delay+0x4c>)
 8006080:	fba2 2303 	umull	r2, r3, r2, r3
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	b25a      	sxtb	r2, r3
 800608e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006092:	4313      	orrs	r3, r2
 8006094:	b25b      	sxtb	r3, r3
 8006096:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	4619      	mov	r1, r3
 800609c:	2004      	movs	r0, #4
 800609e:	f7ff fcf7 	bl	8005a90 <write_register>
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	10624dd3 	.word	0x10624dd3

080060b0 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = 2400 + MHz;
 80060ba:	88fb      	ldrh	r3, [r7, #6]
 80060bc:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 80060c0:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 80060c2:	89fb      	ldrh	r3, [r7, #14]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	4619      	mov	r1, r3
 80060c8:	2005      	movs	r0, #5
 80060ca:	f7ff fce1 	bl	8005a90 <write_register>
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	4603      	mov	r3, r0
 80060de:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80060e0:	2006      	movs	r0, #6
 80060e2:	f7ff fcaf 	bl	8005a44 <read_register>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f023 0306 	bic.w	r3, r3, #6
 80060ec:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	b25a      	sxtb	r2, r3
 80060f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	4619      	mov	r1, r3
 8006102:	2006      	movs	r0, #6
 8006104:	f7ff fcc4 	bl	8005a90 <write_register>
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 800611a:	2006      	movs	r0, #6
 800611c:	f7ff fc92 	bl	8005a44 <read_register>
 8006120:	4603      	mov	r3, r0
 8006122:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8006126:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d00a      	beq.n	8006144 <nrf24l01p_set_rf_air_data_rate+0x34>
 800612e:	2b02      	cmp	r3, #2
 8006130:	dc0e      	bgt.n	8006150 <nrf24l01p_set_rf_air_data_rate+0x40>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <nrf24l01p_set_rf_air_data_rate+0x3e>
 8006136:	2b01      	cmp	r3, #1
 8006138:	d10a      	bne.n	8006150 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	f043 0308 	orr.w	r3, r3, #8
 8006140:	73fb      	strb	r3, [r7, #15]
            break;
 8006142:	e005      	b.n	8006150 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	f043 0320 	orr.w	r3, r3, #32
 800614a:	73fb      	strb	r3, [r7, #15]
            break;
 800614c:	e000      	b.n	8006150 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 800614e:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	4619      	mov	r1, r3
 8006154:	2006      	movs	r0, #6
 8006156:	f7ff fc9b 	bl	8005a90 <write_register>
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <siprintf>:
 8006164:	b40e      	push	{r1, r2, r3}
 8006166:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800616a:	b500      	push	{lr}
 800616c:	b09c      	sub	sp, #112	@ 0x70
 800616e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006170:	9002      	str	r0, [sp, #8]
 8006172:	9006      	str	r0, [sp, #24]
 8006174:	9107      	str	r1, [sp, #28]
 8006176:	9104      	str	r1, [sp, #16]
 8006178:	4808      	ldr	r0, [pc, #32]	@ (800619c <siprintf+0x38>)
 800617a:	4909      	ldr	r1, [pc, #36]	@ (80061a0 <siprintf+0x3c>)
 800617c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006180:	9105      	str	r1, [sp, #20]
 8006182:	6800      	ldr	r0, [r0, #0]
 8006184:	a902      	add	r1, sp, #8
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	f000 f9a8 	bl	80064dc <_svfiprintf_r>
 800618c:	2200      	movs	r2, #0
 800618e:	9b02      	ldr	r3, [sp, #8]
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	b01c      	add	sp, #112	@ 0x70
 8006194:	f85d eb04 	ldr.w	lr, [sp], #4
 8006198:	b003      	add	sp, #12
 800619a:	4770      	bx	lr
 800619c:	200000dc 	.word	0x200000dc
 80061a0:	ffff0208 	.word	0xffff0208

080061a4 <memset>:
 80061a4:	4603      	mov	r3, r0
 80061a6:	4402      	add	r2, r0
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d100      	bne.n	80061ae <memset+0xa>
 80061ac:	4770      	bx	lr
 80061ae:	f803 1b01 	strb.w	r1, [r3], #1
 80061b2:	e7f9      	b.n	80061a8 <memset+0x4>

080061b4 <__errno>:
 80061b4:	4b01      	ldr	r3, [pc, #4]	@ (80061bc <__errno+0x8>)
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	200000dc 	.word	0x200000dc

080061c0 <__libc_init_array>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	2600      	movs	r6, #0
 80061c4:	4d0c      	ldr	r5, [pc, #48]	@ (80061f8 <__libc_init_array+0x38>)
 80061c6:	4c0d      	ldr	r4, [pc, #52]	@ (80061fc <__libc_init_array+0x3c>)
 80061c8:	1b64      	subs	r4, r4, r5
 80061ca:	10a4      	asrs	r4, r4, #2
 80061cc:	42a6      	cmp	r6, r4
 80061ce:	d109      	bne.n	80061e4 <__libc_init_array+0x24>
 80061d0:	f000 fc80 	bl	8006ad4 <_init>
 80061d4:	2600      	movs	r6, #0
 80061d6:	4d0a      	ldr	r5, [pc, #40]	@ (8006200 <__libc_init_array+0x40>)
 80061d8:	4c0a      	ldr	r4, [pc, #40]	@ (8006204 <__libc_init_array+0x44>)
 80061da:	1b64      	subs	r4, r4, r5
 80061dc:	10a4      	asrs	r4, r4, #2
 80061de:	42a6      	cmp	r6, r4
 80061e0:	d105      	bne.n	80061ee <__libc_init_array+0x2e>
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e8:	4798      	blx	r3
 80061ea:	3601      	adds	r6, #1
 80061ec:	e7ee      	b.n	80061cc <__libc_init_array+0xc>
 80061ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f2:	4798      	blx	r3
 80061f4:	3601      	adds	r6, #1
 80061f6:	e7f2      	b.n	80061de <__libc_init_array+0x1e>
 80061f8:	08008088 	.word	0x08008088
 80061fc:	08008088 	.word	0x08008088
 8006200:	08008088 	.word	0x08008088
 8006204:	0800808c 	.word	0x0800808c

08006208 <__retarget_lock_acquire_recursive>:
 8006208:	4770      	bx	lr

0800620a <__retarget_lock_release_recursive>:
 800620a:	4770      	bx	lr

0800620c <strcpy>:
 800620c:	4603      	mov	r3, r0
 800620e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006212:	f803 2b01 	strb.w	r2, [r3], #1
 8006216:	2a00      	cmp	r2, #0
 8006218:	d1f9      	bne.n	800620e <strcpy+0x2>
 800621a:	4770      	bx	lr

0800621c <memcpy>:
 800621c:	440a      	add	r2, r1
 800621e:	4291      	cmp	r1, r2
 8006220:	f100 33ff 	add.w	r3, r0, #4294967295
 8006224:	d100      	bne.n	8006228 <memcpy+0xc>
 8006226:	4770      	bx	lr
 8006228:	b510      	push	{r4, lr}
 800622a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800622e:	4291      	cmp	r1, r2
 8006230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006234:	d1f9      	bne.n	800622a <memcpy+0xe>
 8006236:	bd10      	pop	{r4, pc}

08006238 <_free_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4605      	mov	r5, r0
 800623c:	2900      	cmp	r1, #0
 800623e:	d040      	beq.n	80062c2 <_free_r+0x8a>
 8006240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006244:	1f0c      	subs	r4, r1, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	bfb8      	it	lt
 800624a:	18e4      	addlt	r4, r4, r3
 800624c:	f000 f8de 	bl	800640c <__malloc_lock>
 8006250:	4a1c      	ldr	r2, [pc, #112]	@ (80062c4 <_free_r+0x8c>)
 8006252:	6813      	ldr	r3, [r2, #0]
 8006254:	b933      	cbnz	r3, 8006264 <_free_r+0x2c>
 8006256:	6063      	str	r3, [r4, #4]
 8006258:	6014      	str	r4, [r2, #0]
 800625a:	4628      	mov	r0, r5
 800625c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006260:	f000 b8da 	b.w	8006418 <__malloc_unlock>
 8006264:	42a3      	cmp	r3, r4
 8006266:	d908      	bls.n	800627a <_free_r+0x42>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	1821      	adds	r1, r4, r0
 800626c:	428b      	cmp	r3, r1
 800626e:	bf01      	itttt	eq
 8006270:	6819      	ldreq	r1, [r3, #0]
 8006272:	685b      	ldreq	r3, [r3, #4]
 8006274:	1809      	addeq	r1, r1, r0
 8006276:	6021      	streq	r1, [r4, #0]
 8006278:	e7ed      	b.n	8006256 <_free_r+0x1e>
 800627a:	461a      	mov	r2, r3
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	b10b      	cbz	r3, 8006284 <_free_r+0x4c>
 8006280:	42a3      	cmp	r3, r4
 8006282:	d9fa      	bls.n	800627a <_free_r+0x42>
 8006284:	6811      	ldr	r1, [r2, #0]
 8006286:	1850      	adds	r0, r2, r1
 8006288:	42a0      	cmp	r0, r4
 800628a:	d10b      	bne.n	80062a4 <_free_r+0x6c>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	4401      	add	r1, r0
 8006290:	1850      	adds	r0, r2, r1
 8006292:	4283      	cmp	r3, r0
 8006294:	6011      	str	r1, [r2, #0]
 8006296:	d1e0      	bne.n	800625a <_free_r+0x22>
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	4408      	add	r0, r1
 800629e:	6010      	str	r0, [r2, #0]
 80062a0:	6053      	str	r3, [r2, #4]
 80062a2:	e7da      	b.n	800625a <_free_r+0x22>
 80062a4:	d902      	bls.n	80062ac <_free_r+0x74>
 80062a6:	230c      	movs	r3, #12
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	e7d6      	b.n	800625a <_free_r+0x22>
 80062ac:	6820      	ldr	r0, [r4, #0]
 80062ae:	1821      	adds	r1, r4, r0
 80062b0:	428b      	cmp	r3, r1
 80062b2:	bf01      	itttt	eq
 80062b4:	6819      	ldreq	r1, [r3, #0]
 80062b6:	685b      	ldreq	r3, [r3, #4]
 80062b8:	1809      	addeq	r1, r1, r0
 80062ba:	6021      	streq	r1, [r4, #0]
 80062bc:	6063      	str	r3, [r4, #4]
 80062be:	6054      	str	r4, [r2, #4]
 80062c0:	e7cb      	b.n	800625a <_free_r+0x22>
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	20000590 	.word	0x20000590

080062c8 <sbrk_aligned>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4e0f      	ldr	r6, [pc, #60]	@ (8006308 <sbrk_aligned+0x40>)
 80062cc:	460c      	mov	r4, r1
 80062ce:	6831      	ldr	r1, [r6, #0]
 80062d0:	4605      	mov	r5, r0
 80062d2:	b911      	cbnz	r1, 80062da <sbrk_aligned+0x12>
 80062d4:	f000 fbaa 	bl	8006a2c <_sbrk_r>
 80062d8:	6030      	str	r0, [r6, #0]
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 fba5 	bl	8006a2c <_sbrk_r>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d103      	bne.n	80062ee <sbrk_aligned+0x26>
 80062e6:	f04f 34ff 	mov.w	r4, #4294967295
 80062ea:	4620      	mov	r0, r4
 80062ec:	bd70      	pop	{r4, r5, r6, pc}
 80062ee:	1cc4      	adds	r4, r0, #3
 80062f0:	f024 0403 	bic.w	r4, r4, #3
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d0f8      	beq.n	80062ea <sbrk_aligned+0x22>
 80062f8:	1a21      	subs	r1, r4, r0
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 fb96 	bl	8006a2c <_sbrk_r>
 8006300:	3001      	adds	r0, #1
 8006302:	d1f2      	bne.n	80062ea <sbrk_aligned+0x22>
 8006304:	e7ef      	b.n	80062e6 <sbrk_aligned+0x1e>
 8006306:	bf00      	nop
 8006308:	2000058c 	.word	0x2000058c

0800630c <_malloc_r>:
 800630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006310:	1ccd      	adds	r5, r1, #3
 8006312:	f025 0503 	bic.w	r5, r5, #3
 8006316:	3508      	adds	r5, #8
 8006318:	2d0c      	cmp	r5, #12
 800631a:	bf38      	it	cc
 800631c:	250c      	movcc	r5, #12
 800631e:	2d00      	cmp	r5, #0
 8006320:	4606      	mov	r6, r0
 8006322:	db01      	blt.n	8006328 <_malloc_r+0x1c>
 8006324:	42a9      	cmp	r1, r5
 8006326:	d904      	bls.n	8006332 <_malloc_r+0x26>
 8006328:	230c      	movs	r3, #12
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	2000      	movs	r0, #0
 800632e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006408 <_malloc_r+0xfc>
 8006336:	f000 f869 	bl	800640c <__malloc_lock>
 800633a:	f8d8 3000 	ldr.w	r3, [r8]
 800633e:	461c      	mov	r4, r3
 8006340:	bb44      	cbnz	r4, 8006394 <_malloc_r+0x88>
 8006342:	4629      	mov	r1, r5
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff ffbf 	bl	80062c8 <sbrk_aligned>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	4604      	mov	r4, r0
 800634e:	d158      	bne.n	8006402 <_malloc_r+0xf6>
 8006350:	f8d8 4000 	ldr.w	r4, [r8]
 8006354:	4627      	mov	r7, r4
 8006356:	2f00      	cmp	r7, #0
 8006358:	d143      	bne.n	80063e2 <_malloc_r+0xd6>
 800635a:	2c00      	cmp	r4, #0
 800635c:	d04b      	beq.n	80063f6 <_malloc_r+0xea>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	eb04 0903 	add.w	r9, r4, r3
 8006368:	f000 fb60 	bl	8006a2c <_sbrk_r>
 800636c:	4581      	cmp	r9, r0
 800636e:	d142      	bne.n	80063f6 <_malloc_r+0xea>
 8006370:	6821      	ldr	r1, [r4, #0]
 8006372:	4630      	mov	r0, r6
 8006374:	1a6d      	subs	r5, r5, r1
 8006376:	4629      	mov	r1, r5
 8006378:	f7ff ffa6 	bl	80062c8 <sbrk_aligned>
 800637c:	3001      	adds	r0, #1
 800637e:	d03a      	beq.n	80063f6 <_malloc_r+0xea>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	442b      	add	r3, r5
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	f8d8 3000 	ldr.w	r3, [r8]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	bb62      	cbnz	r2, 80063e8 <_malloc_r+0xdc>
 800638e:	f8c8 7000 	str.w	r7, [r8]
 8006392:	e00f      	b.n	80063b4 <_malloc_r+0xa8>
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	1b52      	subs	r2, r2, r5
 8006398:	d420      	bmi.n	80063dc <_malloc_r+0xd0>
 800639a:	2a0b      	cmp	r2, #11
 800639c:	d917      	bls.n	80063ce <_malloc_r+0xc2>
 800639e:	1961      	adds	r1, r4, r5
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	6025      	str	r5, [r4, #0]
 80063a4:	bf18      	it	ne
 80063a6:	6059      	strne	r1, [r3, #4]
 80063a8:	6863      	ldr	r3, [r4, #4]
 80063aa:	bf08      	it	eq
 80063ac:	f8c8 1000 	streq.w	r1, [r8]
 80063b0:	5162      	str	r2, [r4, r5]
 80063b2:	604b      	str	r3, [r1, #4]
 80063b4:	4630      	mov	r0, r6
 80063b6:	f000 f82f 	bl	8006418 <__malloc_unlock>
 80063ba:	f104 000b 	add.w	r0, r4, #11
 80063be:	1d23      	adds	r3, r4, #4
 80063c0:	f020 0007 	bic.w	r0, r0, #7
 80063c4:	1ac2      	subs	r2, r0, r3
 80063c6:	bf1c      	itt	ne
 80063c8:	1a1b      	subne	r3, r3, r0
 80063ca:	50a3      	strne	r3, [r4, r2]
 80063cc:	e7af      	b.n	800632e <_malloc_r+0x22>
 80063ce:	6862      	ldr	r2, [r4, #4]
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	bf0c      	ite	eq
 80063d4:	f8c8 2000 	streq.w	r2, [r8]
 80063d8:	605a      	strne	r2, [r3, #4]
 80063da:	e7eb      	b.n	80063b4 <_malloc_r+0xa8>
 80063dc:	4623      	mov	r3, r4
 80063de:	6864      	ldr	r4, [r4, #4]
 80063e0:	e7ae      	b.n	8006340 <_malloc_r+0x34>
 80063e2:	463c      	mov	r4, r7
 80063e4:	687f      	ldr	r7, [r7, #4]
 80063e6:	e7b6      	b.n	8006356 <_malloc_r+0x4a>
 80063e8:	461a      	mov	r2, r3
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	d1fb      	bne.n	80063e8 <_malloc_r+0xdc>
 80063f0:	2300      	movs	r3, #0
 80063f2:	6053      	str	r3, [r2, #4]
 80063f4:	e7de      	b.n	80063b4 <_malloc_r+0xa8>
 80063f6:	230c      	movs	r3, #12
 80063f8:	4630      	mov	r0, r6
 80063fa:	6033      	str	r3, [r6, #0]
 80063fc:	f000 f80c 	bl	8006418 <__malloc_unlock>
 8006400:	e794      	b.n	800632c <_malloc_r+0x20>
 8006402:	6005      	str	r5, [r0, #0]
 8006404:	e7d6      	b.n	80063b4 <_malloc_r+0xa8>
 8006406:	bf00      	nop
 8006408:	20000590 	.word	0x20000590

0800640c <__malloc_lock>:
 800640c:	4801      	ldr	r0, [pc, #4]	@ (8006414 <__malloc_lock+0x8>)
 800640e:	f7ff befb 	b.w	8006208 <__retarget_lock_acquire_recursive>
 8006412:	bf00      	nop
 8006414:	20000588 	.word	0x20000588

08006418 <__malloc_unlock>:
 8006418:	4801      	ldr	r0, [pc, #4]	@ (8006420 <__malloc_unlock+0x8>)
 800641a:	f7ff bef6 	b.w	800620a <__retarget_lock_release_recursive>
 800641e:	bf00      	nop
 8006420:	20000588 	.word	0x20000588

08006424 <__ssputs_r>:
 8006424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	461f      	mov	r7, r3
 800642a:	688e      	ldr	r6, [r1, #8]
 800642c:	4682      	mov	sl, r0
 800642e:	42be      	cmp	r6, r7
 8006430:	460c      	mov	r4, r1
 8006432:	4690      	mov	r8, r2
 8006434:	680b      	ldr	r3, [r1, #0]
 8006436:	d82d      	bhi.n	8006494 <__ssputs_r+0x70>
 8006438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800643c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006440:	d026      	beq.n	8006490 <__ssputs_r+0x6c>
 8006442:	6965      	ldr	r5, [r4, #20]
 8006444:	6909      	ldr	r1, [r1, #16]
 8006446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800644a:	eba3 0901 	sub.w	r9, r3, r1
 800644e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006452:	1c7b      	adds	r3, r7, #1
 8006454:	444b      	add	r3, r9
 8006456:	106d      	asrs	r5, r5, #1
 8006458:	429d      	cmp	r5, r3
 800645a:	bf38      	it	cc
 800645c:	461d      	movcc	r5, r3
 800645e:	0553      	lsls	r3, r2, #21
 8006460:	d527      	bpl.n	80064b2 <__ssputs_r+0x8e>
 8006462:	4629      	mov	r1, r5
 8006464:	f7ff ff52 	bl	800630c <_malloc_r>
 8006468:	4606      	mov	r6, r0
 800646a:	b360      	cbz	r0, 80064c6 <__ssputs_r+0xa2>
 800646c:	464a      	mov	r2, r9
 800646e:	6921      	ldr	r1, [r4, #16]
 8006470:	f7ff fed4 	bl	800621c <memcpy>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800647a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800647e:	81a3      	strh	r3, [r4, #12]
 8006480:	6126      	str	r6, [r4, #16]
 8006482:	444e      	add	r6, r9
 8006484:	6026      	str	r6, [r4, #0]
 8006486:	463e      	mov	r6, r7
 8006488:	6165      	str	r5, [r4, #20]
 800648a:	eba5 0509 	sub.w	r5, r5, r9
 800648e:	60a5      	str	r5, [r4, #8]
 8006490:	42be      	cmp	r6, r7
 8006492:	d900      	bls.n	8006496 <__ssputs_r+0x72>
 8006494:	463e      	mov	r6, r7
 8006496:	4632      	mov	r2, r6
 8006498:	4641      	mov	r1, r8
 800649a:	6820      	ldr	r0, [r4, #0]
 800649c:	f000 faac 	bl	80069f8 <memmove>
 80064a0:	2000      	movs	r0, #0
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	1b9b      	subs	r3, r3, r6
 80064a6:	60a3      	str	r3, [r4, #8]
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	4433      	add	r3, r6
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	462a      	mov	r2, r5
 80064b4:	f000 fad8 	bl	8006a68 <_realloc_r>
 80064b8:	4606      	mov	r6, r0
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d1e0      	bne.n	8006480 <__ssputs_r+0x5c>
 80064be:	4650      	mov	r0, sl
 80064c0:	6921      	ldr	r1, [r4, #16]
 80064c2:	f7ff feb9 	bl	8006238 <_free_r>
 80064c6:	230c      	movs	r3, #12
 80064c8:	f8ca 3000 	str.w	r3, [sl]
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	e7e9      	b.n	80064ae <__ssputs_r+0x8a>
	...

080064dc <_svfiprintf_r>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	4698      	mov	r8, r3
 80064e2:	898b      	ldrh	r3, [r1, #12]
 80064e4:	4607      	mov	r7, r0
 80064e6:	061b      	lsls	r3, r3, #24
 80064e8:	460d      	mov	r5, r1
 80064ea:	4614      	mov	r4, r2
 80064ec:	b09d      	sub	sp, #116	@ 0x74
 80064ee:	d510      	bpl.n	8006512 <_svfiprintf_r+0x36>
 80064f0:	690b      	ldr	r3, [r1, #16]
 80064f2:	b973      	cbnz	r3, 8006512 <_svfiprintf_r+0x36>
 80064f4:	2140      	movs	r1, #64	@ 0x40
 80064f6:	f7ff ff09 	bl	800630c <_malloc_r>
 80064fa:	6028      	str	r0, [r5, #0]
 80064fc:	6128      	str	r0, [r5, #16]
 80064fe:	b930      	cbnz	r0, 800650e <_svfiprintf_r+0x32>
 8006500:	230c      	movs	r3, #12
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	b01d      	add	sp, #116	@ 0x74
 800650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650e:	2340      	movs	r3, #64	@ 0x40
 8006510:	616b      	str	r3, [r5, #20]
 8006512:	2300      	movs	r3, #0
 8006514:	9309      	str	r3, [sp, #36]	@ 0x24
 8006516:	2320      	movs	r3, #32
 8006518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800651c:	2330      	movs	r3, #48	@ 0x30
 800651e:	f04f 0901 	mov.w	r9, #1
 8006522:	f8cd 800c 	str.w	r8, [sp, #12]
 8006526:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80066c0 <_svfiprintf_r+0x1e4>
 800652a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800652e:	4623      	mov	r3, r4
 8006530:	469a      	mov	sl, r3
 8006532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006536:	b10a      	cbz	r2, 800653c <_svfiprintf_r+0x60>
 8006538:	2a25      	cmp	r2, #37	@ 0x25
 800653a:	d1f9      	bne.n	8006530 <_svfiprintf_r+0x54>
 800653c:	ebba 0b04 	subs.w	fp, sl, r4
 8006540:	d00b      	beq.n	800655a <_svfiprintf_r+0x7e>
 8006542:	465b      	mov	r3, fp
 8006544:	4622      	mov	r2, r4
 8006546:	4629      	mov	r1, r5
 8006548:	4638      	mov	r0, r7
 800654a:	f7ff ff6b 	bl	8006424 <__ssputs_r>
 800654e:	3001      	adds	r0, #1
 8006550:	f000 80a7 	beq.w	80066a2 <_svfiprintf_r+0x1c6>
 8006554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006556:	445a      	add	r2, fp
 8006558:	9209      	str	r2, [sp, #36]	@ 0x24
 800655a:	f89a 3000 	ldrb.w	r3, [sl]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 809f 	beq.w	80066a2 <_svfiprintf_r+0x1c6>
 8006564:	2300      	movs	r3, #0
 8006566:	f04f 32ff 	mov.w	r2, #4294967295
 800656a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800656e:	f10a 0a01 	add.w	sl, sl, #1
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	9307      	str	r3, [sp, #28]
 8006576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800657a:	931a      	str	r3, [sp, #104]	@ 0x68
 800657c:	4654      	mov	r4, sl
 800657e:	2205      	movs	r2, #5
 8006580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006584:	484e      	ldr	r0, [pc, #312]	@ (80066c0 <_svfiprintf_r+0x1e4>)
 8006586:	f000 fa61 	bl	8006a4c <memchr>
 800658a:	9a04      	ldr	r2, [sp, #16]
 800658c:	b9d8      	cbnz	r0, 80065c6 <_svfiprintf_r+0xea>
 800658e:	06d0      	lsls	r0, r2, #27
 8006590:	bf44      	itt	mi
 8006592:	2320      	movmi	r3, #32
 8006594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006598:	0711      	lsls	r1, r2, #28
 800659a:	bf44      	itt	mi
 800659c:	232b      	movmi	r3, #43	@ 0x2b
 800659e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065a2:	f89a 3000 	ldrb.w	r3, [sl]
 80065a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80065a8:	d015      	beq.n	80065d6 <_svfiprintf_r+0xfa>
 80065aa:	4654      	mov	r4, sl
 80065ac:	2000      	movs	r0, #0
 80065ae:	f04f 0c0a 	mov.w	ip, #10
 80065b2:	9a07      	ldr	r2, [sp, #28]
 80065b4:	4621      	mov	r1, r4
 80065b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ba:	3b30      	subs	r3, #48	@ 0x30
 80065bc:	2b09      	cmp	r3, #9
 80065be:	d94b      	bls.n	8006658 <_svfiprintf_r+0x17c>
 80065c0:	b1b0      	cbz	r0, 80065f0 <_svfiprintf_r+0x114>
 80065c2:	9207      	str	r2, [sp, #28]
 80065c4:	e014      	b.n	80065f0 <_svfiprintf_r+0x114>
 80065c6:	eba0 0308 	sub.w	r3, r0, r8
 80065ca:	fa09 f303 	lsl.w	r3, r9, r3
 80065ce:	4313      	orrs	r3, r2
 80065d0:	46a2      	mov	sl, r4
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	e7d2      	b.n	800657c <_svfiprintf_r+0xa0>
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	1d19      	adds	r1, r3, #4
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	9103      	str	r1, [sp, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bfbb      	ittet	lt
 80065e2:	425b      	neglt	r3, r3
 80065e4:	f042 0202 	orrlt.w	r2, r2, #2
 80065e8:	9307      	strge	r3, [sp, #28]
 80065ea:	9307      	strlt	r3, [sp, #28]
 80065ec:	bfb8      	it	lt
 80065ee:	9204      	strlt	r2, [sp, #16]
 80065f0:	7823      	ldrb	r3, [r4, #0]
 80065f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80065f4:	d10a      	bne.n	800660c <_svfiprintf_r+0x130>
 80065f6:	7863      	ldrb	r3, [r4, #1]
 80065f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065fa:	d132      	bne.n	8006662 <_svfiprintf_r+0x186>
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	3402      	adds	r4, #2
 8006600:	1d1a      	adds	r2, r3, #4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	9203      	str	r2, [sp, #12]
 8006606:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800660a:	9305      	str	r3, [sp, #20]
 800660c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80066c4 <_svfiprintf_r+0x1e8>
 8006610:	2203      	movs	r2, #3
 8006612:	4650      	mov	r0, sl
 8006614:	7821      	ldrb	r1, [r4, #0]
 8006616:	f000 fa19 	bl	8006a4c <memchr>
 800661a:	b138      	cbz	r0, 800662c <_svfiprintf_r+0x150>
 800661c:	2240      	movs	r2, #64	@ 0x40
 800661e:	9b04      	ldr	r3, [sp, #16]
 8006620:	eba0 000a 	sub.w	r0, r0, sl
 8006624:	4082      	lsls	r2, r0
 8006626:	4313      	orrs	r3, r2
 8006628:	3401      	adds	r4, #1
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006630:	2206      	movs	r2, #6
 8006632:	4825      	ldr	r0, [pc, #148]	@ (80066c8 <_svfiprintf_r+0x1ec>)
 8006634:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006638:	f000 fa08 	bl	8006a4c <memchr>
 800663c:	2800      	cmp	r0, #0
 800663e:	d036      	beq.n	80066ae <_svfiprintf_r+0x1d2>
 8006640:	4b22      	ldr	r3, [pc, #136]	@ (80066cc <_svfiprintf_r+0x1f0>)
 8006642:	bb1b      	cbnz	r3, 800668c <_svfiprintf_r+0x1b0>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	3307      	adds	r3, #7
 8006648:	f023 0307 	bic.w	r3, r3, #7
 800664c:	3308      	adds	r3, #8
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006652:	4433      	add	r3, r6
 8006654:	9309      	str	r3, [sp, #36]	@ 0x24
 8006656:	e76a      	b.n	800652e <_svfiprintf_r+0x52>
 8006658:	460c      	mov	r4, r1
 800665a:	2001      	movs	r0, #1
 800665c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006660:	e7a8      	b.n	80065b4 <_svfiprintf_r+0xd8>
 8006662:	2300      	movs	r3, #0
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4619      	mov	r1, r3
 800666a:	3401      	adds	r4, #1
 800666c:	9305      	str	r3, [sp, #20]
 800666e:	4620      	mov	r0, r4
 8006670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006674:	3a30      	subs	r2, #48	@ 0x30
 8006676:	2a09      	cmp	r2, #9
 8006678:	d903      	bls.n	8006682 <_svfiprintf_r+0x1a6>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0c6      	beq.n	800660c <_svfiprintf_r+0x130>
 800667e:	9105      	str	r1, [sp, #20]
 8006680:	e7c4      	b.n	800660c <_svfiprintf_r+0x130>
 8006682:	4604      	mov	r4, r0
 8006684:	2301      	movs	r3, #1
 8006686:	fb0c 2101 	mla	r1, ip, r1, r2
 800668a:	e7f0      	b.n	800666e <_svfiprintf_r+0x192>
 800668c:	ab03      	add	r3, sp, #12
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	462a      	mov	r2, r5
 8006692:	4638      	mov	r0, r7
 8006694:	4b0e      	ldr	r3, [pc, #56]	@ (80066d0 <_svfiprintf_r+0x1f4>)
 8006696:	a904      	add	r1, sp, #16
 8006698:	f3af 8000 	nop.w
 800669c:	1c42      	adds	r2, r0, #1
 800669e:	4606      	mov	r6, r0
 80066a0:	d1d6      	bne.n	8006650 <_svfiprintf_r+0x174>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	065b      	lsls	r3, r3, #25
 80066a6:	f53f af2d 	bmi.w	8006504 <_svfiprintf_r+0x28>
 80066aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066ac:	e72c      	b.n	8006508 <_svfiprintf_r+0x2c>
 80066ae:	ab03      	add	r3, sp, #12
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	462a      	mov	r2, r5
 80066b4:	4638      	mov	r0, r7
 80066b6:	4b06      	ldr	r3, [pc, #24]	@ (80066d0 <_svfiprintf_r+0x1f4>)
 80066b8:	a904      	add	r1, sp, #16
 80066ba:	f000 f87d 	bl	80067b8 <_printf_i>
 80066be:	e7ed      	b.n	800669c <_svfiprintf_r+0x1c0>
 80066c0:	08008052 	.word	0x08008052
 80066c4:	08008058 	.word	0x08008058
 80066c8:	0800805c 	.word	0x0800805c
 80066cc:	00000000 	.word	0x00000000
 80066d0:	08006425 	.word	0x08006425

080066d4 <_printf_common>:
 80066d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	4616      	mov	r6, r2
 80066da:	4698      	mov	r8, r3
 80066dc:	688a      	ldr	r2, [r1, #8]
 80066de:	690b      	ldr	r3, [r1, #16]
 80066e0:	4607      	mov	r7, r0
 80066e2:	4293      	cmp	r3, r2
 80066e4:	bfb8      	it	lt
 80066e6:	4613      	movlt	r3, r2
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066ee:	460c      	mov	r4, r1
 80066f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066f4:	b10a      	cbz	r2, 80066fa <_printf_common+0x26>
 80066f6:	3301      	adds	r3, #1
 80066f8:	6033      	str	r3, [r6, #0]
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	0699      	lsls	r1, r3, #26
 80066fe:	bf42      	ittt	mi
 8006700:	6833      	ldrmi	r3, [r6, #0]
 8006702:	3302      	addmi	r3, #2
 8006704:	6033      	strmi	r3, [r6, #0]
 8006706:	6825      	ldr	r5, [r4, #0]
 8006708:	f015 0506 	ands.w	r5, r5, #6
 800670c:	d106      	bne.n	800671c <_printf_common+0x48>
 800670e:	f104 0a19 	add.w	sl, r4, #25
 8006712:	68e3      	ldr	r3, [r4, #12]
 8006714:	6832      	ldr	r2, [r6, #0]
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	42ab      	cmp	r3, r5
 800671a:	dc2b      	bgt.n	8006774 <_printf_common+0xa0>
 800671c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	3b00      	subs	r3, #0
 8006724:	bf18      	it	ne
 8006726:	2301      	movne	r3, #1
 8006728:	0692      	lsls	r2, r2, #26
 800672a:	d430      	bmi.n	800678e <_printf_common+0xba>
 800672c:	4641      	mov	r1, r8
 800672e:	4638      	mov	r0, r7
 8006730:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006734:	47c8      	blx	r9
 8006736:	3001      	adds	r0, #1
 8006738:	d023      	beq.n	8006782 <_printf_common+0xae>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	6922      	ldr	r2, [r4, #16]
 800673e:	f003 0306 	and.w	r3, r3, #6
 8006742:	2b04      	cmp	r3, #4
 8006744:	bf14      	ite	ne
 8006746:	2500      	movne	r5, #0
 8006748:	6833      	ldreq	r3, [r6, #0]
 800674a:	f04f 0600 	mov.w	r6, #0
 800674e:	bf08      	it	eq
 8006750:	68e5      	ldreq	r5, [r4, #12]
 8006752:	f104 041a 	add.w	r4, r4, #26
 8006756:	bf08      	it	eq
 8006758:	1aed      	subeq	r5, r5, r3
 800675a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800675e:	bf08      	it	eq
 8006760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006764:	4293      	cmp	r3, r2
 8006766:	bfc4      	itt	gt
 8006768:	1a9b      	subgt	r3, r3, r2
 800676a:	18ed      	addgt	r5, r5, r3
 800676c:	42b5      	cmp	r5, r6
 800676e:	d11a      	bne.n	80067a6 <_printf_common+0xd2>
 8006770:	2000      	movs	r0, #0
 8006772:	e008      	b.n	8006786 <_printf_common+0xb2>
 8006774:	2301      	movs	r3, #1
 8006776:	4652      	mov	r2, sl
 8006778:	4641      	mov	r1, r8
 800677a:	4638      	mov	r0, r7
 800677c:	47c8      	blx	r9
 800677e:	3001      	adds	r0, #1
 8006780:	d103      	bne.n	800678a <_printf_common+0xb6>
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678a:	3501      	adds	r5, #1
 800678c:	e7c1      	b.n	8006712 <_printf_common+0x3e>
 800678e:	2030      	movs	r0, #48	@ 0x30
 8006790:	18e1      	adds	r1, r4, r3
 8006792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800679c:	4422      	add	r2, r4
 800679e:	3302      	adds	r3, #2
 80067a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067a4:	e7c2      	b.n	800672c <_printf_common+0x58>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4622      	mov	r2, r4
 80067aa:	4641      	mov	r1, r8
 80067ac:	4638      	mov	r0, r7
 80067ae:	47c8      	blx	r9
 80067b0:	3001      	adds	r0, #1
 80067b2:	d0e6      	beq.n	8006782 <_printf_common+0xae>
 80067b4:	3601      	adds	r6, #1
 80067b6:	e7d9      	b.n	800676c <_printf_common+0x98>

080067b8 <_printf_i>:
 80067b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	7e0f      	ldrb	r7, [r1, #24]
 80067be:	4691      	mov	r9, r2
 80067c0:	2f78      	cmp	r7, #120	@ 0x78
 80067c2:	4680      	mov	r8, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	469a      	mov	sl, r3
 80067c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ce:	d807      	bhi.n	80067e0 <_printf_i+0x28>
 80067d0:	2f62      	cmp	r7, #98	@ 0x62
 80067d2:	d80a      	bhi.n	80067ea <_printf_i+0x32>
 80067d4:	2f00      	cmp	r7, #0
 80067d6:	f000 80d3 	beq.w	8006980 <_printf_i+0x1c8>
 80067da:	2f58      	cmp	r7, #88	@ 0x58
 80067dc:	f000 80ba 	beq.w	8006954 <_printf_i+0x19c>
 80067e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067e8:	e03a      	b.n	8006860 <_printf_i+0xa8>
 80067ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067ee:	2b15      	cmp	r3, #21
 80067f0:	d8f6      	bhi.n	80067e0 <_printf_i+0x28>
 80067f2:	a101      	add	r1, pc, #4	@ (adr r1, 80067f8 <_printf_i+0x40>)
 80067f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006865 	.word	0x08006865
 8006800:	080067e1 	.word	0x080067e1
 8006804:	080067e1 	.word	0x080067e1
 8006808:	080067e1 	.word	0x080067e1
 800680c:	080067e1 	.word	0x080067e1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067e1 	.word	0x080067e1
 8006818:	080067e1 	.word	0x080067e1
 800681c:	080067e1 	.word	0x080067e1
 8006820:	080067e1 	.word	0x080067e1
 8006824:	08006967 	.word	0x08006967
 8006828:	0800688f 	.word	0x0800688f
 800682c:	08006921 	.word	0x08006921
 8006830:	080067e1 	.word	0x080067e1
 8006834:	080067e1 	.word	0x080067e1
 8006838:	08006989 	.word	0x08006989
 800683c:	080067e1 	.word	0x080067e1
 8006840:	0800688f 	.word	0x0800688f
 8006844:	080067e1 	.word	0x080067e1
 8006848:	080067e1 	.word	0x080067e1
 800684c:	08006929 	.word	0x08006929
 8006850:	6833      	ldr	r3, [r6, #0]
 8006852:	1d1a      	adds	r2, r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6032      	str	r2, [r6, #0]
 8006858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800685c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006860:	2301      	movs	r3, #1
 8006862:	e09e      	b.n	80069a2 <_printf_i+0x1ea>
 8006864:	6833      	ldr	r3, [r6, #0]
 8006866:	6820      	ldr	r0, [r4, #0]
 8006868:	1d19      	adds	r1, r3, #4
 800686a:	6031      	str	r1, [r6, #0]
 800686c:	0606      	lsls	r6, r0, #24
 800686e:	d501      	bpl.n	8006874 <_printf_i+0xbc>
 8006870:	681d      	ldr	r5, [r3, #0]
 8006872:	e003      	b.n	800687c <_printf_i+0xc4>
 8006874:	0645      	lsls	r5, r0, #25
 8006876:	d5fb      	bpl.n	8006870 <_printf_i+0xb8>
 8006878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800687c:	2d00      	cmp	r5, #0
 800687e:	da03      	bge.n	8006888 <_printf_i+0xd0>
 8006880:	232d      	movs	r3, #45	@ 0x2d
 8006882:	426d      	negs	r5, r5
 8006884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006888:	230a      	movs	r3, #10
 800688a:	4859      	ldr	r0, [pc, #356]	@ (80069f0 <_printf_i+0x238>)
 800688c:	e011      	b.n	80068b2 <_printf_i+0xfa>
 800688e:	6821      	ldr	r1, [r4, #0]
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	0608      	lsls	r0, r1, #24
 8006894:	f853 5b04 	ldr.w	r5, [r3], #4
 8006898:	d402      	bmi.n	80068a0 <_printf_i+0xe8>
 800689a:	0649      	lsls	r1, r1, #25
 800689c:	bf48      	it	mi
 800689e:	b2ad      	uxthmi	r5, r5
 80068a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80068a2:	6033      	str	r3, [r6, #0]
 80068a4:	bf14      	ite	ne
 80068a6:	230a      	movne	r3, #10
 80068a8:	2308      	moveq	r3, #8
 80068aa:	4851      	ldr	r0, [pc, #324]	@ (80069f0 <_printf_i+0x238>)
 80068ac:	2100      	movs	r1, #0
 80068ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068b2:	6866      	ldr	r6, [r4, #4]
 80068b4:	2e00      	cmp	r6, #0
 80068b6:	bfa8      	it	ge
 80068b8:	6821      	ldrge	r1, [r4, #0]
 80068ba:	60a6      	str	r6, [r4, #8]
 80068bc:	bfa4      	itt	ge
 80068be:	f021 0104 	bicge.w	r1, r1, #4
 80068c2:	6021      	strge	r1, [r4, #0]
 80068c4:	b90d      	cbnz	r5, 80068ca <_printf_i+0x112>
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	d04b      	beq.n	8006962 <_printf_i+0x1aa>
 80068ca:	4616      	mov	r6, r2
 80068cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80068d0:	fb03 5711 	mls	r7, r3, r1, r5
 80068d4:	5dc7      	ldrb	r7, [r0, r7]
 80068d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068da:	462f      	mov	r7, r5
 80068dc:	42bb      	cmp	r3, r7
 80068de:	460d      	mov	r5, r1
 80068e0:	d9f4      	bls.n	80068cc <_printf_i+0x114>
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d10b      	bne.n	80068fe <_printf_i+0x146>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	07df      	lsls	r7, r3, #31
 80068ea:	d508      	bpl.n	80068fe <_printf_i+0x146>
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	6861      	ldr	r1, [r4, #4]
 80068f0:	4299      	cmp	r1, r3
 80068f2:	bfde      	ittt	le
 80068f4:	2330      	movle	r3, #48	@ 0x30
 80068f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068fe:	1b92      	subs	r2, r2, r6
 8006900:	6122      	str	r2, [r4, #16]
 8006902:	464b      	mov	r3, r9
 8006904:	4621      	mov	r1, r4
 8006906:	4640      	mov	r0, r8
 8006908:	f8cd a000 	str.w	sl, [sp]
 800690c:	aa03      	add	r2, sp, #12
 800690e:	f7ff fee1 	bl	80066d4 <_printf_common>
 8006912:	3001      	adds	r0, #1
 8006914:	d14a      	bne.n	80069ac <_printf_i+0x1f4>
 8006916:	f04f 30ff 	mov.w	r0, #4294967295
 800691a:	b004      	add	sp, #16
 800691c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	f043 0320 	orr.w	r3, r3, #32
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	2778      	movs	r7, #120	@ 0x78
 800692a:	4832      	ldr	r0, [pc, #200]	@ (80069f4 <_printf_i+0x23c>)
 800692c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	6831      	ldr	r1, [r6, #0]
 8006934:	061f      	lsls	r7, r3, #24
 8006936:	f851 5b04 	ldr.w	r5, [r1], #4
 800693a:	d402      	bmi.n	8006942 <_printf_i+0x18a>
 800693c:	065f      	lsls	r7, r3, #25
 800693e:	bf48      	it	mi
 8006940:	b2ad      	uxthmi	r5, r5
 8006942:	6031      	str	r1, [r6, #0]
 8006944:	07d9      	lsls	r1, r3, #31
 8006946:	bf44      	itt	mi
 8006948:	f043 0320 	orrmi.w	r3, r3, #32
 800694c:	6023      	strmi	r3, [r4, #0]
 800694e:	b11d      	cbz	r5, 8006958 <_printf_i+0x1a0>
 8006950:	2310      	movs	r3, #16
 8006952:	e7ab      	b.n	80068ac <_printf_i+0xf4>
 8006954:	4826      	ldr	r0, [pc, #152]	@ (80069f0 <_printf_i+0x238>)
 8006956:	e7e9      	b.n	800692c <_printf_i+0x174>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	f023 0320 	bic.w	r3, r3, #32
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	e7f6      	b.n	8006950 <_printf_i+0x198>
 8006962:	4616      	mov	r6, r2
 8006964:	e7bd      	b.n	80068e2 <_printf_i+0x12a>
 8006966:	6833      	ldr	r3, [r6, #0]
 8006968:	6825      	ldr	r5, [r4, #0]
 800696a:	1d18      	adds	r0, r3, #4
 800696c:	6961      	ldr	r1, [r4, #20]
 800696e:	6030      	str	r0, [r6, #0]
 8006970:	062e      	lsls	r6, r5, #24
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	d501      	bpl.n	800697a <_printf_i+0x1c2>
 8006976:	6019      	str	r1, [r3, #0]
 8006978:	e002      	b.n	8006980 <_printf_i+0x1c8>
 800697a:	0668      	lsls	r0, r5, #25
 800697c:	d5fb      	bpl.n	8006976 <_printf_i+0x1be>
 800697e:	8019      	strh	r1, [r3, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	4616      	mov	r6, r2
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	e7bc      	b.n	8006902 <_printf_i+0x14a>
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	2100      	movs	r1, #0
 800698c:	1d1a      	adds	r2, r3, #4
 800698e:	6032      	str	r2, [r6, #0]
 8006990:	681e      	ldr	r6, [r3, #0]
 8006992:	6862      	ldr	r2, [r4, #4]
 8006994:	4630      	mov	r0, r6
 8006996:	f000 f859 	bl	8006a4c <memchr>
 800699a:	b108      	cbz	r0, 80069a0 <_printf_i+0x1e8>
 800699c:	1b80      	subs	r0, r0, r6
 800699e:	6060      	str	r0, [r4, #4]
 80069a0:	6863      	ldr	r3, [r4, #4]
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	2300      	movs	r3, #0
 80069a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069aa:	e7aa      	b.n	8006902 <_printf_i+0x14a>
 80069ac:	4632      	mov	r2, r6
 80069ae:	4649      	mov	r1, r9
 80069b0:	4640      	mov	r0, r8
 80069b2:	6923      	ldr	r3, [r4, #16]
 80069b4:	47d0      	blx	sl
 80069b6:	3001      	adds	r0, #1
 80069b8:	d0ad      	beq.n	8006916 <_printf_i+0x15e>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	079b      	lsls	r3, r3, #30
 80069be:	d413      	bmi.n	80069e8 <_printf_i+0x230>
 80069c0:	68e0      	ldr	r0, [r4, #12]
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	4298      	cmp	r0, r3
 80069c6:	bfb8      	it	lt
 80069c8:	4618      	movlt	r0, r3
 80069ca:	e7a6      	b.n	800691a <_printf_i+0x162>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4632      	mov	r2, r6
 80069d0:	4649      	mov	r1, r9
 80069d2:	4640      	mov	r0, r8
 80069d4:	47d0      	blx	sl
 80069d6:	3001      	adds	r0, #1
 80069d8:	d09d      	beq.n	8006916 <_printf_i+0x15e>
 80069da:	3501      	adds	r5, #1
 80069dc:	68e3      	ldr	r3, [r4, #12]
 80069de:	9903      	ldr	r1, [sp, #12]
 80069e0:	1a5b      	subs	r3, r3, r1
 80069e2:	42ab      	cmp	r3, r5
 80069e4:	dcf2      	bgt.n	80069cc <_printf_i+0x214>
 80069e6:	e7eb      	b.n	80069c0 <_printf_i+0x208>
 80069e8:	2500      	movs	r5, #0
 80069ea:	f104 0619 	add.w	r6, r4, #25
 80069ee:	e7f5      	b.n	80069dc <_printf_i+0x224>
 80069f0:	08008063 	.word	0x08008063
 80069f4:	08008074 	.word	0x08008074

080069f8 <memmove>:
 80069f8:	4288      	cmp	r0, r1
 80069fa:	b510      	push	{r4, lr}
 80069fc:	eb01 0402 	add.w	r4, r1, r2
 8006a00:	d902      	bls.n	8006a08 <memmove+0x10>
 8006a02:	4284      	cmp	r4, r0
 8006a04:	4623      	mov	r3, r4
 8006a06:	d807      	bhi.n	8006a18 <memmove+0x20>
 8006a08:	1e43      	subs	r3, r0, #1
 8006a0a:	42a1      	cmp	r1, r4
 8006a0c:	d008      	beq.n	8006a20 <memmove+0x28>
 8006a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a16:	e7f8      	b.n	8006a0a <memmove+0x12>
 8006a18:	4601      	mov	r1, r0
 8006a1a:	4402      	add	r2, r0
 8006a1c:	428a      	cmp	r2, r1
 8006a1e:	d100      	bne.n	8006a22 <memmove+0x2a>
 8006a20:	bd10      	pop	{r4, pc}
 8006a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a2a:	e7f7      	b.n	8006a1c <memmove+0x24>

08006a2c <_sbrk_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	2300      	movs	r3, #0
 8006a30:	4d05      	ldr	r5, [pc, #20]	@ (8006a48 <_sbrk_r+0x1c>)
 8006a32:	4604      	mov	r4, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	f7fa ffb4 	bl	80019a4 <_sbrk>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_sbrk_r+0x1a>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_sbrk_r+0x1a>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	20000584 	.word	0x20000584

08006a4c <memchr>:
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	b2c9      	uxtb	r1, r1
 8006a52:	4402      	add	r2, r0
 8006a54:	4293      	cmp	r3, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	d101      	bne.n	8006a5e <memchr+0x12>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e003      	b.n	8006a66 <memchr+0x1a>
 8006a5e:	7804      	ldrb	r4, [r0, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	428c      	cmp	r4, r1
 8006a64:	d1f6      	bne.n	8006a54 <memchr+0x8>
 8006a66:	bd10      	pop	{r4, pc}

08006a68 <_realloc_r>:
 8006a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	4615      	mov	r5, r2
 8006a70:	460c      	mov	r4, r1
 8006a72:	b921      	cbnz	r1, 8006a7e <_realloc_r+0x16>
 8006a74:	4611      	mov	r1, r2
 8006a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7a:	f7ff bc47 	b.w	800630c <_malloc_r>
 8006a7e:	b92a      	cbnz	r2, 8006a8c <_realloc_r+0x24>
 8006a80:	f7ff fbda 	bl	8006238 <_free_r>
 8006a84:	2400      	movs	r4, #0
 8006a86:	4620      	mov	r0, r4
 8006a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a8c:	f000 f81a 	bl	8006ac4 <_malloc_usable_size_r>
 8006a90:	4285      	cmp	r5, r0
 8006a92:	4606      	mov	r6, r0
 8006a94:	d802      	bhi.n	8006a9c <_realloc_r+0x34>
 8006a96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a9a:	d8f4      	bhi.n	8006a86 <_realloc_r+0x1e>
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f7ff fc34 	bl	800630c <_malloc_r>
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d0ec      	beq.n	8006a84 <_realloc_r+0x1c>
 8006aaa:	42b5      	cmp	r5, r6
 8006aac:	462a      	mov	r2, r5
 8006aae:	4621      	mov	r1, r4
 8006ab0:	bf28      	it	cs
 8006ab2:	4632      	movcs	r2, r6
 8006ab4:	f7ff fbb2 	bl	800621c <memcpy>
 8006ab8:	4621      	mov	r1, r4
 8006aba:	4640      	mov	r0, r8
 8006abc:	f7ff fbbc 	bl	8006238 <_free_r>
 8006ac0:	463c      	mov	r4, r7
 8006ac2:	e7e0      	b.n	8006a86 <_realloc_r+0x1e>

08006ac4 <_malloc_usable_size_r>:
 8006ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac8:	1f18      	subs	r0, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bfbc      	itt	lt
 8006ace:	580b      	ldrlt	r3, [r1, r0]
 8006ad0:	18c0      	addlt	r0, r0, r3
 8006ad2:	4770      	bx	lr

08006ad4 <_init>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	bf00      	nop
 8006ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ada:	bc08      	pop	{r3}
 8006adc:	469e      	mov	lr, r3
 8006ade:	4770      	bx	lr

08006ae0 <_fini>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	bf00      	nop
 8006ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	469e      	mov	lr, r3
 8006aea:	4770      	bx	lr
