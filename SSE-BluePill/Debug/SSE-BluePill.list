
SSE-BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004124  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004230  08004230  00005230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e4  080042e4  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  080042e4  080042e4  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042e4  080042e4  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042e8  080042e8  000052e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080042ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000014  08004300  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004300  0000616c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f698  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c78  00000000  00000000  000156d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00018350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4f  00000000  00000000  000194a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a04a  00000000  00000000  0001a1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163e4  00000000  00000000  00034241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2fe  00000000  00000000  0004a625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000476c  00000000  00000000  000d7968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dc0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08004218 	.word	0x08004218

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08004218 	.word	0x08004218

0800014c <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	4a13      	ldr	r2, [pc, #76]	@ (80001ac <I2C_LCD_ExpanderWrite+0x60>)
 8000160:	005b      	lsls	r3, r3, #1
 8000162:	4413      	add	r3, r2
 8000164:	785a      	ldrb	r2, [r3, #1]
 8000166:	79bb      	ldrb	r3, [r7, #6]
 8000168:	4313      	orrs	r3, r2
 800016a:	b2db      	uxtb	r3, r3
 800016c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 800016e:	79fa      	ldrb	r2, [r7, #7]
 8000170:	490f      	ldr	r1, [pc, #60]	@ (80001b0 <I2C_LCD_ExpanderWrite+0x64>)
 8000172:	4613      	mov	r3, r2
 8000174:	005b      	lsls	r3, r3, #1
 8000176:	4413      	add	r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	3304      	adds	r3, #4
 800017e:	6818      	ldr	r0, [r3, #0]
 8000180:	79fa      	ldrb	r2, [r7, #7]
 8000182:	490b      	ldr	r1, [pc, #44]	@ (80001b0 <I2C_LCD_ExpanderWrite+0x64>)
 8000184:	4613      	mov	r3, r2
 8000186:	005b      	lsls	r3, r3, #1
 8000188:	4413      	add	r3, r2
 800018a:	009b      	lsls	r3, r3, #2
 800018c:	440b      	add	r3, r1
 800018e:	3308      	adds	r3, #8
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	005b      	lsls	r3, r3, #1
 8000194:	b299      	uxth	r1, r3
 8000196:	f107 020f 	add.w	r2, r7, #15
 800019a:	2364      	movs	r3, #100	@ 0x64
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2301      	movs	r3, #1
 80001a0:	f001 fbd2 	bl	8001948 <HAL_I2C_Master_Transmit>
}
 80001a4:	bf00      	nop
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	20000030 	.word	0x20000030
 80001b0:	08004288 	.word	0x08004288

080001b4 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	460a      	mov	r2, r1
 80001be:	71fb      	strb	r3, [r7, #7]
 80001c0:	4613      	mov	r3, r2
 80001c2:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 80001c4:	79bb      	ldrb	r3, [r7, #6]
 80001c6:	f043 0304 	orr.w	r3, r3, #4
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	4611      	mov	r1, r2
 80001d0:	4618      	mov	r0, r3
 80001d2:	f7ff ffbb 	bl	800014c <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 80001d6:	4b22      	ldr	r3, [pc, #136]	@ (8000260 <I2C_LCD_EnPulse+0xac>)
 80001d8:	689b      	ldr	r3, [r3, #8]
 80001da:	617b      	str	r3, [r7, #20]
 80001dc:	4b21      	ldr	r3, [pc, #132]	@ (8000264 <I2C_LCD_EnPulse+0xb0>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a21      	ldr	r2, [pc, #132]	@ (8000268 <I2C_LCD_EnPulse+0xb4>)
 80001e2:	fba2 2303 	umull	r2, r3, r2, r3
 80001e6:	0c9b      	lsrs	r3, r3, #18
 80001e8:	005a      	lsls	r2, r3, #1
 80001ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000264 <I2C_LCD_EnPulse+0xb0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	491e      	ldr	r1, [pc, #120]	@ (8000268 <I2C_LCD_EnPulse+0xb4>)
 80001f0:	fba1 1303 	umull	r1, r3, r1, r3
 80001f4:	0c9b      	lsrs	r3, r3, #18
 80001f6:	085b      	lsrs	r3, r3, #1
 80001f8:	1ad3      	subs	r3, r2, r3
 80001fa:	613b      	str	r3, [r7, #16]
 80001fc:	4b18      	ldr	r3, [pc, #96]	@ (8000260 <I2C_LCD_EnPulse+0xac>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	697a      	ldr	r2, [r7, #20]
 8000202:	1ad3      	subs	r3, r2, r3
 8000204:	693a      	ldr	r2, [r7, #16]
 8000206:	429a      	cmp	r2, r3
 8000208:	d8f8      	bhi.n	80001fc <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800020a:	79bb      	ldrb	r3, [r7, #6]
 800020c:	f023 0304 	bic.w	r3, r3, #4
 8000210:	b2da      	uxtb	r2, r3
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	4611      	mov	r1, r2
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ff98 	bl	800014c <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 800021c:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <I2C_LCD_EnPulse+0xac>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	4b10      	ldr	r3, [pc, #64]	@ (8000264 <I2C_LCD_EnPulse+0xb0>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a10      	ldr	r2, [pc, #64]	@ (8000268 <I2C_LCD_EnPulse+0xb4>)
 8000228:	fba2 2303 	umull	r2, r3, r2, r3
 800022c:	0c9b      	lsrs	r3, r3, #18
 800022e:	2232      	movs	r2, #50	@ 0x32
 8000230:	fb03 f202 	mul.w	r2, r3, r2
 8000234:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <I2C_LCD_EnPulse+0xb0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	490b      	ldr	r1, [pc, #44]	@ (8000268 <I2C_LCD_EnPulse+0xb4>)
 800023a:	fba1 1303 	umull	r1, r3, r1, r3
 800023e:	0c9b      	lsrs	r3, r3, #18
 8000240:	085b      	lsrs	r3, r3, #1
 8000242:	1ad3      	subs	r3, r2, r3
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <I2C_LCD_EnPulse+0xac>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	1ad3      	subs	r3, r2, r3
 800024e:	68ba      	ldr	r2, [r7, #8]
 8000250:	429a      	cmp	r2, r3
 8000252:	d8f8      	bhi.n	8000246 <I2C_LCD_EnPulse+0x92>
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	3718      	adds	r7, #24
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	e000e010 	.word	0xe000e010
 8000264:	20000008 	.word	0x20000008
 8000268:	431bde83 	.word	0x431bde83

0800026c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	460a      	mov	r2, r1
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4611      	mov	r1, r2
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ff62 	bl	800014c <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8000288:	79ba      	ldrb	r2, [r7, #6]
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4611      	mov	r1, r2
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ff90 	bl	80001b4 <I2C_LCD_EnPulse>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
 80002a6:	460b      	mov	r3, r1
 80002a8:	71bb      	strb	r3, [r7, #6]
 80002aa:	4613      	mov	r3, r2
 80002ac:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	f023 030f 	bic.w	r3, r3, #15
 80002b4:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 80002bc:	7bfa      	ldrb	r2, [r7, #15]
 80002be:	797b      	ldrb	r3, [r7, #5]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	4611      	mov	r1, r2
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ffcf 	bl	800026c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 80002ce:	7bba      	ldrb	r2, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	4313      	orrs	r3, r2
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	4611      	mov	r1, r2
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ffc6 	bl	800026c <I2C_LCD_Write4Bits>
}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	460a      	mov	r2, r1
 80002f2:	71fb      	strb	r3, [r7, #7]
 80002f4:	4613      	mov	r3, r2
 80002f6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80002f8:	79b9      	ldrb	r1, [r7, #6]
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2200      	movs	r2, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffcc 	bl	800029c <I2C_LCD_Send>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 800031c:	79b9      	ldrb	r1, [r7, #6]
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2201      	movs	r2, #1
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ffba 	bl	800029c <I2C_LCD_Send>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	@ 0x28
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800033a:	bf00      	nop
 800033c:	f000 feb6 	bl	80010ac <HAL_GetTick>
 8000340:	4603      	mov	r3, r0
 8000342:	2b31      	cmp	r3, #49	@ 0x31
 8000344:	d9fa      	bls.n	800033c <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2130      	movs	r1, #48	@ 0x30
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ffcc 	bl	80002e8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000350:	2300      	movs	r3, #0
 8000352:	627b      	str	r3, [r7, #36]	@ 0x24
 8000354:	e01f      	b.n	8000396 <I2C_LCD_Init+0x66>
 8000356:	4b4b      	ldr	r3, [pc, #300]	@ (8000484 <I2C_LCD_Init+0x154>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	4b4a      	ldr	r3, [pc, #296]	@ (8000488 <I2C_LCD_Init+0x158>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a4a      	ldr	r2, [pc, #296]	@ (800048c <I2C_LCD_Init+0x15c>)
 8000362:	fba2 2303 	umull	r2, r3, r2, r3
 8000366:	0c9b      	lsrs	r3, r3, #18
 8000368:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800036c:	fb03 f202 	mul.w	r2, r3, r2
 8000370:	4b45      	ldr	r3, [pc, #276]	@ (8000488 <I2C_LCD_Init+0x158>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4945      	ldr	r1, [pc, #276]	@ (800048c <I2C_LCD_Init+0x15c>)
 8000376:	fba1 1303 	umull	r1, r3, r1, r3
 800037a:	0c9b      	lsrs	r3, r3, #18
 800037c:	085b      	lsrs	r3, r3, #1
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	4b40      	ldr	r3, [pc, #256]	@ (8000484 <I2C_LCD_Init+0x154>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	429a      	cmp	r2, r3
 800038e:	d8f8      	bhi.n	8000382 <I2C_LCD_Init+0x52>
 8000390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000392:	3301      	adds	r3, #1
 8000394:	627b      	str	r3, [r7, #36]	@ 0x24
 8000396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000398:	2b04      	cmp	r3, #4
 800039a:	d9dc      	bls.n	8000356 <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	2130      	movs	r1, #48	@ 0x30
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ffa1 	bl	80002e8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80003a6:	2300      	movs	r3, #0
 80003a8:	623b      	str	r3, [r7, #32]
 80003aa:	e01f      	b.n	80003ec <I2C_LCD_Init+0xbc>
 80003ac:	4b35      	ldr	r3, [pc, #212]	@ (8000484 <I2C_LCD_Init+0x154>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	4b35      	ldr	r3, [pc, #212]	@ (8000488 <I2C_LCD_Init+0x158>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a35      	ldr	r2, [pc, #212]	@ (800048c <I2C_LCD_Init+0x15c>)
 80003b8:	fba2 2303 	umull	r2, r3, r2, r3
 80003bc:	0c9b      	lsrs	r3, r3, #18
 80003be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003c2:	fb03 f202 	mul.w	r2, r3, r2
 80003c6:	4b30      	ldr	r3, [pc, #192]	@ (8000488 <I2C_LCD_Init+0x158>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4930      	ldr	r1, [pc, #192]	@ (800048c <I2C_LCD_Init+0x15c>)
 80003cc:	fba1 1303 	umull	r1, r3, r1, r3
 80003d0:	0c9b      	lsrs	r3, r3, #18
 80003d2:	085b      	lsrs	r3, r3, #1
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	613b      	str	r3, [r7, #16]
 80003d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000484 <I2C_LCD_Init+0x154>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	1ad3      	subs	r3, r2, r3
 80003e0:	693a      	ldr	r2, [r7, #16]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d8f8      	bhi.n	80003d8 <I2C_LCD_Init+0xa8>
 80003e6:	6a3b      	ldr	r3, [r7, #32]
 80003e8:	3301      	adds	r3, #1
 80003ea:	623b      	str	r3, [r7, #32]
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d9dc      	bls.n	80003ac <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2130      	movs	r1, #48	@ 0x30
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff76 	bl	80002e8 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80003fc:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <I2C_LCD_Init+0x154>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	61fb      	str	r3, [r7, #28]
 8000402:	4b21      	ldr	r3, [pc, #132]	@ (8000488 <I2C_LCD_Init+0x158>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a21      	ldr	r2, [pc, #132]	@ (800048c <I2C_LCD_Init+0x15c>)
 8000408:	fba2 2303 	umull	r2, r3, r2, r3
 800040c:	0c9b      	lsrs	r3, r3, #18
 800040e:	2296      	movs	r2, #150	@ 0x96
 8000410:	fb03 f202 	mul.w	r2, r3, r2
 8000414:	4b1c      	ldr	r3, [pc, #112]	@ (8000488 <I2C_LCD_Init+0x158>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	491c      	ldr	r1, [pc, #112]	@ (800048c <I2C_LCD_Init+0x15c>)
 800041a:	fba1 1303 	umull	r1, r3, r1, r3
 800041e:	0c9b      	lsrs	r3, r3, #18
 8000420:	085b      	lsrs	r3, r3, #1
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	61bb      	str	r3, [r7, #24]
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <I2C_LCD_Init+0x154>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	69fa      	ldr	r2, [r7, #28]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	69ba      	ldr	r2, [r7, #24]
 8000430:	429a      	cmp	r2, r3
 8000432:	d8f8      	bhi.n	8000426 <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2102      	movs	r1, #2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff55 	bl	80002e8 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2128      	movs	r1, #40	@ 0x28
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff50 	bl	80002e8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	210c      	movs	r1, #12
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff4b 	bl	80002e8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2106      	movs	r1, #6
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff46 	bl	80002e8 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	4a0c      	ldr	r2, [pc, #48]	@ (8000490 <I2C_LCD_Init+0x160>)
 8000460:	2104      	movs	r1, #4
 8000462:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	4a09      	ldr	r2, [pc, #36]	@ (8000490 <I2C_LCD_Init+0x160>)
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	4413      	add	r3, r2
 800046e:	2208      	movs	r2, #8
 8000470:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f80d 	bl	8000494 <I2C_LCD_Clear>
}
 800047a:	bf00      	nop
 800047c:	3728      	adds	r7, #40	@ 0x28
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	e000e010 	.word	0xe000e010
 8000488:	20000008 	.word	0x20000008
 800048c:	431bde83 	.word	0x431bde83
 8000490:	20000030 	.word	0x20000030

08000494 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2101      	movs	r1, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff20 	bl	80002e8 <I2C_LCD_Cmd>
    DELAY_MS(5);
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e01f      	b.n	80004ee <I2C_LCD_Clear+0x5a>
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <I2C_LCD_Clear+0x6c>)
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <I2C_LCD_Clear+0x70>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a13      	ldr	r2, [pc, #76]	@ (8000508 <I2C_LCD_Clear+0x74>)
 80004ba:	fba2 2303 	umull	r2, r3, r2, r3
 80004be:	0c9b      	lsrs	r3, r3, #18
 80004c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004c4:	fb03 f202 	mul.w	r2, r3, r2
 80004c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <I2C_LCD_Clear+0x70>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	490e      	ldr	r1, [pc, #56]	@ (8000508 <I2C_LCD_Clear+0x74>)
 80004ce:	fba1 1303 	umull	r1, r3, r1, r3
 80004d2:	0c9b      	lsrs	r3, r3, #18
 80004d4:	085b      	lsrs	r3, r3, #1
 80004d6:	1ad3      	subs	r3, r2, r3
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <I2C_LCD_Clear+0x6c>)
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	693a      	ldr	r2, [r7, #16]
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d8f8      	bhi.n	80004da <I2C_LCD_Clear+0x46>
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	3301      	adds	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d9dc      	bls.n	80004ae <I2C_LCD_Clear+0x1a>
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	e000e010 	.word	0xe000e010
 8000504:	20000008 	.word	0x20000008
 8000508:	431bde83 	.word	0x431bde83

0800050c <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(5);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
 8000516:	460b      	mov	r3, r1
 8000518:	71bb      	strb	r3, [r7, #6]
 800051a:	4613      	mov	r3, r2
 800051c:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <I2C_LCD_SetCursor+0x7c>)
 8000520:	f107 0408 	add.w	r4, r7, #8
 8000524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800052a:	79fa      	ldrb	r2, [r7, #7]
 800052c:	4917      	ldr	r1, [pc, #92]	@ (800058c <I2C_LCD_SetCursor+0x80>)
 800052e:	4613      	mov	r3, r2
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4413      	add	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	330a      	adds	r3, #10
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	797a      	ldrb	r2, [r7, #5]
 800053e:	429a      	cmp	r2, r3
 8000540:	d90a      	bls.n	8000558 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8000542:	79fa      	ldrb	r2, [r7, #7]
 8000544:	4911      	ldr	r1, [pc, #68]	@ (800058c <I2C_LCD_SetCursor+0x80>)
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	440b      	add	r3, r1
 8000550:	330a      	adds	r3, #10
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3b01      	subs	r3, #1
 8000556:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8000558:	797b      	ldrb	r3, [r7, #5]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	3318      	adds	r3, #24
 800055e:	443b      	add	r3, r7
 8000560:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000564:	b2da      	uxtb	r2, r3
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	4413      	add	r3, r2
 800056a:	b2db      	uxtb	r3, r3
 800056c:	b25b      	sxtb	r3, r3
 800056e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000572:	b25b      	sxtb	r3, r3
 8000574:	b2da      	uxtb	r2, r3
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff feb4 	bl	80002e8 <I2C_LCD_Cmd>
}
 8000580:	bf00      	nop
 8000582:	371c      	adds	r7, #28
 8000584:	46bd      	mov	sp, r7
 8000586:	bd90      	pop	{r4, r7, pc}
 8000588:	08004230 	.word	0x08004230
 800058c:	08004288 	.word	0x08004288

08000590 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 800059c:	e008      	b.n	80005b0 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	603a      	str	r2, [r7, #0]
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff feae 	bl	800030c <I2C_LCD_Data>
    while (*Str)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1f2      	bne.n	800059e <I2C_LCD_WriteString+0xe>
    }
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <HAL_TIM_IC_CaptureCallback>:
static int16_t bsp_count = 0;
static int16_t direction = 0;
static int16_t speed = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

	counter = __HAL_TIM_GET_COUNTER(htim);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d2:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <HAL_TIM_IC_CaptureCallback+0x60>)
 80005d4:	6013      	str	r3, [r2, #0]
	bsp_count = (int16_t) counter;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <HAL_TIM_IC_CaptureCallback+0x60>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	b21a      	sxth	r2, r3
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005de:	801a      	strh	r2, [r3, #0]

	if(bsp_count > previous_count){
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <HAL_TIM_IC_CaptureCallback+0x68>)
 80005e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dd03      	ble.n	80005f8 <HAL_TIM_IC_CaptureCallback+0x34>
		direction = ENCODER_DIRECTION_RIGHT;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	801a      	strh	r2, [r3, #0]
 80005f6:	e00b      	b.n	8000610 <HAL_TIM_IC_CaptureCallback+0x4c>
	}
	else if(bsp_count < previous_count){
 80005f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000604:	429a      	cmp	r2, r3
 8000606:	da03      	bge.n	8000610 <HAL_TIM_IC_CaptureCallback+0x4c>
		direction = ENCODER_DIRECTION_LEFT;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800060a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800060e:	801a      	strh	r2, [r3, #0]
	}
	previous_count = bsp_count;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000612:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000616:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000618:	801a      	strh	r2, [r3, #0]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	20000034 	.word	0x20000034
 8000628:	2000003a 	.word	0x2000003a
 800062c:	20000038 	.word	0x20000038
 8000630:	2000003c 	.word	0x2000003c

08000634 <BSP_ENCODER_GetCount>:

void BSP_ENCODER_Init(){
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // For 2 channels
}

inline int16_t BSP_ENCODER_GetCount(){
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	return bsp_count;
 8000638:	4b03      	ldr	r3, [pc, #12]	@ (8000648 <BSP_ENCODER_GetCount+0x14>)
 800063a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	2000003a 	.word	0x2000003a

0800064c <BSP_ENCODER_WriteSpeed>:
	return direction;
}
inline int16_t BSP_ENCODER_GetSwitch(){
	return HAL_GPIO_ReadPin(ENCODER_PORT, ENCODER_PIN);
}
void BSP_ENCODER_WriteSpeed(int16_t _speed){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	speed = _speed;
 8000656:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <BSP_ENCODER_WriteSpeed+0x1c>)
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	8013      	strh	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	2000003e 	.word	0x2000003e

0800066c <Initializing>:
#include "bsp_lcd.h"

extern uint8_t motion[5];

void Initializing(BSP_LCD_SetupParams_TypeDef *params){
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

	char time[5];
	BSP_LCD_SendMessage("Initializing: ", 0, 0, true);
 8000674:	2301      	movs	r3, #1
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <Initializing+0x44>)
 800067c:	f000 f84d 	bl	800071a <BSP_LCD_SendMessage>
 	itoa(params->setup_time - *(params->seconds), time, 10);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	461a      	mov	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	f107 0108 	add.w	r1, r7, #8
 8000692:	220a      	movs	r2, #10
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fd4e 	bl	8004136 <itoa>
	BSP_LCD_SendMessage(time, 0, 1, false);
 800069a:	f107 0008 	add.w	r0, r7, #8
 800069e:	2300      	movs	r3, #0
 80006a0:	2201      	movs	r2, #1
 80006a2:	2100      	movs	r1, #0
 80006a4:	f000 f839 	bl	800071a <BSP_LCD_SendMessage>
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	08004240 	.word	0x08004240

080006b4 <BSP_LCD_Init>:

void BSP_LCD_Init(BSP_LCD_SetupParams_TypeDef *params){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	I2C_LCD_Init(LCD);
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fe37 	bl	8000330 <I2C_LCD_Init>
	  while(params->condition()){
 80006c2:	e006      	b.n	80006d2 <BSP_LCD_Init+0x1e>
		  Initializing(params);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ffd1 	bl	800066c <Initializing>
		  HAL_Delay(1000);
 80006ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ce:	f000 fcf7 	bl	80010c0 <HAL_Delay>
	  while(params->condition()){
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4798      	blx	r3
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f2      	bne.n	80006c4 <BSP_LCD_Init+0x10>
	  }
}
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <BSP_LCD_Clear>:


void BSP_LCD_Clear(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	I2C_LCD_Clear(LCD);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff fed1 	bl	8000494 <I2C_LCD_Clear>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <BSP_LCD_SetCursor>:

void BSP_LCD_SetCursor(uint8_t col, uint8_t row){
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	460a      	mov	r2, r1
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	4613      	mov	r3, r2
 8000704:	71bb      	strb	r3, [r7, #6]
 	I2C_LCD_SetCursor(LCD, col, row);
 8000706:	79ba      	ldrb	r2, [r7, #6]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4619      	mov	r1, r3
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff fefd 	bl	800050c <I2C_LCD_SetCursor>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <BSP_LCD_SendMessage>:

void BSP_LCD_SendMessage(char* message, uint8_t col, uint8_t row, bool clear){
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	4608      	mov	r0, r1
 8000724:	4611      	mov	r1, r2
 8000726:	461a      	mov	r2, r3
 8000728:	4603      	mov	r3, r0
 800072a:	70fb      	strb	r3, [r7, #3]
 800072c:	460b      	mov	r3, r1
 800072e:	70bb      	strb	r3, [r7, #2]
 8000730:	4613      	mov	r3, r2
 8000732:	707b      	strb	r3, [r7, #1]
	if(clear){
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <BSP_LCD_SendMessage+0x24>
		BSP_LCD_Clear();
 800073a:	f7ff ffd5 	bl	80006e8 <BSP_LCD_Clear>
	}
	BSP_LCD_SetCursor(col, row);
 800073e:	78ba      	ldrb	r2, [r7, #2]
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ffd6 	bl	80006f6 <BSP_LCD_SetCursor>
 	I2C_LCD_WriteString(LCD, message);
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff1f 	bl	8000590 <I2C_LCD_WriteString>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000770:	4b46      	ldr	r3, [pc, #280]	@ (800088c <MX_GPIO_Init+0x130>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a45      	ldr	r2, [pc, #276]	@ (800088c <MX_GPIO_Init+0x130>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b43      	ldr	r3, [pc, #268]	@ (800088c <MX_GPIO_Init+0x130>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0310 	and.w	r3, r3, #16
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000788:	4b40      	ldr	r3, [pc, #256]	@ (800088c <MX_GPIO_Init+0x130>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a3f      	ldr	r2, [pc, #252]	@ (800088c <MX_GPIO_Init+0x130>)
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b3d      	ldr	r3, [pc, #244]	@ (800088c <MX_GPIO_Init+0x130>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b3a      	ldr	r3, [pc, #232]	@ (800088c <MX_GPIO_Init+0x130>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a39      	ldr	r2, [pc, #228]	@ (800088c <MX_GPIO_Init+0x130>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b37      	ldr	r3, [pc, #220]	@ (800088c <MX_GPIO_Init+0x130>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b34      	ldr	r3, [pc, #208]	@ (800088c <MX_GPIO_Init+0x130>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a33      	ldr	r2, [pc, #204]	@ (800088c <MX_GPIO_Init+0x130>)
 80007be:	f043 0308 	orr.w	r3, r3, #8
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b31      	ldr	r3, [pc, #196]	@ (800088c <MX_GPIO_Init+0x130>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|CE_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80007d6:	482e      	ldr	r0, [pc, #184]	@ (8000890 <MX_GPIO_Init+0x134>)
 80007d8:	f000 ff28 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e2:	482c      	ldr	r0, [pc, #176]	@ (8000894 <MX_GPIO_Init+0x138>)
 80007e4:	f000 ff22 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder_Switch_Pin;
 80007e8:	2304      	movs	r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_Switch_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	4826      	ldr	r0, [pc, #152]	@ (8000894 <MX_GPIO_Init+0x138>)
 80007fc:	f000 fd92 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000800:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2302      	movs	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	481d      	ldr	r0, [pc, #116]	@ (8000890 <MX_GPIO_Init+0x134>)
 800081a:	f000 fd83 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 800081e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	4816      	ldr	r0, [pc, #88]	@ (8000890 <MX_GPIO_Init+0x134>)
 8000838:	f000 fd74 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CSN_Pin;
 800083c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CSN_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	480f      	ldr	r0, [pc, #60]	@ (8000894 <MX_GPIO_Init+0x138>)
 8000856:	f000 fd65 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800085a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000860:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <MX_GPIO_Init+0x13c>)
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	4809      	ldr	r0, [pc, #36]	@ (8000894 <MX_GPIO_Init+0x138>)
 8000870:	f000 fd58 	bl	8001324 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2028      	movs	r0, #40	@ 0x28
 800087a:	f000 fd1c 	bl	80012b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087e:	2028      	movs	r0, #40	@ 0x28
 8000880:	f000 fd35 	bl	80012ee <HAL_NVIC_EnableIRQ>

}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	40010c00 	.word	0x40010c00
 8000894:	40010800 	.word	0x40010800
 8000898:	10210000 	.word	0x10210000

0800089c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008a2:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <MX_I2C1_Init+0x54>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008a8:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <MX_I2C1_Init+0x58>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008da:	f000 fef1 	bl	80016c0 <HAL_I2C_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 f957 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000040 	.word	0x20000040
 80008f0:	40005400 	.word	0x40005400
 80008f4:	00061a80 	.word	0x00061a80

080008f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a15      	ldr	r2, [pc, #84]	@ (8000968 <HAL_I2C_MspInit+0x70>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d123      	bne.n	8000960 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <HAL_I2C_MspInit+0x74>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a13      	ldr	r2, [pc, #76]	@ (800096c <HAL_I2C_MspInit+0x74>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <HAL_I2C_MspInit+0x74>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000930:	23c0      	movs	r3, #192	@ 0xc0
 8000932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000934:	2312      	movs	r3, #18
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	480b      	ldr	r0, [pc, #44]	@ (8000970 <HAL_I2C_MspInit+0x78>)
 8000944:	f000 fcee 	bl	8001324 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_I2C_MspInit+0x74>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	4a07      	ldr	r2, [pc, #28]	@ (800096c <HAL_I2C_MspInit+0x74>)
 800094e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000952:	61d3      	str	r3, [r2, #28]
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_I2C_MspInit+0x74>)
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40005400 	.word	0x40005400
 800096c:	40021000 	.word	0x40021000
 8000970:	40010c00 	.word	0x40010c00

08000974 <RetFalse>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rx_data[NRF24L01P_PAYLOAD_LENGTH] = {0,};
uint8_t tx_data[NRF24L01P_PAYLOAD_LENGTH] = {0, 1, 2, 3, 4, 5, 6, 7};
bool RetFalse(){
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	return false;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
	...

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f000 fb37 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f899 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f7ff fee3 	bl	800075c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000996:	f000 fa73 	bl	8000e80 <MX_TIM2_Init>
  MX_I2C1_Init();
 800099a:	f7ff ff7f 	bl	800089c <MX_I2C1_Init>
  MX_SPI2_Init();
 800099e:	f000 f901 	bl	8000ba4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_SetupParams_TypeDef lcd_params;
  //lcd_params.condition = BSP_HCSR501_Ready;
  //lcd_params.setup_time = (uint8_t) HCSR501_SETUP_SECONDS + HCSR501_SETUP_MINUTES*60;
  //lcd_params.seconds = &motion[4];
  lcd_params.condition = RetFalse;
 80009a2:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa0 <main+0x11c>)
 80009a4:	60fb      	str	r3, [r7, #12]
  lcd_params.setup_time = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	743b      	strb	r3, [r7, #16]
  lcd_params.seconds = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]


 // BSP_ENCODER_Init();
//  BSP_RC522_Init();
  BSP_LCD_Init(&lcd_params);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe7e 	bl	80006b4 <BSP_LCD_Init>
  BSP_LCD_SendMessage("Hola", 0, 0, true);
 80009b8:	2301      	movs	r3, #1
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	4839      	ldr	r0, [pc, #228]	@ (8000aa4 <main+0x120>)
 80009c0:	f7ff feab 	bl	800071a <BSP_LCD_SendMessage>


  BSP_RF_Params_TypeDef rf_params = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	809a      	strh	r2, [r3, #4]
  rf_params.channel = NRF24L01P_CHANNEL;
 80009cc:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80009d0:	80fb      	strh	r3, [r7, #6]
  rf_params.rate = NRF24L01P_RATE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	713b      	strb	r3, [r7, #4]
  rf_params.retransmit_count = NRF24L01P_RETRANSMIT_COUNT;
 80009d6:	2303      	movs	r3, #3
 80009d8:	723b      	strb	r3, [r7, #8]
  BSP_RF_Init(&rf_params);
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 ff31 	bl	8003844 <BSP_RF_Init>
  BSP_RF_Sending();
 80009e2:	f002 ff4f 	bl	8003884 <BSP_RF_Sending>
  BSP_RF_SendMessage(tx_data);
 80009e6:	4830      	ldr	r0, [pc, #192]	@ (8000aa8 <main+0x124>)
 80009e8:	f002 ff64 	bl	80038b4 <BSP_RF_SendMessage>
  BSP_RF_Listening();
 80009ec:	f002 ff6e 	bl	80038cc <BSP_RF_Listening>
  uint8_t last_state = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(handledInterruptsRF != toHandleInterruptsRF){
 80009f4:	4b2d      	ldr	r3, [pc, #180]	@ (8000aac <main+0x128>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab0 <main+0x12c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d0f9      	beq.n	80009f4 <main+0x70>
		  BSP_RF_Sending();
 8000a00:	f002 ff40 	bl	8003884 <BSP_RF_Sending>
		  BSP_RF_SendMessage(tx_data);
 8000a04:	4828      	ldr	r0, [pc, #160]	@ (8000aa8 <main+0x124>)
 8000a06:	f002 ff55 	bl	80038b4 <BSP_RF_SendMessage>
		  BSP_RF_Listening();
 8000a0a:	f002 ff5f 	bl	80038cc <BSP_RF_Listening>
		  for(int i = 0; i < 8; i++){
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	e00d      	b.n	8000a30 <main+0xac>
			  tx_data[i]++;
 8000a14:	4a24      	ldr	r2, [pc, #144]	@ (8000aa8 <main+0x124>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2d9      	uxtb	r1, r3
 8000a20:	4a21      	ldr	r2, [pc, #132]	@ (8000aa8 <main+0x124>)
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	4413      	add	r3, r2
 8000a26:	460a      	mov	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 8; i++){
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	ddee      	ble.n	8000a14 <main+0x90>
		  }
		  handledInterruptsRF = toHandleInterruptsRF;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <main+0x12c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <main+0x128>)
 8000a3c:	6013      	str	r3, [r2, #0]
		  if(rx_data[7] == 1 && last_state != 1){
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <main+0x130>)
 8000a40:	79db      	ldrb	r3, [r3, #7]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d10b      	bne.n	8000a5e <main+0xda>
 8000a46:	7ffb      	ldrb	r3, [r7, #31]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d008      	beq.n	8000a5e <main+0xda>
			  last_state = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	77fb      	strb	r3, [r7, #31]
			  BSP_LCD_SendMessage("No one there", 0, 0, true);
 8000a50:	2301      	movs	r3, #1
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	4818      	ldr	r0, [pc, #96]	@ (8000ab8 <main+0x134>)
 8000a58:	f7ff fe5f 	bl	800071a <BSP_LCD_SendMessage>
 8000a5c:	e01e      	b.n	8000a9c <main+0x118>
		  }else if(rx_data[7] == 2 && last_state != 2){
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <main+0x130>)
 8000a60:	79db      	ldrb	r3, [r3, #7]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d10b      	bne.n	8000a7e <main+0xfa>
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d008      	beq.n	8000a7e <main+0xfa>
			  last_state = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	77fb      	strb	r3, [r7, #31]
			  BSP_LCD_SendMessage("SOMEONE there", 0, 0, true);
 8000a70:	2301      	movs	r3, #1
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	4811      	ldr	r0, [pc, #68]	@ (8000abc <main+0x138>)
 8000a78:	f7ff fe4f 	bl	800071a <BSP_LCD_SendMessage>
 8000a7c:	e00e      	b.n	8000a9c <main+0x118>
		  }else if(rx_data[7] == 0 && last_state != 0){
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <main+0x130>)
 8000a80:	79db      	ldrb	r3, [r3, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1b6      	bne.n	80009f4 <main+0x70>
 8000a86:	7ffb      	ldrb	r3, [r7, #31]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0b3      	beq.n	80009f4 <main+0x70>
			  last_state = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	77fb      	strb	r3, [r7, #31]
			  BSP_LCD_SendMessage("No connection", 0, 0, true);
 8000a90:	2301      	movs	r3, #1
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	480a      	ldr	r0, [pc, #40]	@ (8000ac0 <main+0x13c>)
 8000a98:	f7ff fe3f 	bl	800071a <BSP_LCD_SendMessage>
	  if(handledInterruptsRF != toHandleInterruptsRF){
 8000a9c:	e7aa      	b.n	80009f4 <main+0x70>
 8000a9e:	bf00      	nop
 8000aa0:	08000975 	.word	0x08000975
 8000aa4:	08004250 	.word	0x08004250
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	2000009c 	.word	0x2000009c
 8000ab0:	200000a0 	.word	0x200000a0
 8000ab4:	200000a4 	.word	0x200000a4
 8000ab8:	08004258 	.word	0x08004258
 8000abc:	08004268 	.word	0x08004268
 8000ac0:	08004278 	.word	0x08004278

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b090      	sub	sp, #64	@ 0x40
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2228      	movs	r2, #40	@ 0x28
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 fb74 	bl	80041c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b02:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fa73 	bl	8001ff8 <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b18:	f000 f83d 	bl	8000b96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2302      	movs	r3, #2
 8000b22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2102      	movs	r1, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fce0 	bl	80024fc <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b42:	f000 f828 	bl	8000b96 <Error_Handler>
  }
}
 8000b46:	bf00      	nop
 8000b48:	3740      	adds	r7, #64	@ 0x40
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <received_message>:

/* USER CODE BEGIN 4 */


void received_message()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	toHandleInterruptsRF += BSP_RF_IrqHandler();
 8000b54:	f002 fede 	bl	8003914 <BSP_RF_IrqHandler>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <received_message+0x20>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a03      	ldr	r2, [pc, #12]	@ (8000b70 <received_message+0x20>)
 8000b64:	6013      	str	r3, [r2, #0]
	BSP_RF_ReadData(rx_data);
 8000b66:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <received_message+0x24>)
 8000b68:	f002 fefc 	bl	8003964 <BSP_RF_ReadData>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000a0 	.word	0x200000a0
 8000b74:	200000a4 	.word	0x200000a4

08000b78 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
//	}
//	if(GPIO_Pin == HCSR501_PIN){
//		toHandleInterruptsLCD++;
//
//	}
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b88:	d101      	bne.n	8000b8e <HAL_GPIO_EXTI_Callback+0x16>
	{
		received_message();
 8000b8a:	f7ff ffe1 	bl	8000b50 <received_message>
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9a:	b672      	cpsid	i
}
 8000b9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9e:	bf00      	nop
 8000ba0:	e7fd      	b.n	8000b9e <Error_Handler+0x8>
	...

08000ba4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000baa:	4a18      	ldr	r2, [pc, #96]	@ (8000c0c <MX_SPI2_Init+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bd8:	2210      	movs	r2, #16
 8000bda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <MX_SPI2_Init+0x64>)
 8000bf6:	f001 fdfb 	bl	80027f0 <HAL_SPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c00:	f7ff ffc9 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000ac 	.word	0x200000ac
 8000c0c:	40003800 	.word	0x40003800

08000c10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d131      	bne.n	8000c94 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <HAL_SPI_MspInit+0x90>)
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca0 <HAL_SPI_MspInit+0x90>)
 8000c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3a:	61d3      	str	r3, [r2, #28]
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <HAL_SPI_MspInit+0x90>)
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_SPI_MspInit+0x90>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <HAL_SPI_MspInit+0x90>)
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_SPI_MspInit+0x90>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000c60:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <HAL_SPI_MspInit+0x94>)
 8000c76:	f000 fb55 	bl	8001324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <HAL_SPI_MspInit+0x94>)
 8000c90:	f000 fb48 	bl	8001324 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40003800 	.word	0x40003800
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010c00 	.word	0x40010c00

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_MspInit+0x60>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_MspInit+0x60>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <NMI_Handler+0x4>

08000d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <MemManage_Handler+0x4>

08000d24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static int16_t speed_count = 0;
	static uint16_t milliseconds = 0;
	int16_t count = BSP_ENCODER_GetCount();
 8000d5e:	f7ff fc69 	bl	8000634 <BSP_ENCODER_GetCount>
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	milliseconds++;
 8000d66:	4b32      	ldr	r3, [pc, #200]	@ (8000e30 <SysTick_Handler+0xd8>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b30      	ldr	r3, [pc, #192]	@ (8000e30 <SysTick_Handler+0xd8>)
 8000d70:	801a      	strh	r2, [r3, #0]
	if(milliseconds == 500){
 8000d72:	4b2f      	ldr	r3, [pc, #188]	@ (8000e30 <SysTick_Handler+0xd8>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d7a:	d112      	bne.n	8000da2 <SysTick_Handler+0x4a>
		BSP_ENCODER_WriteSpeed((count - speed_count)*2); // speed in counts/sec
 8000d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d80:	4a2c      	ldr	r2, [pc, #176]	@ (8000e34 <SysTick_Handler+0xdc>)
 8000d82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fc5b 	bl	800064c <BSP_ENCODER_WriteSpeed>
		speed_count = count;
 8000d96:	4a27      	ldr	r2, [pc, #156]	@ (8000e34 <SysTick_Handler+0xdc>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	8013      	strh	r3, [r2, #0]
		milliseconds = 0;
 8000d9c:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <SysTick_Handler+0xd8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 f971 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

	static uint16_t seconds = 0;
	static uint16_t milliseconds2 = 0;
	static uint16_t minutes = 0;
	milliseconds2++;
 8000da6:	4b24      	ldr	r3, [pc, #144]	@ (8000e38 <SysTick_Handler+0xe0>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <SysTick_Handler+0xe0>)
 8000db0:	801a      	strh	r2, [r3, #0]
	seconds += milliseconds2 / 1000;
 8000db2:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <SysTick_Handler+0xe0>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	4a21      	ldr	r2, [pc, #132]	@ (8000e3c <SysTick_Handler+0xe4>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	099b      	lsrs	r3, r3, #6
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <SysTick_Handler+0xe8>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <SysTick_Handler+0xe8>)
 8000dca:	801a      	strh	r2, [r3, #0]
	milliseconds2 %= 1000;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <SysTick_Handler+0xe0>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e3c <SysTick_Handler+0xe4>)
 8000dd2:	fba2 1203 	umull	r1, r2, r2, r3
 8000dd6:	0992      	lsrs	r2, r2, #6
 8000dd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ddc:	fb01 f202 	mul.w	r2, r1, r2
 8000de0:	1a9b      	subs	r3, r3, r2
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <SysTick_Handler+0xe0>)
 8000de6:	801a      	strh	r2, [r3, #0]
	minutes = seconds / 60;
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <SysTick_Handler+0xe8>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	4a15      	ldr	r2, [pc, #84]	@ (8000e44 <SysTick_Handler+0xec>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <SysTick_Handler+0xf0>)
 8000df8:	801a      	strh	r2, [r3, #0]
	seconds %= 60;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <SysTick_Handler+0xe8>)
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <SysTick_Handler+0xec>)
 8000e00:	fba3 1302 	umull	r1, r3, r3, r2
 8000e04:	0959      	lsrs	r1, r3, #5
 8000e06:	460b      	mov	r3, r1
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <SysTick_Handler+0xe8>)
 8000e14:	801a      	strh	r2, [r3, #0]
	motion[4] = seconds;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <SysTick_Handler+0xe8>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <SysTick_Handler+0xf4>)
 8000e1e:	711a      	strb	r2, [r3, #4]
	if(minutes == HCSR501_SETUP_MINUTES && seconds == HCSR501_SETUP_SECONDS){
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <SysTick_Handler+0xf0>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
//		__HAL_GPIO_EXTI_GENERATE_SWIT(GPIO_PIN_13);
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000104 	.word	0x20000104
 8000e34:	20000106 	.word	0x20000106
 8000e38:	20000108 	.word	0x20000108
 8000e3c:	10624dd3 	.word	0x10624dd3
 8000e40:	2000010a 	.word	0x2000010a
 8000e44:	88888889 	.word	0x88888889
 8000e48:	2000010c 	.word	0x2000010c
 8000e4c:	20000094 	.word	0x20000094

08000e50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <TIM2_IRQHandler+0x10>)
 8000e56:	f002 fb02 	bl	800345e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000110 	.word	0x20000110

08000e64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000e68:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e6c:	f000 fc10 	bl	8001690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	@ 0x30
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2224      	movs	r2, #36	@ 0x24
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 f996 	bl	80041c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_TIM2_Init+0xa4>)
 8000e9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <MX_TIM2_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <MX_TIM2_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <MX_TIM2_Init+0xa4>)
 8000eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_TIM2_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <MX_TIM2_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000edc:	2301      	movs	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <MX_TIM2_Init+0xa4>)
 8000ef0:	f002 fa13 	bl	800331a <HAL_TIM_Encoder_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000efa:	f7ff fe4c 	bl	8000b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <MX_TIM2_Init+0xa4>)
 8000f0c:	f002 fc2a 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f16:	f7ff fe3e 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	@ 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000110 	.word	0x20000110

08000f28 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f46:	d12b      	bne.n	8000fa0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	4a16      	ldr	r2, [pc, #88]	@ (8000fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	61d3      	str	r3, [r2, #28]
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4808      	ldr	r0, [pc, #32]	@ (8000fac <HAL_TIM_Encoder_MspInit+0x84>)
 8000f8c:	f000 f9ca 	bl	8001324 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	201c      	movs	r0, #28
 8000f96:	f000 f98e 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9a:	201c      	movs	r0, #28
 8000f9c:	f000 f9a7 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010800 	.word	0x40010800

08000fb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb0:	f7ff ff60 	bl	8000e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fb6:	490c      	ldr	r1, [pc, #48]	@ (8000fe8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fcc:	4c09      	ldr	r4, [pc, #36]	@ (8000ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fda:	f003 f8f9 	bl	80041d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fde:	f7ff fcd1 	bl	8000984 <main>
  bx lr
 8000fe2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fec:	080042ec 	.word	0x080042ec
  ldr r2, =_sbss
 8000ff0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ff4:	2000016c 	.word	0x2000016c

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_Init+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <HAL_Init+0x28>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f947 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fe46 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f95f 	bl	800130a <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f927 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000008 	.word	0x20000008
 8001080:	20000010 	.word	0x20000010
 8001084:	2000000c 	.word	0x2000000c

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a03      	ldr	r2, [pc, #12]	@ (80010a8 <HAL_IncTick+0x20>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000010 	.word	0x20000010
 80010a8:	20000158 	.word	0x20000158

080010ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	@ (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	20000158 	.word	0x20000158

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffe0 	bl	80010ac <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000010 	.word	0x20000010

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4906      	ldr	r1, [pc, #24]	@ (80011a0 <__NVIC_EnableIRQ+0x34>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	@ (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	@ 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff90 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	@ (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff2d 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff42 	bl	8001150 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff90 	bl	80011f8 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5f 	bl	80011a4 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff35 	bl	800116c <__NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffa2 	bl	800125c <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b08b      	sub	sp, #44	@ 0x2c
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	e169      	b.n	800160c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001338:	2201      	movs	r2, #1
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	429a      	cmp	r2, r3
 8001352:	f040 8158 	bne.w	8001606 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4a9a      	ldr	r2, [pc, #616]	@ (80015c4 <HAL_GPIO_Init+0x2a0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d05e      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001360:	4a98      	ldr	r2, [pc, #608]	@ (80015c4 <HAL_GPIO_Init+0x2a0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d875      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 8001366:	4a98      	ldr	r2, [pc, #608]	@ (80015c8 <HAL_GPIO_Init+0x2a4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d058      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 800136c:	4a96      	ldr	r2, [pc, #600]	@ (80015c8 <HAL_GPIO_Init+0x2a4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d86f      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 8001372:	4a96      	ldr	r2, [pc, #600]	@ (80015cc <HAL_GPIO_Init+0x2a8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d052      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001378:	4a94      	ldr	r2, [pc, #592]	@ (80015cc <HAL_GPIO_Init+0x2a8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d869      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 800137e:	4a94      	ldr	r2, [pc, #592]	@ (80015d0 <HAL_GPIO_Init+0x2ac>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d04c      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001384:	4a92      	ldr	r2, [pc, #584]	@ (80015d0 <HAL_GPIO_Init+0x2ac>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d863      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 800138a:	4a92      	ldr	r2, [pc, #584]	@ (80015d4 <HAL_GPIO_Init+0x2b0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d046      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001390:	4a90      	ldr	r2, [pc, #576]	@ (80015d4 <HAL_GPIO_Init+0x2b0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d85d      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 8001396:	2b12      	cmp	r3, #18
 8001398:	d82a      	bhi.n	80013f0 <HAL_GPIO_Init+0xcc>
 800139a:	2b12      	cmp	r3, #18
 800139c:	d859      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 800139e:	a201      	add	r2, pc, #4	@ (adr r2, 80013a4 <HAL_GPIO_Init+0x80>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	0800141f 	.word	0x0800141f
 80013a8:	080013f9 	.word	0x080013f9
 80013ac:	0800140b 	.word	0x0800140b
 80013b0:	0800144d 	.word	0x0800144d
 80013b4:	08001453 	.word	0x08001453
 80013b8:	08001453 	.word	0x08001453
 80013bc:	08001453 	.word	0x08001453
 80013c0:	08001453 	.word	0x08001453
 80013c4:	08001453 	.word	0x08001453
 80013c8:	08001453 	.word	0x08001453
 80013cc:	08001453 	.word	0x08001453
 80013d0:	08001453 	.word	0x08001453
 80013d4:	08001453 	.word	0x08001453
 80013d8:	08001453 	.word	0x08001453
 80013dc:	08001453 	.word	0x08001453
 80013e0:	08001453 	.word	0x08001453
 80013e4:	08001453 	.word	0x08001453
 80013e8:	08001401 	.word	0x08001401
 80013ec:	08001415 	.word	0x08001415
 80013f0:	4a79      	ldr	r2, [pc, #484]	@ (80015d8 <HAL_GPIO_Init+0x2b4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013f6:	e02c      	b.n	8001452 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	623b      	str	r3, [r7, #32]
          break;
 80013fe:	e029      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	3304      	adds	r3, #4
 8001406:	623b      	str	r3, [r7, #32]
          break;
 8001408:	e024      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	3308      	adds	r3, #8
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e01f      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	330c      	adds	r3, #12
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e01a      	b.n	8001454 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001426:	2304      	movs	r3, #4
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e013      	b.n	8001454 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	611a      	str	r2, [r3, #16]
          break;
 800143e:	e009      	b.n	8001454 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001440:	2308      	movs	r3, #8
 8001442:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	615a      	str	r2, [r3, #20]
          break;
 800144a:	e003      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x130>
          break;
 8001452:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2bff      	cmp	r3, #255	@ 0xff
 8001458:	d801      	bhi.n	800145e <HAL_GPIO_Init+0x13a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	e001      	b.n	8001462 <HAL_GPIO_Init+0x13e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3304      	adds	r3, #4
 8001462:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2bff      	cmp	r3, #255	@ 0xff
 8001468:	d802      	bhi.n	8001470 <HAL_GPIO_Init+0x14c>
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x152>
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	3b08      	subs	r3, #8
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	210f      	movs	r1, #15
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	401a      	ands	r2, r3
 8001488:	6a39      	ldr	r1, [r7, #32]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	431a      	orrs	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80b1 	beq.w	8001606 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a4:	4b4d      	ldr	r3, [pc, #308]	@ (80015dc <HAL_GPIO_Init+0x2b8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a4c      	ldr	r2, [pc, #304]	@ (80015dc <HAL_GPIO_Init+0x2b8>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <HAL_GPIO_Init+0x2b8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014bc:	4a48      	ldr	r2, [pc, #288]	@ (80015e0 <HAL_GPIO_Init+0x2bc>)
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a40      	ldr	r2, [pc, #256]	@ (80015e4 <HAL_GPIO_Init+0x2c0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d013      	beq.n	8001510 <HAL_GPIO_Init+0x1ec>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a3f      	ldr	r2, [pc, #252]	@ (80015e8 <HAL_GPIO_Init+0x2c4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00d      	beq.n	800150c <HAL_GPIO_Init+0x1e8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a3e      	ldr	r2, [pc, #248]	@ (80015ec <HAL_GPIO_Init+0x2c8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d007      	beq.n	8001508 <HAL_GPIO_Init+0x1e4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3d      	ldr	r2, [pc, #244]	@ (80015f0 <HAL_GPIO_Init+0x2cc>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_GPIO_Init+0x1e0>
 8001500:	2303      	movs	r3, #3
 8001502:	e006      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001504:	2304      	movs	r3, #4
 8001506:	e004      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001508:	2302      	movs	r3, #2
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001510:	2300      	movs	r3, #0
 8001512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001514:	f002 0203 	and.w	r2, r2, #3
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	4093      	lsls	r3, r2
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001522:	492f      	ldr	r1, [pc, #188]	@ (80015e0 <HAL_GPIO_Init+0x2bc>)
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800153c:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	492c      	ldr	r1, [pc, #176]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	608b      	str	r3, [r1, #8]
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800154a:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	43db      	mvns	r3, r3
 8001552:	4928      	ldr	r1, [pc, #160]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001554:	4013      	ands	r3, r2
 8001556:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001564:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	4922      	ldr	r1, [pc, #136]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	60cb      	str	r3, [r1, #12]
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	43db      	mvns	r3, r3
 800157a:	491e      	ldr	r1, [pc, #120]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 800157c:	4013      	ands	r3, r2
 800157e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4918      	ldr	r1, [pc, #96]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4914      	ldr	r1, [pc, #80]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d021      	beq.n	80015f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	490e      	ldr	r1, [pc, #56]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
 80015c0:	e021      	b.n	8001606 <HAL_GPIO_Init+0x2e2>
 80015c2:	bf00      	nop
 80015c4:	10320000 	.word	0x10320000
 80015c8:	10310000 	.word	0x10310000
 80015cc:	10220000 	.word	0x10220000
 80015d0:	10210000 	.word	0x10210000
 80015d4:	10120000 	.word	0x10120000
 80015d8:	10110000 	.word	0x10110000
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010000 	.word	0x40010000
 80015e4:	40010800 	.word	0x40010800
 80015e8:	40010c00 	.word	0x40010c00
 80015ec:	40011000 	.word	0x40011000
 80015f0:	40011400 	.word	0x40011400
 80015f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <HAL_GPIO_Init+0x304>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	43db      	mvns	r3, r3
 8001600:	4909      	ldr	r1, [pc, #36]	@ (8001628 <HAL_GPIO_Init+0x304>)
 8001602:	4013      	ands	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	3301      	adds	r3, #1
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f ae8e 	bne.w	8001338 <HAL_GPIO_Init+0x14>
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	372c      	adds	r7, #44	@ 0x2c
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40010400 	.word	0x40010400

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001648:	e003      	b.n	8001652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	611a      	str	r2, [r3, #16]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4013      	ands	r3, r2
 8001674:	041a      	lsls	r2, r3, #16
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43d9      	mvns	r1, r3
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	400b      	ands	r3, r1
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	611a      	str	r2, [r3, #16]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
	...

08001690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fa62 	bl	8000b78 <HAL_GPIO_EXTI_Callback>
  }
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e12b      	b.n	800192a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff f906 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2224      	movs	r2, #36	@ 0x24
 80016f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001724:	f001 f832 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8001728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a81      	ldr	r2, [pc, #516]	@ (8001934 <HAL_I2C_Init+0x274>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d807      	bhi.n	8001744 <HAL_I2C_Init+0x84>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4a80      	ldr	r2, [pc, #512]	@ (8001938 <HAL_I2C_Init+0x278>)
 8001738:	4293      	cmp	r3, r2
 800173a:	bf94      	ite	ls
 800173c:	2301      	movls	r3, #1
 800173e:	2300      	movhi	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	e006      	b.n	8001752 <HAL_I2C_Init+0x92>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4a7d      	ldr	r2, [pc, #500]	@ (800193c <HAL_I2C_Init+0x27c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	bf94      	ite	ls
 800174c:	2301      	movls	r3, #1
 800174e:	2300      	movhi	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0e7      	b.n	800192a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a78      	ldr	r2, [pc, #480]	@ (8001940 <HAL_I2C_Init+0x280>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0c9b      	lsrs	r3, r3, #18
 8001764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	430a      	orrs	r2, r1
 8001778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a6a      	ldr	r2, [pc, #424]	@ (8001934 <HAL_I2C_Init+0x274>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d802      	bhi.n	8001794 <HAL_I2C_Init+0xd4>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3301      	adds	r3, #1
 8001792:	e009      	b.n	80017a8 <HAL_I2C_Init+0xe8>
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	4a69      	ldr	r2, [pc, #420]	@ (8001944 <HAL_I2C_Init+0x284>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	3301      	adds	r3, #1
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	430b      	orrs	r3, r1
 80017ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	495c      	ldr	r1, [pc, #368]	@ (8001934 <HAL_I2C_Init+0x274>)
 80017c4:	428b      	cmp	r3, r1
 80017c6:	d819      	bhi.n	80017fc <HAL_I2C_Init+0x13c>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1e59      	subs	r1, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017d6:	1c59      	adds	r1, r3, #1
 80017d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017dc:	400b      	ands	r3, r1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00a      	beq.n	80017f8 <HAL_I2C_Init+0x138>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1e59      	subs	r1, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f0:	3301      	adds	r3, #1
 80017f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f6:	e051      	b.n	800189c <HAL_I2C_Init+0x1dc>
 80017f8:	2304      	movs	r3, #4
 80017fa:	e04f      	b.n	800189c <HAL_I2C_Init+0x1dc>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d111      	bne.n	8001828 <HAL_I2C_Init+0x168>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e58      	subs	r0, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	440b      	add	r3, r1
 8001812:	fbb0 f3f3 	udiv	r3, r0, r3
 8001816:	3301      	adds	r3, #1
 8001818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf0c      	ite	eq
 8001820:	2301      	moveq	r3, #1
 8001822:	2300      	movne	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	e012      	b.n	800184e <HAL_I2C_Init+0x18e>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1e58      	subs	r0, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	0099      	lsls	r1, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	fbb0 f3f3 	udiv	r3, r0, r3
 800183e:	3301      	adds	r3, #1
 8001840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf0c      	ite	eq
 8001848:	2301      	moveq	r3, #1
 800184a:	2300      	movne	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_Init+0x196>
 8001852:	2301      	movs	r3, #1
 8001854:	e022      	b.n	800189c <HAL_I2C_Init+0x1dc>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10e      	bne.n	800187c <HAL_I2C_Init+0x1bc>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1e58      	subs	r0, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6859      	ldr	r1, [r3, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	440b      	add	r3, r1
 800186c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001870:	3301      	adds	r3, #1
 8001872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800187a:	e00f      	b.n	800189c <HAL_I2C_Init+0x1dc>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e58      	subs	r0, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	0099      	lsls	r1, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001892:	3301      	adds	r3, #1
 8001894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001898:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	6809      	ldr	r1, [r1, #0]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6911      	ldr	r1, [r2, #16]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68d2      	ldr	r2, [r2, #12]
 80018d6:	4311      	orrs	r1, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	430b      	orrs	r3, r1
 80018de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	000186a0 	.word	0x000186a0
 8001938:	001e847f 	.word	0x001e847f
 800193c:	003d08ff 	.word	0x003d08ff
 8001940:	431bde83 	.word	0x431bde83
 8001944:	10624dd3 	.word	0x10624dd3

08001948 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	461a      	mov	r2, r3
 8001954:	460b      	mov	r3, r1
 8001956:	817b      	strh	r3, [r7, #10]
 8001958:	4613      	mov	r3, r2
 800195a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff fba6 	bl	80010ac <HAL_GetTick>
 8001960:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b20      	cmp	r3, #32
 800196c:	f040 80e0 	bne.w	8001b30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2319      	movs	r3, #25
 8001976:	2201      	movs	r2, #1
 8001978:	4970      	ldr	r1, [pc, #448]	@ (8001b3c <HAL_I2C_Master_Transmit+0x1f4>)
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f964 	bl	8001c48 <I2C_WaitOnFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001986:	2302      	movs	r3, #2
 8001988:	e0d3      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_I2C_Master_Transmit+0x50>
 8001994:	2302      	movs	r3, #2
 8001996:	e0cc      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1ea>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d007      	beq.n	80019be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0201 	orr.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2221      	movs	r2, #33	@ 0x21
 80019d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2210      	movs	r2, #16
 80019da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	893a      	ldrh	r2, [r7, #8]
 80019ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4a50      	ldr	r2, [pc, #320]	@ (8001b40 <HAL_I2C_Master_Transmit+0x1f8>)
 80019fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a00:	8979      	ldrh	r1, [r7, #10]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	6a3a      	ldr	r2, [r7, #32]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f89c 	bl	8001b44 <I2C_MasterRequestWrite>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e08d      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a2c:	e066      	b.n	8001afc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	6a39      	ldr	r1, [r7, #32]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fa22 	bl	8001e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00d      	beq.n	8001a5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d107      	bne.n	8001a56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e06b      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d11b      	bne.n	8001ad0 <HAL_I2C_Master_Transmit+0x188>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d017      	beq.n	8001ad0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	6a39      	ldr	r1, [r7, #32]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 fa19 	bl	8001f0c <I2C_WaitOnBTFFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00d      	beq.n	8001afc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d107      	bne.n	8001af8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001af6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e01a      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d194      	bne.n	8001a2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2220      	movs	r2, #32
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
  }
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	00100002 	.word	0x00100002
 8001b40:	ffff0000 	.word	0xffff0000

08001b44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	460b      	mov	r3, r1
 8001b52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d006      	beq.n	8001b6e <I2C_MasterRequestWrite+0x2a>
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d003      	beq.n	8001b6e <I2C_MasterRequestWrite+0x2a>
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b6c:	d108      	bne.n	8001b80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e00b      	b.n	8001b98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b84:	2b12      	cmp	r3, #18
 8001b86:	d107      	bne.n	8001b98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f84f 	bl	8001c48 <I2C_WaitOnFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00d      	beq.n	8001bcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bbe:	d103      	bne.n	8001bc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e035      	b.n	8001c38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bd4:	d108      	bne.n	8001be8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bd6:	897b      	ldrh	r3, [r7, #10]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	e01b      	b.n	8001c20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001be8:	897b      	ldrh	r3, [r7, #10]
 8001bea:	11db      	asrs	r3, r3, #7
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f003 0306 	and.w	r3, r3, #6
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f063 030f 	orn	r3, r3, #15
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	490e      	ldr	r1, [pc, #56]	@ (8001c40 <I2C_MasterRequestWrite+0xfc>)
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f898 	bl	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e010      	b.n	8001c38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c16:	897b      	ldrh	r3, [r7, #10]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	4907      	ldr	r1, [pc, #28]	@ (8001c44 <I2C_MasterRequestWrite+0x100>)
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f888 	bl	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	00010008 	.word	0x00010008
 8001c44:	00010002 	.word	0x00010002

08001c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c58:	e048      	b.n	8001cec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d044      	beq.n	8001cec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c62:	f7ff fa23 	bl	80010ac <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d302      	bcc.n	8001c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d139      	bne.n	8001cec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10d      	bne.n	8001c9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	e00c      	b.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d116      	bne.n	8001cec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	f043 0220 	orr.w	r2, r3, #32
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e023      	b.n	8001d34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10d      	bne.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4013      	ands	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	e00c      	b.n	8001d2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d093      	beq.n	8001c5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d4a:	e071      	b.n	8001e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5a:	d123      	bne.n	8001da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f043 0204 	orr.w	r2, r3, #4
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e067      	b.n	8001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001daa:	d041      	beq.n	8001e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dac:	f7ff f97e 	bl	80010ac <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d302      	bcc.n	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d136      	bne.n	8001e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d10c      	bne.n	8001de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	e00b      	b.n	8001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	43da      	mvns	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4013      	ands	r3, r2
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d016      	beq.n	8001e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e021      	b.n	8001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10c      	bne.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	43da      	mvns	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	4013      	ands	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf14      	ite	ne
 8001e4c:	2301      	movne	r3, #1
 8001e4e:	2300      	moveq	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e00b      	b.n	8001e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f47f af6d 	bne.w	8001d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e88:	e034      	b.n	8001ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 f886 	bl	8001f9c <I2C_IsAcknowledgeFailed>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e034      	b.n	8001f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d028      	beq.n	8001ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea2:	f7ff f903 	bl	80010ac <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d302      	bcc.n	8001eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d11d      	bne.n	8001ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec2:	2b80      	cmp	r3, #128	@ 0x80
 8001ec4:	d016      	beq.n	8001ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e007      	b.n	8001f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efe:	2b80      	cmp	r3, #128	@ 0x80
 8001f00:	d1c3      	bne.n	8001e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f18:	e034      	b.n	8001f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f83e 	bl	8001f9c <I2C_IsAcknowledgeFailed>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e034      	b.n	8001f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d028      	beq.n	8001f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f32:	f7ff f8bb 	bl	80010ac <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d302      	bcc.n	8001f48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d11d      	bne.n	8001f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d016      	beq.n	8001f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	f043 0220 	orr.w	r2, r3, #32
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e007      	b.n	8001f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d1c3      	bne.n	8001f1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb2:	d11b      	bne.n	8001fec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	f043 0204 	orr.w	r2, r3, #4
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e272      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8087 	beq.w	8002126 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002018:	4b92      	ldr	r3, [pc, #584]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b04      	cmp	r3, #4
 8002022:	d00c      	beq.n	800203e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002024:	4b8f      	ldr	r3, [pc, #572]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d112      	bne.n	8002056 <HAL_RCC_OscConfig+0x5e>
 8002030:	4b8c      	ldr	r3, [pc, #560]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800203c:	d10b      	bne.n	8002056 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203e:	4b89      	ldr	r3, [pc, #548]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d06c      	beq.n	8002124 <HAL_RCC_OscConfig+0x12c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d168      	bne.n	8002124 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e24c      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x76>
 8002060:	4b80      	ldr	r3, [pc, #512]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a7f      	ldr	r2, [pc, #508]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e02e      	b.n	80020cc <HAL_RCC_OscConfig+0xd4>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x98>
 8002076:	4b7b      	ldr	r3, [pc, #492]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7a      	ldr	r2, [pc, #488]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b78      	ldr	r3, [pc, #480]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a77      	ldr	r2, [pc, #476]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002088:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xd4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0xbc>
 800209a:	4b72      	ldr	r3, [pc, #456]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a71      	ldr	r2, [pc, #452]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xd4>
 80020b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b68      	ldr	r3, [pc, #416]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a67      	ldr	r2, [pc, #412]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7fe ffea 	bl	80010ac <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe ffe6 	bl	80010ac <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e200      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xe4>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe ffd6 	bl	80010ac <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7fe ffd2 	bl	80010ac <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	@ 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1ec      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	4b53      	ldr	r3, [pc, #332]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x10c>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d063      	beq.n	80021fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002132:	4b4c      	ldr	r3, [pc, #304]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800213e:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b08      	cmp	r3, #8
 8002148:	d11c      	bne.n	8002184 <HAL_RCC_OscConfig+0x18c>
 800214a:	4b46      	ldr	r3, [pc, #280]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_RCC_OscConfig+0x176>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1c0      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b3d      	ldr	r3, [pc, #244]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4939      	ldr	r1, [pc, #228]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	e03a      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	4b36      	ldr	r3, [pc, #216]	@ (8002268 <HAL_RCC_OscConfig+0x270>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7fe ff8b 	bl	80010ac <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219a:	f7fe ff87 	bl	80010ac <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e1a1      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4927      	ldr	r1, [pc, #156]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <HAL_RCC_OscConfig+0x270>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe ff6a 	bl	80010ac <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021dc:	f7fe ff66 	bl	80010ac <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e180      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03a      	beq.n	800227c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d019      	beq.n	8002242 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b17      	ldr	r3, [pc, #92]	@ (800226c <HAL_RCC_OscConfig+0x274>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7fe ff4a 	bl	80010ac <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7fe ff46 	bl	80010ac <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e160      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_RCC_OscConfig+0x26c>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800223a:	2001      	movs	r0, #1
 800223c:	f000 faba 	bl	80027b4 <RCC_Delay>
 8002240:	e01c      	b.n	800227c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_RCC_OscConfig+0x274>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7fe ff30 	bl	80010ac <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224e:	e00f      	b.n	8002270 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7fe ff2c 	bl	80010ac <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d908      	bls.n	8002270 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e146      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	42420000 	.word	0x42420000
 800226c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002270:	4b92      	ldr	r3, [pc, #584]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e9      	bne.n	8002250 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a6 	beq.w	80023d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b8b      	ldr	r3, [pc, #556]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b88      	ldr	r3, [pc, #544]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a87      	ldr	r2, [pc, #540]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	61d3      	str	r3, [r2, #28]
 80022a6:	4b85      	ldr	r3, [pc, #532]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b82      	ldr	r3, [pc, #520]	@ (80024c0 <HAL_RCC_OscConfig+0x4c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d118      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c2:	4b7f      	ldr	r3, [pc, #508]	@ (80024c0 <HAL_RCC_OscConfig+0x4c8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7e      	ldr	r2, [pc, #504]	@ (80024c0 <HAL_RCC_OscConfig+0x4c8>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ce:	f7fe feed 	bl	80010ac <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7fe fee9 	bl	80010ac <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	@ 0x64
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e103      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b75      	ldr	r3, [pc, #468]	@ (80024c0 <HAL_RCC_OscConfig+0x4c8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x312>
 80022fc:	4b6f      	ldr	r3, [pc, #444]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a6e      	ldr	r2, [pc, #440]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	e02d      	b.n	8002366 <HAL_RCC_OscConfig+0x36e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x334>
 8002312:	4b6a      	ldr	r3, [pc, #424]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a69      	ldr	r2, [pc, #420]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6213      	str	r3, [r2, #32]
 800231e:	4b67      	ldr	r3, [pc, #412]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a66      	ldr	r2, [pc, #408]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	e01c      	b.n	8002366 <HAL_RCC_OscConfig+0x36e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b05      	cmp	r3, #5
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x356>
 8002334:	4b61      	ldr	r3, [pc, #388]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4a60      	ldr	r2, [pc, #384]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	4b5e      	ldr	r3, [pc, #376]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a5d      	ldr	r2, [pc, #372]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	e00b      	b.n	8002366 <HAL_RCC_OscConfig+0x36e>
 800234e:	4b5b      	ldr	r3, [pc, #364]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a5a      	ldr	r2, [pc, #360]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	4b58      	ldr	r3, [pc, #352]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a57      	ldr	r2, [pc, #348]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d015      	beq.n	800239a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7fe fe9d 	bl	80010ac <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7fe fe99 	bl	80010ac <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0b1      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	4b4b      	ldr	r3, [pc, #300]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ee      	beq.n	8002376 <HAL_RCC_OscConfig+0x37e>
 8002398:	e014      	b.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7fe fe87 	bl	80010ac <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe fe83 	bl	80010ac <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e09b      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	4b40      	ldr	r3, [pc, #256]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ee      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b3c      	ldr	r3, [pc, #240]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a3b      	ldr	r2, [pc, #236]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8087 	beq.w	80024ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e0:	4b36      	ldr	r3, [pc, #216]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d061      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d146      	bne.n	8002482 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b33      	ldr	r3, [pc, #204]	@ (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7fe fe57 	bl	80010ac <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe fe53 	bl	80010ac <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e06d      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002414:	4b29      	ldr	r3, [pc, #164]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002428:	d108      	bne.n	800243c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800242a:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4921      	ldr	r1, [pc, #132]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243c:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a19      	ldr	r1, [r3, #32]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	430b      	orrs	r3, r1
 800244e:	491b      	ldr	r1, [pc, #108]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe fe27 	bl	80010ac <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe fe23 	bl	80010ac <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e03d      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x46a>
 8002480:	e035      	b.n	80024ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_RCC_OscConfig+0x4cc>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe fe10 	bl	80010ac <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fe0c 	bl	80010ac <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e026      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x498>
 80024ae:	e01e      	b.n	80024ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e019      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
 80024c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_RCC_OscConfig+0x500>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000

080024fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0d0      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b6a      	ldr	r3, [pc, #424]	@ (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b67      	ldr	r3, [pc, #412]	@ (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	4965      	ldr	r1, [pc, #404]	@ (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b63      	ldr	r3, [pc, #396]	@ (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002558:	4b59      	ldr	r3, [pc, #356]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a58      	ldr	r2, [pc, #352]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002562:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002570:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800257a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b50      	ldr	r3, [pc, #320]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	494d      	ldr	r1, [pc, #308]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d040      	beq.n	800261c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b47      	ldr	r3, [pc, #284]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d115      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b41      	ldr	r3, [pc, #260]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e073      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	4b3d      	ldr	r3, [pc, #244]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06b      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b39      	ldr	r3, [pc, #228]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4936      	ldr	r1, [pc, #216]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ec:	f7fe fd5e 	bl	80010ac <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7fe fd5a 	bl	80010ac <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e053      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b2d      	ldr	r3, [pc, #180]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b27      	ldr	r3, [pc, #156]	@ (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d210      	bcs.n	800264c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b24      	ldr	r3, [pc, #144]	@ (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4922      	ldr	r1, [pc, #136]	@ (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e032      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4916      	ldr	r1, [pc, #88]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002676:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490e      	ldr	r1, [pc, #56]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800268a:	f000 f821 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490a      	ldr	r1, [pc, #40]	@ (80026c4 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	4a09      	ldr	r2, [pc, #36]	@ (80026c8 <HAL_RCC_ClockConfig+0x1cc>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026a6:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_ClockConfig+0x1d0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fcbc 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40022000 	.word	0x40022000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08004294 	.word	0x08004294
 80026c8:	20000008 	.word	0x20000008
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x94>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x30>
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x36>
 80026fe:	e027      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002700:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x98>)
 8002702:	613b      	str	r3, [r7, #16]
      break;
 8002704:	e027      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	0c9b      	lsrs	r3, r3, #18
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	4a17      	ldr	r2, [pc, #92]	@ (800276c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d010      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800271e:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x94>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0c5b      	lsrs	r3, r3, #17
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xa0>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a0d      	ldr	r2, [pc, #52]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x98>)
 8002732:	fb03 f202 	mul.w	r2, r3, r2
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	e004      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0c      	ldr	r2, [pc, #48]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	613b      	str	r3, [r7, #16]
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x98>)
 8002752:	613b      	str	r3, [r7, #16]
      break;
 8002754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002756:	693b      	ldr	r3, [r7, #16]
}
 8002758:	4618      	mov	r0, r3
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	007a1200 	.word	0x007a1200
 800276c:	080042ac 	.word	0x080042ac
 8002770:	080042bc 	.word	0x080042bc
 8002774:	003d0900 	.word	0x003d0900

08002778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800277c:	4b02      	ldr	r3, [pc, #8]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x10>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	20000008 	.word	0x20000008

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff2 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	080042a4 	.word	0x080042a4

080027b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <RCC_Delay+0x34>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	@ (80027ec <RCC_Delay+0x38>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0a5b      	lsrs	r3, r3, #9
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027d0:	bf00      	nop
  }
  while (Delay --);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	60fa      	str	r2, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f9      	bne.n	80027d0 <RCC_Delay+0x1c>
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	20000008 	.word	0x20000008
 80027ec:	10624dd3 	.word	0x10624dd3

080027f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e076      	b.n	80028f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002812:	d009      	beq.n	8002828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
 800281a:	e005      	b.n	8002828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe f9e4 	bl	8000c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800285e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ac:	ea42 0103 	orr.w	r1, r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	0c1a      	lsrs	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f002 0204 	and.w	r2, r2, #4
 80028ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002908:	f7fe fbd0 	bl	80010ac <HAL_GetTick>
 800290c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
 8002920:	e12a      	b.n	8002b78 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_SPI_Transmit+0x36>
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e122      	b.n	8002b78 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_SPI_Transmit+0x48>
 800293c:	2302      	movs	r3, #2
 800293e:	e11b      	b.n	8002b78 <HAL_SPI_Transmit+0x280>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2203      	movs	r2, #3
 800294c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800298e:	d10f      	bne.n	80029b0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800299e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ba:	2b40      	cmp	r3, #64	@ 0x40
 80029bc:	d007      	beq.n	80029ce <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d6:	d152      	bne.n	8002a7e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_SPI_Transmit+0xee>
 80029e0:	8b7b      	ldrh	r3, [r7, #26]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d145      	bne.n	8002a72 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	1c9a      	adds	r2, r3, #2
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a0a:	e032      	b.n	8002a72 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d112      	bne.n	8002a40 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	881a      	ldrh	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	1c9a      	adds	r2, r3, #2
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a3e:	e018      	b.n	8002a72 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a40:	f7fe fb34 	bl	80010ac <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d803      	bhi.n	8002a58 <HAL_SPI_Transmit+0x160>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d102      	bne.n	8002a5e <HAL_SPI_Transmit+0x166>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e082      	b.n	8002b78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1c7      	bne.n	8002a0c <HAL_SPI_Transmit+0x114>
 8002a7c:	e053      	b.n	8002b26 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_SPI_Transmit+0x194>
 8002a86:	8b7b      	ldrh	r3, [r7, #26]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d147      	bne.n	8002b1c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	7812      	ldrb	r2, [r2, #0]
 8002a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ab2:	e033      	b.n	8002b1c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d113      	bne.n	8002aea <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	7812      	ldrb	r2, [r2, #0]
 8002ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ae8:	e018      	b.n	8002b1c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aea:	f7fe fadf 	bl	80010ac <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d803      	bhi.n	8002b02 <HAL_SPI_Transmit+0x20a>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d102      	bne.n	8002b08 <HAL_SPI_Transmit+0x210>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e02d      	b.n	8002b78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1c6      	bne.n	8002ab4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fbc4 	bl	80032b8 <SPI_EndRxTxTransaction>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002b76:	2300      	movs	r3, #0
  }
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d001      	beq.n	8002ba0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e104      	b.n	8002daa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ba8:	d112      	bne.n	8002bd0 <HAL_SPI_Receive+0x50>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f8f3 	bl	8002db2 <HAL_SPI_TransmitReceive>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	e0ec      	b.n	8002daa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd0:	f7fe fa6c 	bl	80010ac <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_SPI_Receive+0x62>
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0e1      	b.n	8002daa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_SPI_Receive+0x74>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e0da      	b.n	8002daa <HAL_SPI_Receive+0x22a>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	88fa      	ldrh	r2, [r7, #6]
 8002c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c42:	d10f      	bne.n	8002c64 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6e:	2b40      	cmp	r3, #64	@ 0x40
 8002c70:	d007      	beq.n	8002c82 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d170      	bne.n	8002d6c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c8a:	e035      	b.n	8002cf8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d115      	bne.n	8002cc6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f103 020c 	add.w	r2, r3, #12
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca6:	7812      	ldrb	r2, [r2, #0]
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cc4:	e018      	b.n	8002cf8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc6:	f7fe f9f1 	bl	80010ac <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d803      	bhi.n	8002cde <HAL_SPI_Receive+0x15e>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d102      	bne.n	8002ce4 <HAL_SPI_Receive+0x164>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e058      	b.n	8002daa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1c4      	bne.n	8002c8c <HAL_SPI_Receive+0x10c>
 8002d02:	e038      	b.n	8002d76 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d113      	bne.n	8002d3a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	1c9a      	adds	r2, r3, #2
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d38:	e018      	b.n	8002d6c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d3a:	f7fe f9b7 	bl	80010ac <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d803      	bhi.n	8002d52 <HAL_SPI_Receive+0x1d2>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_Receive+0x1d8>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e01e      	b.n	8002daa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1c6      	bne.n	8002d04 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	6839      	ldr	r1, [r7, #0]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa4a 	bl	8003214 <SPI_EndRxTransaction>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b08a      	sub	sp, #40	@ 0x28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dc4:	f7fe f972 	bl	80010ac <HAL_GetTick>
 8002dc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ddc:	7ffb      	ldrb	r3, [r7, #31]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d00c      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x4a>
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002de8:	d106      	bne.n	8002df8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <HAL_SPI_TransmitReceive+0x46>
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d001      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e17f      	b.n	80030fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_SPI_TransmitReceive+0x5c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SPI_TransmitReceive+0x5c>
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e174      	b.n	80030fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_SPI_TransmitReceive+0x6e>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e16d      	b.n	80030fc <HAL_SPI_TransmitReceive+0x34a>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d003      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2205      	movs	r2, #5
 8002e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	887a      	ldrh	r2, [r7, #2]
 8002e5e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7c:	2b40      	cmp	r3, #64	@ 0x40
 8002e7e:	d007      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e98:	d17e      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0xf6>
 8002ea2:	8afb      	ldrh	r3, [r7, #22]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d16c      	bne.n	8002f82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ecc:	e059      	b.n	8002f82 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d11b      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x162>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x162>
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d113      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	881a      	ldrh	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	1c9a      	adds	r2, r3, #2
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d119      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0x1a4>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d014      	beq.n	8002f56 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f36:	b292      	uxth	r2, r2
 8002f38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3e:	1c9a      	adds	r2, r3, #2
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f52:	2301      	movs	r3, #1
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f56:	f7fe f8a9 	bl	80010ac <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d80d      	bhi.n	8002f82 <HAL_SPI_TransmitReceive+0x1d0>
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d009      	beq.n	8002f82 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e0bc      	b.n	80030fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1a0      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x11c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d19b      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x11c>
 8002f96:	e082      	b.n	800309e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0x1f4>
 8002fa0:	8afb      	ldrh	r3, [r7, #22]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d171      	bne.n	800308a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	7812      	ldrb	r2, [r2, #0]
 8002fb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fcc:	e05d      	b.n	800308a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d11c      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x264>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d017      	beq.n	8003016 <HAL_SPI_TransmitReceive+0x264>
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d114      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	7812      	ldrb	r2, [r2, #0]
 8002ff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d119      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x2a6>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d014      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003058:	f7fe f828 	bl	80010ac <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003064:	429a      	cmp	r2, r3
 8003066:	d803      	bhi.n	8003070 <HAL_SPI_TransmitReceive+0x2be>
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d102      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x2c4>
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e038      	b.n	80030fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d19c      	bne.n	8002fce <HAL_SPI_TransmitReceive+0x21c>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d197      	bne.n	8002fce <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800309e:	6a3a      	ldr	r2, [r7, #32]
 80030a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f908 	bl	80032b8 <SPI_EndRxTxTransaction>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01d      	b.n	80030fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3728      	adds	r7, #40	@ 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003114:	f7fd ffca 	bl	80010ac <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4413      	add	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003124:	f7fd ffc2 	bl	80010ac <HAL_GetTick>
 8003128:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800312a:	4b39      	ldr	r3, [pc, #228]	@ (8003210 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	015b      	lsls	r3, r3, #5
 8003130:	0d1b      	lsrs	r3, r3, #20
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800313a:	e054      	b.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d050      	beq.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003144:	f7fd ffb2 	bl	80010ac <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	429a      	cmp	r2, r3
 8003152:	d902      	bls.n	800315a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d13d      	bne.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003168:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003172:	d111      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800317c:	d004      	beq.n	8003188 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003186:	d107      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003196:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a0:	d10f      	bne.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e017      	b.n	8003206 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d19b      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000008 	.word	0x20000008

08003214 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003228:	d111      	bne.n	800324e <SPI_EndRxTransaction+0x3a>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003232:	d004      	beq.n	800323e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323c:	d107      	bne.n	800324e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800324c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003256:	d117      	bne.n	8003288 <SPI_EndRxTransaction+0x74>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003260:	d112      	bne.n	8003288 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2200      	movs	r2, #0
 800326a:	2101      	movs	r1, #1
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff ff49 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01a      	beq.n	80032ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e013      	b.n	80032b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	2180      	movs	r1, #128	@ 0x80
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ff36 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e000      	b.n	80032b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2201      	movs	r2, #1
 80032cc:	2102      	movs	r1, #2
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff ff18 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032de:	f043 0220 	orr.w	r2, r3, #32
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e013      	b.n	8003312 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2200      	movs	r2, #0
 80032f2:	2180      	movs	r1, #128	@ 0x80
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff ff05 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e000      	b.n	8003312 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e093      	b.n	8003456 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd fdf0 	bl	8000f28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800335e:	f023 0307 	bic.w	r3, r3, #7
 8003362:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f000 f98a 	bl	8003688 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339c:	f023 0303 	bic.w	r3, r3, #3
 80033a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	4313      	orrs	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80033ba:	f023 030c 	bic.w	r3, r3, #12
 80033be:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	4313      	orrs	r3, r2
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	011a      	lsls	r2, r3, #4
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	031b      	lsls	r3, r3, #12
 80033ea:	4313      	orrs	r3, r2
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80033f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	4313      	orrs	r3, r2
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01b      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 0202 	mvn.w	r2, #2
 8003492:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fd f88b 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 80034ae:	e005      	b.n	80034bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f8cd 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8d3 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01b      	beq.n	800350e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f06f 0204 	mvn.w	r2, #4
 80034de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7fd f865 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 80034fa:	e005      	b.n	8003508 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8a7 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8ad 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01b      	beq.n	800355a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0208 	mvn.w	r2, #8
 800352a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2204      	movs	r2, #4
 8003530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fd f83f 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8003546:	e005      	b.n	8003554 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f881 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f887 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01b      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f06f 0210 	mvn.w	r2, #16
 8003576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2208      	movs	r2, #8
 800357c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd f819 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8003592:	e005      	b.n	80035a0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f85b 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f861 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00c      	beq.n	80035ca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0201 	mvn.w	r2, #1
 80035c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f83a 	bl	800363e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00c      	beq.n	80035ee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f922 	bl	8003832 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00c      	beq.n	8003612 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800360a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f831 	bl	8003674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00c      	beq.n	8003636 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0220 	mvn.w	r2, #32
 800362e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8f5 	bl	8003820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
	...

08003688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a2f      	ldr	r2, [pc, #188]	@ (8003758 <TIM_Base_SetConfig+0xd0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00b      	beq.n	80036b8 <TIM_Base_SetConfig+0x30>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a6:	d007      	beq.n	80036b8 <TIM_Base_SetConfig+0x30>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a2c      	ldr	r2, [pc, #176]	@ (800375c <TIM_Base_SetConfig+0xd4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_Base_SetConfig+0x30>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003760 <TIM_Base_SetConfig+0xd8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d108      	bne.n	80036ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a22      	ldr	r2, [pc, #136]	@ (8003758 <TIM_Base_SetConfig+0xd0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <TIM_Base_SetConfig+0x62>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d8:	d007      	beq.n	80036ea <TIM_Base_SetConfig+0x62>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1f      	ldr	r2, [pc, #124]	@ (800375c <TIM_Base_SetConfig+0xd4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_Base_SetConfig+0x62>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <TIM_Base_SetConfig+0xd8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d108      	bne.n	80036fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a0d      	ldr	r2, [pc, #52]	@ (8003758 <TIM_Base_SetConfig+0xd0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d103      	bne.n	8003730 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	611a      	str	r2, [r3, #16]
  }
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e046      	b.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a16      	ldr	r2, [pc, #88]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c8:	d009      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a12      	ldr	r2, [pc, #72]	@ (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a10      	ldr	r2, [pc, #64]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10c      	bne.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800

08003820 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <BSP_RF_Init>:
#include "bsp_rf.h"
static BSP_RF_Params_TypeDef *params;
static BSP_RF_MODE_TypeDef mode = NONE;
static uint8_t rx_data[NRF24L01P_PAYLOAD_LENGTH];
void BSP_RF_Init(BSP_RF_Params_TypeDef* _params)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
    params = _params;
 800384c:	4a0b      	ldr	r2, [pc, #44]	@ (800387c <BSP_RF_Init+0x38>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6013      	str	r3, [r2, #0]
    nrf24l01p_init(_params->rate, _params->channel, _params->retransmit_count);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	885b      	ldrh	r3, [r3, #2]
 800385c:	b2d9      	uxtb	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	791b      	ldrb	r3, [r3, #4]
 8003862:	461a      	mov	r2, r3
 8003864:	f000 f992 	bl	8003b8c <nrf24l01p_init>
    nrf24l01p_standby();
 8003868:	f000 f9de 	bl	8003c28 <nrf24l01p_standby>
    mode = STANDBY;
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <BSP_RF_Init+0x3c>)
 800386e:	2203      	movs	r2, #3
 8003870:	701a      	strb	r2, [r3, #0]
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	2000015c 	.word	0x2000015c
 8003880:	20000160 	.word	0x20000160

08003884 <BSP_RF_Sending>:

void BSP_RF_Sending(){
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	if(mode == STANDBY){
 8003888:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <BSP_RF_Sending+0x2c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d102      	bne.n	8003896 <BSP_RF_Sending+0x12>
		nrf24l01p_tx_init();
 8003890:	f000 f92e 	bl	8003af0 <nrf24l01p_tx_init>
 8003894:	e007      	b.n	80038a6 <BSP_RF_Sending+0x22>
	}else if(mode == RX){
 8003896:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <BSP_RF_Sending+0x2c>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d103      	bne.n	80038a6 <BSP_RF_Sending+0x22>
		nrf24l01p_standby();
 800389e:	f000 f9c3 	bl	8003c28 <nrf24l01p_standby>
		nrf24l01p_tx_init();
 80038a2:	f000 f925 	bl	8003af0 <nrf24l01p_tx_init>
	}
	mode = TX;
 80038a6:	4b02      	ldr	r3, [pc, #8]	@ (80038b0 <BSP_RF_Sending+0x2c>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000160 	.word	0x20000160

080038b4 <BSP_RF_SendMessage>:

void BSP_RF_SendMessage(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH])
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	nrf24l01p_tx_transmit(payload);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f959 	bl	8003b74 <nrf24l01p_tx_transmit>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <BSP_RF_Listening>:

void BSP_RF_Listening()
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
	if(mode == STANDBY){
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <BSP_RF_Listening+0x2c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d102      	bne.n	80038de <BSP_RF_Listening+0x12>
		nrf24l01p_rx_init();
 80038d8:	f000 f8da 	bl	8003a90 <nrf24l01p_rx_init>
 80038dc:	e007      	b.n	80038ee <BSP_RF_Listening+0x22>
	}
	else if(mode == TX){
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <BSP_RF_Listening+0x2c>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d103      	bne.n	80038ee <BSP_RF_Listening+0x22>
		nrf24l01p_standby();
 80038e6:	f000 f99f 	bl	8003c28 <nrf24l01p_standby>
		nrf24l01p_rx_init();
 80038ea:	f000 f8d1 	bl	8003a90 <nrf24l01p_rx_init>
	}
	mode = RX;
 80038ee:	4b02      	ldr	r3, [pc, #8]	@ (80038f8 <BSP_RF_Listening+0x2c>)
 80038f0:	2202      	movs	r2, #2
 80038f2:	701a      	strb	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000160 	.word	0x20000160

080038fc <_BSP_RF_ReceiveMessage>:

void _BSP_RF_ReceiveMessage(){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	nrf24l01p_rx_receive(rx_data);
 8003900:	4803      	ldr	r0, [pc, #12]	@ (8003910 <_BSP_RF_ReceiveMessage+0x14>)
 8003902:	f000 f923 	bl	8003b4c <nrf24l01p_rx_receive>
	nrf24l01p_clear_rx_dr();
 8003906:	f000 fadd 	bl	8003ec4 <nrf24l01p_clear_rx_dr>
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000164 	.word	0x20000164

08003914 <BSP_RF_IrqHandler>:

uint8_t BSP_RF_IrqHandler(){
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24l01p_get_status();
 800391e:	f000 faa9 	bl	8003e74 <nrf24l01p_get_status>
 8003922:	4603      	mov	r3, r0
 8003924:	71bb      	strb	r3, [r7, #6]
	if(status >> 4 == 1){
 8003926:	79bb      	ldrb	r3, [r7, #6]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <BSP_RF_IrqHandler+0x22>
		nrf24l01p_clear_max_rt();
 8003930:	f000 faf0 	bl	8003f14 <nrf24l01p_clear_max_rt>
 8003934:	e010      	b.n	8003958 <BSP_RF_IrqHandler+0x44>
	}
	else if(status >> 5 == 1){
 8003936:	79bb      	ldrb	r3, [r7, #6]
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d102      	bne.n	8003946 <BSP_RF_IrqHandler+0x32>
		nrf24l01p_clear_tx_ds();
 8003940:	f000 fad4 	bl	8003eec <nrf24l01p_clear_tx_ds>
 8003944:	e008      	b.n	8003958 <BSP_RF_IrqHandler+0x44>
	}
	else if(status >> 6 == 1){
 8003946:	79bb      	ldrb	r3, [r7, #6]
 8003948:	099b      	lsrs	r3, r3, #6
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d103      	bne.n	8003958 <BSP_RF_IrqHandler+0x44>
		_BSP_RF_ReceiveMessage();
 8003950:	f7ff ffd4 	bl	80038fc <_BSP_RF_ReceiveMessage>
		ret = 1;
 8003954:	2301      	movs	r3, #1
 8003956:	71fb      	strb	r3, [r7, #7]
	}

	return ret;
 8003958:	79fb      	ldrb	r3, [r7, #7]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <BSP_RF_ReadData>:

void BSP_RF_ReadData(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH]){
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	memcpy(payload, rx_data, NRF24L01P_PAYLOAD_LENGTH);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4905      	ldr	r1, [pc, #20]	@ (8003984 <BSP_RF_ReadData+0x20>)
 8003970:	461a      	mov	r2, r3
 8003972:	460b      	mov	r3, r1
 8003974:	cb03      	ldmia	r3!, {r0, r1}
 8003976:	6010      	str	r0, [r2, #0]
 8003978:	6051      	str	r1, [r2, #4]
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	20000164 	.word	0x20000164

08003988 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 800398c:	2201      	movs	r2, #1
 800398e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003992:	4802      	ldr	r0, [pc, #8]	@ (800399c <cs_high+0x14>)
 8003994:	f7fd fe4a 	bl	800162c <HAL_GPIO_WritePin>
}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40010800 	.word	0x40010800

080039a0 <cs_low>:

static void cs_low()
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039aa:	4802      	ldr	r0, [pc, #8]	@ (80039b4 <cs_low+0x14>)
 80039ac:	f7fd fe3e 	bl	800162c <HAL_GPIO_WritePin>
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40010800 	.word	0x40010800

080039b8 <ce_high>:

static void ce_high()
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 80039bc:	2201      	movs	r2, #1
 80039be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039c2:	4802      	ldr	r0, [pc, #8]	@ (80039cc <ce_high+0x14>)
 80039c4:	f7fd fe32 	bl	800162c <HAL_GPIO_WritePin>
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40010c00 	.word	0x40010c00

080039d0 <ce_low>:

static void ce_low()
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 80039d4:	2200      	movs	r2, #0
 80039d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039da:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <ce_low+0x14>)
 80039dc:	f7fd fe26 	bl	800162c <HAL_GPIO_WritePin>
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40010c00 	.word	0x40010c00

080039e8 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80039f6:	f7ff ffd3 	bl	80039a0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80039fa:	f107 020e 	add.w	r2, r7, #14
 80039fe:	f107 010f 	add.w	r1, r7, #15
 8003a02:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2301      	movs	r3, #1
 8003a0a:	4809      	ldr	r0, [pc, #36]	@ (8003a30 <read_register+0x48>)
 8003a0c:	f7ff f9d1 	bl	8002db2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8003a10:	f107 010d 	add.w	r1, r7, #13
 8003a14:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4805      	ldr	r0, [pc, #20]	@ (8003a30 <read_register+0x48>)
 8003a1c:	f7ff f8b0 	bl	8002b80 <HAL_SPI_Receive>
    cs_high();
 8003a20:	f7ff ffb2 	bl	8003988 <cs_high>

    return read_val;
 8003a24:	7b7b      	ldrb	r3, [r7, #13]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200000ac 	.word	0x200000ac

08003a34 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	f043 0320 	orr.w	r3, r3, #32
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8003a4e:	79bb      	ldrb	r3, [r7, #6]
 8003a50:	737b      	strb	r3, [r7, #13]

    cs_low();
 8003a52:	f7ff ffa5 	bl	80039a0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003a56:	f107 020e 	add.w	r2, r7, #14
 8003a5a:	f107 010f 	add.w	r1, r7, #15
 8003a5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	2301      	movs	r3, #1
 8003a66:	4809      	ldr	r0, [pc, #36]	@ (8003a8c <write_register+0x58>)
 8003a68:	f7ff f9a3 	bl	8002db2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8003a6c:	f107 010d 	add.w	r1, r7, #13
 8003a70:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003a74:	2201      	movs	r2, #1
 8003a76:	4805      	ldr	r0, [pc, #20]	@ (8003a8c <write_register+0x58>)
 8003a78:	f7fe ff3e 	bl	80028f8 <HAL_SPI_Transmit>
    cs_high();
 8003a7c:	f7ff ff84 	bl	8003988 <cs_high>

    return write_val;
 8003a80:	7b7b      	ldrb	r3, [r7, #13]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200000ac 	.word	0x200000ac

08003a90 <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
	nrf24l01p_flush_rx_fifo();
 8003a96:	f000 f9bd 	bl	8003e14 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_prx_mode();
 8003a9a:	f000 f949 	bl	8003d30 <nrf24l01p_prx_mode>
    ce_high();
 8003a9e:	f7ff ff8b 	bl	80039b8 <ce_high>
    DELAY_US(150);
 8003aa2:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <nrf24l01p_rx_init+0x54>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <nrf24l01p_rx_init+0x58>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0f      	ldr	r2, [pc, #60]	@ (8003aec <nrf24l01p_rx_init+0x5c>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0c9b      	lsrs	r3, r3, #18
 8003ab4:	2296      	movs	r2, #150	@ 0x96
 8003ab6:	fb03 f202 	mul.w	r2, r3, r2
 8003aba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <nrf24l01p_rx_init+0x58>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	490b      	ldr	r1, [pc, #44]	@ (8003aec <nrf24l01p_rx_init+0x5c>)
 8003ac0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ac4:	0c9b      	lsrs	r3, r3, #18
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <nrf24l01p_rx_init+0x54>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d8f8      	bhi.n	8003acc <nrf24l01p_rx_init+0x3c>
}
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	e000e010 	.word	0xe000e010
 8003ae8:	20000008 	.word	0x20000008
 8003aec:	431bde83 	.word	0x431bde83

08003af0 <nrf24l01p_tx_init>:

void nrf24l01p_tx_init()
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0

    nrf24l01p_ptx_mode();
 8003af6:	f000 f930 	bl	8003d5a <nrf24l01p_ptx_mode>
    ce_high();
 8003afa:	f7ff ff5d 	bl	80039b8 <ce_high>
    DELAY_US(150);
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <nrf24l01p_tx_init+0x50>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <nrf24l01p_tx_init+0x54>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0f      	ldr	r2, [pc, #60]	@ (8003b48 <nrf24l01p_tx_init+0x58>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0c9b      	lsrs	r3, r3, #18
 8003b10:	2296      	movs	r2, #150	@ 0x96
 8003b12:	fb03 f202 	mul.w	r2, r3, r2
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <nrf24l01p_tx_init+0x54>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	490b      	ldr	r1, [pc, #44]	@ (8003b48 <nrf24l01p_tx_init+0x58>)
 8003b1c:	fba1 1303 	umull	r1, r3, r1, r3
 8003b20:	0c9b      	lsrs	r3, r3, #18
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <nrf24l01p_tx_init+0x50>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d8f8      	bhi.n	8003b28 <nrf24l01p_tx_init+0x38>
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	e000e010 	.word	0xe000e010
 8003b44:	20000008 	.word	0x20000008
 8003b48:	431bde83 	.word	0x431bde83

08003b4c <nrf24l01p_rx_receive>:

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f915 	bl	8003d84 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8003b5a:	f000 f9b3 	bl	8003ec4 <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003b5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b62:	4803      	ldr	r0, [pc, #12]	@ (8003b70 <nrf24l01p_rx_receive+0x24>)
 8003b64:	f7fd fd7a 	bl	800165c <HAL_GPIO_TogglePin>
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40011000 	.word	0x40011000

08003b74 <nrf24l01p_tx_transmit>:

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f925 	bl	8003dcc <nrf24l01p_write_tx_fifo>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <nrf24l01p_init>:
    }
}

/* nRF24L01+ Sub Functions */

void nrf24l01p_init(channel MHz, air_data_rate bps, uint8_t retransmit_count){
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	80fb      	strh	r3, [r7, #6]
 8003b96:	460b      	mov	r3, r1
 8003b98:	717b      	strb	r3, [r7, #5]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	713b      	strb	r3, [r7, #4]
	nrf24l01p_reset();
 8003b9e:	f000 f873 	bl	8003c88 <nrf24l01p_reset>
    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8003ba2:	2008      	movs	r0, #8
 8003ba4:	f000 f980 	bl	8003ea8 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fa52 	bl	8004054 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8003bb0:	797b      	ldrb	r3, [r7, #5]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fa7e 	bl	80040b4 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8003bb8:	2003      	movs	r0, #3
 8003bba:	f000 fa5e 	bl	800407a <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f000 f9d1 	bl	8003f66 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8003bc4:	2005      	movs	r0, #5
 8003bc6:	f000 f9f1 	bl	8003fac <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(retransmit_count);
 8003bca:	793b      	ldrb	r3, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f9fd 	bl	8003fcc <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8003bd2:	20fa      	movs	r0, #250	@ 0xfa
 8003bd4:	f000 fa16 	bl	8004004 <nrf24l01p_auto_retransmit_delay>
    DELAY_US(100);
 8003bd8:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <nrf24l01p_init+0x90>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <nrf24l01p_init+0x94>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a10      	ldr	r2, [pc, #64]	@ (8003c24 <nrf24l01p_init+0x98>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	0c9b      	lsrs	r3, r3, #18
 8003bea:	2264      	movs	r2, #100	@ 0x64
 8003bec:	fb03 f202 	mul.w	r2, r3, r2
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <nrf24l01p_init+0x94>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	490b      	ldr	r1, [pc, #44]	@ (8003c24 <nrf24l01p_init+0x98>)
 8003bf6:	fba1 1303 	umull	r1, r3, r1, r3
 8003bfa:	0c9b      	lsrs	r3, r3, #18
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <nrf24l01p_init+0x90>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d8f8      	bhi.n	8003c02 <nrf24l01p_init+0x76>
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	e000e010 	.word	0xe000e010
 8003c20:	20000008 	.word	0x20000008
 8003c24:	431bde83 	.word	0x431bde83

08003c28 <nrf24l01p_standby>:

void nrf24l01p_standby()
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
	nrf24l01p_power_up();
 8003c2e:	f000 f985 	bl	8003f3c <nrf24l01p_power_up>
	ce_low();
 8003c32:	f7ff fecd 	bl	80039d0 <ce_low>
	DELAY_US(40);
 8003c36:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <nrf24l01p_standby+0x54>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <nrf24l01p_standby+0x58>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a10      	ldr	r2, [pc, #64]	@ (8003c84 <nrf24l01p_standby+0x5c>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0c9a      	lsrs	r2, r3, #18
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4619      	mov	r1, r3
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <nrf24l01p_standby+0x58>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a0b      	ldr	r2, [pc, #44]	@ (8003c84 <nrf24l01p_standby+0x5c>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	0c9b      	lsrs	r3, r3, #18
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	1acb      	subs	r3, r1, r3
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <nrf24l01p_standby+0x54>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d8f8      	bhi.n	8003c64 <nrf24l01p_standby+0x3c>
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	e000e010 	.word	0xe000e010
 8003c80:	20000008 	.word	0x20000008
 8003c84:	431bde83 	.word	0x431bde83

08003c88 <nrf24l01p_reset>:

void nrf24l01p_reset()
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8003c8c:	f7ff fe7c 	bl	8003988 <cs_high>
    ce_low();
 8003c90:	f7ff fe9e 	bl	80039d0 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8003c94:	2108      	movs	r1, #8
 8003c96:	2000      	movs	r0, #0
 8003c98:	f7ff fecc 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8003c9c:	213f      	movs	r1, #63	@ 0x3f
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f7ff fec8 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8003ca4:	2103      	movs	r1, #3
 8003ca6:	2002      	movs	r0, #2
 8003ca8:	f7ff fec4 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8003cac:	2103      	movs	r1, #3
 8003cae:	2003      	movs	r0, #3
 8003cb0:	f7ff fec0 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	2004      	movs	r0, #4
 8003cb8:	f7ff febc 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	2005      	movs	r0, #5
 8003cc0:	f7ff feb8 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8003cc4:	2107      	movs	r1, #7
 8003cc6:	2006      	movs	r0, #6
 8003cc8:	f7ff feb4 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8003ccc:	217e      	movs	r1, #126	@ 0x7e
 8003cce:	2007      	movs	r0, #7
 8003cd0:	f7ff feb0 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2011      	movs	r0, #17
 8003cd8:	f7ff feac 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8003cdc:	2100      	movs	r1, #0
 8003cde:	2011      	movs	r0, #17
 8003ce0:	f7ff fea8 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2012      	movs	r0, #18
 8003ce8:	f7ff fea4 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8003cec:	2100      	movs	r1, #0
 8003cee:	2013      	movs	r0, #19
 8003cf0:	f7ff fea0 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	2014      	movs	r0, #20
 8003cf8:	f7ff fe9c 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	2015      	movs	r0, #21
 8003d00:	f7ff fe98 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8003d04:	2100      	movs	r1, #0
 8003d06:	2016      	movs	r0, #22
 8003d08:	f7ff fe94 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8003d0c:	2111      	movs	r1, #17
 8003d0e:	2017      	movs	r0, #23
 8003d10:	f7ff fe90 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8003d14:	2100      	movs	r1, #0
 8003d16:	201c      	movs	r0, #28
 8003d18:	f7ff fe8c 	bl	8003a34 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	201d      	movs	r0, #29
 8003d20:	f7ff fe88 	bl	8003a34 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8003d24:	f000 f876 	bl	8003e14 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8003d28:	f000 f88c 	bl	8003e44 <nrf24l01p_flush_tx_fifo>
}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7ff fe56 	bl	80039e8 <read_register>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7ff fe71 	bl	8003a34 <write_register>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <nrf24l01p_ptx_mode>:

void nrf24l01p_ptx_mode()
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7ff fe41 	bl	80039e8 <read_register>
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	4619      	mov	r1, r3
 8003d76:	2000      	movs	r0, #0
 8003d78:	f7ff fe5c 	bl	8003a34 <write_register>
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <nrf24l01p_read_rx_fifo>:

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8003d8c:	2361      	movs	r3, #97	@ 0x61
 8003d8e:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8003d90:	f7ff fe06 	bl	80039a0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003d94:	f107 020e 	add.w	r2, r7, #14
 8003d98:	f107 010f 	add.w	r1, r7, #15
 8003d9c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2301      	movs	r3, #1
 8003da4:	4808      	ldr	r0, [pc, #32]	@ (8003dc8 <nrf24l01p_read_rx_fifo+0x44>)
 8003da6:	f7ff f804 	bl	8002db2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8003daa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003dae:	2208      	movs	r2, #8
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4805      	ldr	r0, [pc, #20]	@ (8003dc8 <nrf24l01p_read_rx_fifo+0x44>)
 8003db4:	f7fe fee4 	bl	8002b80 <HAL_SPI_Receive>
    cs_high();
 8003db8:	f7ff fde6 	bl	8003988 <cs_high>

    return status;
 8003dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200000ac 	.word	0x200000ac

08003dcc <nrf24l01p_write_tx_fifo>:

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8003dd4:	23a0      	movs	r3, #160	@ 0xa0
 8003dd6:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8003dd8:	f7ff fde2 	bl	80039a0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003ddc:	f107 020e 	add.w	r2, r7, #14
 8003de0:	f107 010f 	add.w	r1, r7, #15
 8003de4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	2301      	movs	r3, #1
 8003dec:	4808      	ldr	r0, [pc, #32]	@ (8003e10 <nrf24l01p_write_tx_fifo+0x44>)
 8003dee:	f7fe ffe0 	bl	8002db2 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8003df2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003df6:	2208      	movs	r2, #8
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4805      	ldr	r0, [pc, #20]	@ (8003e10 <nrf24l01p_write_tx_fifo+0x44>)
 8003dfc:	f7fe fd7c 	bl	80028f8 <HAL_SPI_Transmit>
    cs_high(); 
 8003e00:	f7ff fdc2 	bl	8003988 <cs_high>

    return status;
 8003e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	200000ac 	.word	0x200000ac

08003e14 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8003e1a:	23e2      	movs	r3, #226	@ 0xe2
 8003e1c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8003e1e:	f7ff fdbf 	bl	80039a0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003e22:	1dba      	adds	r2, r7, #6
 8003e24:	1df9      	adds	r1, r7, #7
 8003e26:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	4804      	ldr	r0, [pc, #16]	@ (8003e40 <nrf24l01p_flush_rx_fifo+0x2c>)
 8003e30:	f7fe ffbf 	bl	8002db2 <HAL_SPI_TransmitReceive>
    cs_high();
 8003e34:	f7ff fda8 	bl	8003988 <cs_high>
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200000ac 	.word	0x200000ac

08003e44 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8003e4a:	23e1      	movs	r3, #225	@ 0xe1
 8003e4c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8003e4e:	f7ff fda7 	bl	80039a0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003e52:	1dba      	adds	r2, r7, #6
 8003e54:	1df9      	adds	r1, r7, #7
 8003e56:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4804      	ldr	r0, [pc, #16]	@ (8003e70 <nrf24l01p_flush_tx_fifo+0x2c>)
 8003e60:	f7fe ffa7 	bl	8002db2 <HAL_SPI_TransmitReceive>
    cs_high();
 8003e64:	f7ff fd90 	bl	8003988 <cs_high>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	200000ac 	.word	0x200000ac

08003e74 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8003e7a:	23ff      	movs	r3, #255	@ 0xff
 8003e7c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8003e7e:	f7ff fd8f 	bl	80039a0 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003e82:	1dba      	adds	r2, r7, #6
 8003e84:	1df9      	adds	r1, r7, #7
 8003e86:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4805      	ldr	r0, [pc, #20]	@ (8003ea4 <nrf24l01p_get_status+0x30>)
 8003e90:	f7fe ff8f 	bl	8002db2 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8003e94:	f7ff fd78 	bl	8003988 <cs_high>

    return status;
 8003e98:	79bb      	ldrb	r3, [r7, #6]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200000ac 	.word	0x200000ac

08003ea8 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	2011      	movs	r0, #17
 8003eb8:	f7ff fdbc 	bl	8003a34 <write_register>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8003eca:	f7ff ffd3 	bl	8003e74 <nrf24l01p_get_status>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ed8:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	4619      	mov	r1, r3
 8003ede:	2007      	movs	r0, #7
 8003ee0:	f7ff fda8 	bl	8003a34 <write_register>
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <nrf24l01p_clear_tx_ds>:

void nrf24l01p_clear_tx_ds()
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8003ef2:	f7ff ffbf 	bl	8003e74 <nrf24l01p_get_status>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	f043 0320 	orr.w	r3, r3, #32
 8003f00:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	4619      	mov	r1, r3
 8003f06:	2007      	movs	r0, #7
 8003f08:	f7ff fd94 	bl	8003a34 <write_register>
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8003f1a:	f7ff ffab 	bl	8003e74 <nrf24l01p_get_status>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	f043 0310 	orr.w	r3, r3, #16
 8003f28:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	2007      	movs	r0, #7
 8003f30:	f7ff fd80 	bl	8003a34 <write_register>
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003f42:	2000      	movs	r0, #0
 8003f44:	f7ff fd50 	bl	80039e8 <read_register>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	f043 0302 	orr.w	r3, r3, #2
 8003f52:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	4619      	mov	r1, r3
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7ff fd6b 	bl	8003a34 <write_register>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003f70:	2000      	movs	r0, #0
 8003f72:	f7ff fd39 	bl	80039e8 <read_register>
 8003f76:	4603      	mov	r3, r0
 8003f78:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d002      	beq.n	8003f86 <nrf24l01p_set_crc_length+0x20>
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d005      	beq.n	8003f90 <nrf24l01p_set_crc_length+0x2a>
 8003f84:	e009      	b.n	8003f9a <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	73fb      	strb	r3, [r7, #15]
            break;
 8003f8e:	e004      	b.n	8003f9a <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	f043 0304 	orr.w	r3, r3, #4
 8003f96:	73fb      	strb	r3, [r7, #15]
            break;
 8003f98:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f7ff fd48 	bl	8003a34 <write_register>
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	3b02      	subs	r3, #2
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	2003      	movs	r0, #3
 8003fc0:	f7ff fd38 	bl	8003a34 <write_register>
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8003fd6:	2004      	movs	r0, #4
 8003fd8:	f7ff fd06 	bl	80039e8 <read_register>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	f063 030f 	orn	r3, r3, #15
 8003fe6:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	2004      	movs	r0, #4
 8003ff6:	f7ff fd1d 	bl	8003a34 <write_register>
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800400e:	2004      	movs	r0, #4
 8004010:	f7ff fcea 	bl	80039e8 <read_register>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	f043 030f 	orr.w	r3, r3, #15
 800401e:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	4a0b      	ldr	r2, [pc, #44]	@ (8004050 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	b25a      	sxtb	r2, r3
 8004032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004036:	4313      	orrs	r3, r2
 8004038:	b25b      	sxtb	r3, r3
 800403a:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	4619      	mov	r1, r3
 8004040:	2004      	movs	r0, #4
 8004042:	f7ff fcf7 	bl	8003a34 <write_register>
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	10624dd3 	.word	0x10624dd3

08004054 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8004064:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8004066:	89fb      	ldrh	r3, [r7, #14]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	4619      	mov	r1, r3
 800406c:	2005      	movs	r0, #5
 800406e:	f7ff fce1 	bl	8003a34 <write_register>
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	4603      	mov	r3, r0
 8004082:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8004084:	2006      	movs	r0, #6
 8004086:	f7ff fcaf 	bl	80039e8 <read_register>
 800408a:	4603      	mov	r3, r0
 800408c:	f023 0306 	bic.w	r3, r3, #6
 8004090:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	b25a      	sxtb	r2, r3
 8004098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409c:	4313      	orrs	r3, r2
 800409e:	b25b      	sxtb	r3, r3
 80040a0:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	4619      	mov	r1, r3
 80040a6:	2006      	movs	r0, #6
 80040a8:	f7ff fcc4 	bl	8003a34 <write_register>
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80040be:	2006      	movs	r0, #6
 80040c0:	f7ff fc92 	bl	80039e8 <read_register>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80040ca:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d00a      	beq.n	80040e8 <nrf24l01p_set_rf_air_data_rate+0x34>
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	dc0e      	bgt.n	80040f4 <nrf24l01p_set_rf_air_data_rate+0x40>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <nrf24l01p_set_rf_air_data_rate+0x3e>
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10a      	bne.n	80040f4 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	f043 0308 	orr.w	r3, r3, #8
 80040e4:	73fb      	strb	r3, [r7, #15]
            break;
 80040e6:	e005      	b.n	80040f4 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	f043 0320 	orr.w	r3, r3, #32
 80040ee:	73fb      	strb	r3, [r7, #15]
            break;
 80040f0:	e000      	b.n	80040f4 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 80040f2:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	4619      	mov	r1, r3
 80040f8:	2006      	movs	r0, #6
 80040fa:	f7ff fc9b 	bl	8003a34 <write_register>
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <__itoa>:
 8004106:	1e93      	subs	r3, r2, #2
 8004108:	2b22      	cmp	r3, #34	@ 0x22
 800410a:	b510      	push	{r4, lr}
 800410c:	460c      	mov	r4, r1
 800410e:	d904      	bls.n	800411a <__itoa+0x14>
 8004110:	2300      	movs	r3, #0
 8004112:	461c      	mov	r4, r3
 8004114:	700b      	strb	r3, [r1, #0]
 8004116:	4620      	mov	r0, r4
 8004118:	bd10      	pop	{r4, pc}
 800411a:	2a0a      	cmp	r2, #10
 800411c:	d109      	bne.n	8004132 <__itoa+0x2c>
 800411e:	2800      	cmp	r0, #0
 8004120:	da07      	bge.n	8004132 <__itoa+0x2c>
 8004122:	232d      	movs	r3, #45	@ 0x2d
 8004124:	700b      	strb	r3, [r1, #0]
 8004126:	2101      	movs	r1, #1
 8004128:	4240      	negs	r0, r0
 800412a:	4421      	add	r1, r4
 800412c:	f000 f806 	bl	800413c <__utoa>
 8004130:	e7f1      	b.n	8004116 <__itoa+0x10>
 8004132:	2100      	movs	r1, #0
 8004134:	e7f9      	b.n	800412a <__itoa+0x24>

08004136 <itoa>:
 8004136:	f7ff bfe6 	b.w	8004106 <__itoa>
	...

0800413c <__utoa>:
 800413c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413e:	b08b      	sub	sp, #44	@ 0x2c
 8004140:	4605      	mov	r5, r0
 8004142:	460b      	mov	r3, r1
 8004144:	466e      	mov	r6, sp
 8004146:	4c1d      	ldr	r4, [pc, #116]	@ (80041bc <__utoa+0x80>)
 8004148:	f104 0c20 	add.w	ip, r4, #32
 800414c:	4637      	mov	r7, r6
 800414e:	6820      	ldr	r0, [r4, #0]
 8004150:	6861      	ldr	r1, [r4, #4]
 8004152:	3408      	adds	r4, #8
 8004154:	c703      	stmia	r7!, {r0, r1}
 8004156:	4564      	cmp	r4, ip
 8004158:	463e      	mov	r6, r7
 800415a:	d1f7      	bne.n	800414c <__utoa+0x10>
 800415c:	7921      	ldrb	r1, [r4, #4]
 800415e:	6820      	ldr	r0, [r4, #0]
 8004160:	7139      	strb	r1, [r7, #4]
 8004162:	1e91      	subs	r1, r2, #2
 8004164:	2922      	cmp	r1, #34	@ 0x22
 8004166:	6038      	str	r0, [r7, #0]
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	d904      	bls.n	8004178 <__utoa+0x3c>
 800416e:	7019      	strb	r1, [r3, #0]
 8004170:	460b      	mov	r3, r1
 8004172:	4618      	mov	r0, r3
 8004174:	b00b      	add	sp, #44	@ 0x2c
 8004176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004178:	1e58      	subs	r0, r3, #1
 800417a:	4684      	mov	ip, r0
 800417c:	fbb5 f7f2 	udiv	r7, r5, r2
 8004180:	fb02 5617 	mls	r6, r2, r7, r5
 8004184:	3628      	adds	r6, #40	@ 0x28
 8004186:	446e      	add	r6, sp
 8004188:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800418c:	460c      	mov	r4, r1
 800418e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004192:	462e      	mov	r6, r5
 8004194:	42b2      	cmp	r2, r6
 8004196:	463d      	mov	r5, r7
 8004198:	f101 0101 	add.w	r1, r1, #1
 800419c:	d9ee      	bls.n	800417c <__utoa+0x40>
 800419e:	2200      	movs	r2, #0
 80041a0:	545a      	strb	r2, [r3, r1]
 80041a2:	1919      	adds	r1, r3, r4
 80041a4:	1aa5      	subs	r5, r4, r2
 80041a6:	42aa      	cmp	r2, r5
 80041a8:	dae3      	bge.n	8004172 <__utoa+0x36>
 80041aa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80041ae:	780e      	ldrb	r6, [r1, #0]
 80041b0:	3201      	adds	r2, #1
 80041b2:	7006      	strb	r6, [r0, #0]
 80041b4:	f801 5901 	strb.w	r5, [r1], #-1
 80041b8:	e7f4      	b.n	80041a4 <__utoa+0x68>
 80041ba:	bf00      	nop
 80041bc:	080042be 	.word	0x080042be

080041c0 <memset>:
 80041c0:	4603      	mov	r3, r0
 80041c2:	4402      	add	r2, r0
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d100      	bne.n	80041ca <memset+0xa>
 80041c8:	4770      	bx	lr
 80041ca:	f803 1b01 	strb.w	r1, [r3], #1
 80041ce:	e7f9      	b.n	80041c4 <memset+0x4>

080041d0 <__libc_init_array>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	2600      	movs	r6, #0
 80041d4:	4d0c      	ldr	r5, [pc, #48]	@ (8004208 <__libc_init_array+0x38>)
 80041d6:	4c0d      	ldr	r4, [pc, #52]	@ (800420c <__libc_init_array+0x3c>)
 80041d8:	1b64      	subs	r4, r4, r5
 80041da:	10a4      	asrs	r4, r4, #2
 80041dc:	42a6      	cmp	r6, r4
 80041de:	d109      	bne.n	80041f4 <__libc_init_array+0x24>
 80041e0:	f000 f81a 	bl	8004218 <_init>
 80041e4:	2600      	movs	r6, #0
 80041e6:	4d0a      	ldr	r5, [pc, #40]	@ (8004210 <__libc_init_array+0x40>)
 80041e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004214 <__libc_init_array+0x44>)
 80041ea:	1b64      	subs	r4, r4, r5
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	42a6      	cmp	r6, r4
 80041f0:	d105      	bne.n	80041fe <__libc_init_array+0x2e>
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f8:	4798      	blx	r3
 80041fa:	3601      	adds	r6, #1
 80041fc:	e7ee      	b.n	80041dc <__libc_init_array+0xc>
 80041fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004202:	4798      	blx	r3
 8004204:	3601      	adds	r6, #1
 8004206:	e7f2      	b.n	80041ee <__libc_init_array+0x1e>
 8004208:	080042e4 	.word	0x080042e4
 800420c:	080042e4 	.word	0x080042e4
 8004210:	080042e4 	.word	0x080042e4
 8004214:	080042e8 	.word	0x080042e8

08004218 <_init>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr

08004224 <_fini>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr
