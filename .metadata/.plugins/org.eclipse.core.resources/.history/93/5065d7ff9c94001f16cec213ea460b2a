#include "bsp_hcsr04.h"


static uint8_t distance;

PresenceSensor_Status BSP_GetPresence(float cut){
	if(distance >= cut){
		return NoPresence;
	}else if(distance < cut && distance != 0){
		return Presence;
	}
	return Error;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if (htim == &HCSR04_TIM_INSTANCE)  // if the interrupt source is channel1
	{
		HAL_HCSR04_Callback();
	}
}

void HAL_HCSR04_Callback(){
	static bool Is_First_Captured = false;
	if (!Is_First_Captured) // if the first value is not captured
	{
		IC_Val1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_TIM_CHANNEL); // read the first value
		Is_First_Captured = 1;  // set the first captured as true
		// Now change the polarity to falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
	}

	else if (Is_First_Captured==1)   // if the first is already captured
	{
		IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter

		if (IC_Val2 > IC_Val1)
		{
			Difference = IC_Val2-IC_Val1;
		}

		else if (IC_Val1 > IC_Val2)
		{
			Difference = (0xffff - IC_Val1) + IC_Val2;
		}

		Distance = Difference * .034/2;
		Is_First_Captured = 0; // set it back to false

		// set polarity to rising edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
	}
}

void HAL_HCSR04_Trigger ()
{
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
	delay(10);  // wait for 10 us
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
	if(htim == &htim3){
		HCSR04_Trigger();
	}
}

