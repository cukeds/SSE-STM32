#include "bsp_rf.h"
static BSP_RF_Params_TypeDef *params;
static BSP_RF_MODE_TypeDef mode = NONE;
static bool clear_tx_irq = false;
static uint8_t rx_data[NRF24L01P_PAYLOAD_LENGTH];
void BSP_RF_Init(BSP_RF_Params_TypeDef* _params)
{
    params = _params;
    nrf24l01p_init(_params->rate, _params->channel, _params->retransmit_count);
    nrf24l01p_standby();
    mode = STANDBY;
}


void BSP_RF_PTX(){

	if(mode == STANDBY){
		nrf24l01p_tx_init();
	} else if(mode == RX){
		nrf24l01p_standby();
		nrf24l01p_tx_init();
	}
	mode = TX;
}

void BSP_RF_SendMessage(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH])
{
	BSP_RF_PTX();

	nrf24l01p_tx_transmit(payload);
    clear_tx_irq = true;
}

void BSP_RF_Listening()
{
	if(mode == STANDBY){
		nrf24l01p_rx_init();
	}
	else if(mode == TX){
		nrf24l01p_standby();
		nrf24l01p_rx_init();
	}
	mode = RX;

}

void _BSP_RF_ReceiveMessage(){
	nrf24l01p_rx_receive(rx_data);
	nrf24l01p_clear_rx_dr();
}

void BSP_RF_IrqHandler(){
	if(mode == TX || clear_tx_irq){
		nrf24l01p_clear_tx_ds();
	    clear_tx_irq = false;
		nrf24l01p_standby();
		mode = STANDBY;
	}
	_BSP_RF_ReceiveMessage();

}

void BSP_RF_ReadData(uint8_t payload[NRF24L01P_PAYLOAD_LENGTH]){
	memcpy(payload, rx_data, NRF24L01P_PAYLOAD_LENGTH);
}
