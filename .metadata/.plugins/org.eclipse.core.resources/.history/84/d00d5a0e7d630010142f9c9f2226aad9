/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "defines.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

uint8_t sNum[5];
uint16_t button=0;
static uint16_t milliseconds=0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void received_message();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
boolean RetFalse(){
	return False;
}


extern uint8_t rfidSymbol_idx;
extern uint8_t motionSymbol_idx;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_I2C1_Init();
  MX_SPI2_Init();
  MX_SPI1_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_SetupParams_TypeDef lcd_params;
//  lcd_params.condition = BSP_HCSR501_Ready;
//  lcd_params.setup_time = (uint8_t) HCSR501_SETUP_SECONDS + HCSR501_SETUP_MINUTES*60;
//  lcd_params.seconds = &motion[4];
  lcd_params.condition = RetFalse;
  lcd_params.setup_time = 0;
  lcd_params.seconds = 0;


  BSP_ENCODER_Init();
  BSP_RC522_Init();

  BSP_LCD_Init(&lcd_params);


  BSP_RF_Params_TypeDef rf_params = {0};
  rf_params.channel = NRF24L01P_CHANNEL;
  rf_params.rate = NRF24L01P_RATE;
  rf_params.retransmit_count = NRF24L01P_RETRANSMIT_COUNT;
  BSP_RF_Init(&rf_params);
  BSP_RF_Listening();
  HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_SET);
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
  uint8_t last_state = 0;
  uint8_t waiting = 1;


  app_init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */


void received_message()
{
	if(!BSP_RF_IrqHandler())
		return;
	HAL_GPIO_TogglePin(GPIOD, LED_Pin);
	APP_SETFLAG(MESSAGE_RECEIVED, true);
	HAL_GPIO_TogglePin(GPIOD, LED_Pin);
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	static uint32_t last_interrupt_time = 0;

	if(GPIO_Pin == HCSR501_PIN){
		if(BSP_HCSR501_Ready()){

			SET_FIELD(GET_APP_DATA(), motion_status, BSP_HCSR501_Read());
			if(!GET_APP_DATA()->motion_status){
				APP_SETFLAG(UPDATE_MOTION, True);
			}

//				HAL_TIM_Base_Start_IT(&htim4);
//				BSP_HCSR501_OffTime();
		}
	}

    if (GPIO_Pin == Encoder_Switch_Pin) {
        uint32_t current_time = HAL_GetTick();

        // Check if the debounce delay has passed
        if ((current_time - last_interrupt_time) >= DEBOUNCE_DELAY) {
            last_interrupt_time = current_time; // Update last interrupt time

            // Check the encoder switch state and update flags
            if (BSP_ENCODER_GetSwitch() == GPIO_PIN_SET) {
                APP_SETFLAG(BUTTON_PRESSED, True);
            } else {
                APP_SETFLAG(BUTTON_PRESSED, False);
            }
        }
    }


	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
	{
		received_message();
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim == &htim4){
		BSP_HCSR501_Init();
		HAL_TIM_Base_Stop_IT(&htim4);
		return;
	}

	milliseconds++;
	static uint16_t seconds = 0;
	static uint16_t milliseconds2 = 0;
	static uint16_t minutes = 0;
	static boolean triggered = False;
	static uint16_t button_held_counter = 0;
	static uint16_t button_held_cooldown_timer = 0;
	milliseconds2++;
	seconds += milliseconds2 / 1000;
	milliseconds2 %= 1000;
	minutes = seconds / 60;
	seconds %= 60;
	if(minutes >= HCSR501_SETUP_MINUTES && seconds >= HCSR501_SETUP_SECONDS && !triggered){
		BSP_HCSR501_Init();
		triggered = True;
	}

	BSP_Countdown();
	if(BSP_GetCounter() <= 0){
		APP_SETFLAG(IS_CARD_COOLDOWN, False);
		if(BSP_GetDisplay() == True){
			BSP_LCD_SendMessage("Lector", 0, 0, True);
			BSP_LCD_SendMessage("Disponible", 0, 1, False);
		}
		BSP_LCD_UPDATE_STATUS(rfidSymbol_idx, True);
	}
	if(BSP_GetCounter() == 5000 && BSP_GetDisplay()){
		BSP_LCD_SendMessage("Espera...", 0, 0, True);
	}

	BSP_Blink();

	if(milliseconds % (MOTION_ACTIVITY_RANGE_SECONDS * 1000) == 0){

		SET_FIELD(GET_APP_DATA(), motion_activity, GET_APP_DATA()->motion_status == 1 ? GET_APP_DATA()->motion_activity+1 : 0);
		if(GET_APP_DATA()->motion_activity == MOTION_ACTIVITY_MINIMUM){
			APP_SETFLAG(UPDATE_MOTION, True);
		}

	}


    if (GET_APP_FLAGS()->button_pressed) {
        button_held_counter++; // Increment the counter for button hold duration

        // Check if the button has been held long enough to be considered "held"
        if (button_held_counter >= CONFIG_MENU_BUTTON_DELAY_MS) {
            APP_SETFLAG(BUTTON_HELD, True);       // Mark as "held"
            APP_SETFLAG(BUTTON_PRESSED, False);    // Reset "pressed" flag
            APP_SETFLAG(BUTTON_ONLY_PRESSED, False); // Reset "only pressed" flag
            button_held_counter = 0; // Reset counter after confirming hold status
            button_held_cooldown_timer = BUTTON_HELD_COOLDOWN;
        }
        if(BSP_ENCODER_GetSwitch() == GPIO_PIN_RESET){
        	APP_SETFLAG(BUTTON_PRESSED, False);
        }
    } else {
        // If button was previously pressed and released quickly
        if (button_held_counter > 0 && button_held_counter < CONFIG_MENU_BUTTON_DELAY_MS) {
            // It was a short press, not held long enough
        	APP_SETFLAG(BUTTON_PRESSED, False);
            APP_SETFLAG(BUTTON_ONLY_PRESSED, True); // Mark as "only pressed"
            APP_SETFLAG(BUTTON_HELD, False);        // Ensure "held" is reset
            if(button_held_cooldown_timer != 0){
            	APP_SETFLAG(BUTTON_ONLY_PRESSED, False);
            }
        }
        button_held_counter = 0; // Reset counter since button is now released
    }
    if(button_held_cooldown_timer > 0){
        button_held_cooldown_timer--;
    }

}

uint16_t GetMS(void){
	return milliseconds;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
