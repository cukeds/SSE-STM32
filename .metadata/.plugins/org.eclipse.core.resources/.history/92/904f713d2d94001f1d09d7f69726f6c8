#include "hcsr04.h"

static uint8_t Distance  = 0;
static bool valueReady = false;


void HAL_HCSR04_Callback(TIM_HandleTypeDef *htim){

	static bool Is_First_Captured = false;
	static uint32_t IC_Val1 = 0;
	static uint32_t IC_Val2 = 0;
	static uint32_t Difference = 0;
	if (!Is_First_Captured) // if the first value is not captured
	{
		IC_Val1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_TIMCHANNEL); // read the first value
		Is_First_Captured = true;  // set the first captured as true
		// Now change the polarity to falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_TIMCHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
	}

	else if (Is_First_Captured)   // if the first is already captured
	{
		IC_Val2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_TIMCHANNEL);  // read second value
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter

		if (IC_Val2 > IC_Val1)
		{
			Difference = IC_Val2-IC_Val1;
		}

		else if (IC_Val1 > IC_Val2)
		{
			Difference = (0xffff - IC_Val1) + IC_Val2;
		}

		Distance = Difference * .034/2;
		Is_First_Captured = false; // set it back to false
		valueReady = true;

		// set polarity to rising edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_TIMCHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&HCSR04_TIM, TIM_IT_CC1);
	}

}

void HAL_HCSR04_Read ()
{
	valueReady = false;
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
	HAL_Delay(10);  // wait for 10 us
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}

bool HAL_HCSR04_GetDistance(uint8_t* distance){
	(*distance) = Distance;
	return valueReady;
};

HCSR04_STATUS BSP_HCSR04_GetPresence(uint8_t cut){
	HAL_HCSR04_Read();
	uint8_t distance;
	if(HAL_HCSR04_GetDistance(distance) && distance >= cut){
		return NoPresence;
	}
	else if(HAL_HCSR04_GetDistance(distance)){
		return Presence;
	}
	return Error;
}
